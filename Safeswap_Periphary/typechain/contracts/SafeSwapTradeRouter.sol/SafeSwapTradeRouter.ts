/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace SafeSwapTradeRouter {
  export type AdaptiveLpPriceRangeStruct = {
    tokenAddress: PromiseOrValue<string>;
    lastPrice: PromiseOrValue<BigNumberish>;
    upl: PromiseOrValue<BigNumberish>;
    lpl: PromiseOrValue<BigNumberish>;
    isEnabled: PromiseOrValue<boolean>;
  };

  export type AdaptiveLpPriceRangeStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    tokenAddress: string;
    lastPrice: BigNumber;
    upl: BigNumber;
    lpl: BigNumber;
    isEnabled: boolean;
  };

  export type TokenInfoStruct = {
    transactionType: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    feePercentage: PromiseOrValue<BigNumberish>;
    isEnabled: PromiseOrValue<boolean>;
    isDeleted: PromiseOrValue<boolean>;
  };

  export type TokenInfoStructOutput = [
    number,
    string,
    BigNumber,
    boolean,
    boolean
  ] & {
    transactionType: number;
    tokenAddress: string;
    feePercentage: BigNumber;
    isEnabled: boolean;
    isDeleted: boolean;
  };

  export type SingleSwapFeeStruct = {
    swapKind: PromiseOrValue<BigNumberish>;
    assetOut: PromiseOrValue<string>;
    beneficiary: PromiseOrValue<string>;
    percentage: PromiseOrValue<BigNumberish>;
    isEnabled: PromiseOrValue<boolean>;
  };

  export type SingleSwapFeeStructOutput = [
    number,
    string,
    string,
    BigNumber,
    boolean
  ] & {
    swapKind: number;
    assetOut: string;
    beneficiary: string;
    percentage: BigNumber;
    isEnabled: boolean;
  };

  export type TokenFeeStruct = {
    tokenInfo: SafeSwapTradeRouter.TokenInfoStruct;
    singleSwapFees: SafeSwapTradeRouter.SingleSwapFeeStruct[];
  };

  export type TokenFeeStructOutput = [
    SafeSwapTradeRouter.TokenInfoStructOutput,
    SafeSwapTradeRouter.SingleSwapFeeStructOutput[]
  ] & {
    tokenInfo: SafeSwapTradeRouter.TokenInfoStructOutput;
    singleSwapFees: SafeSwapTradeRouter.SingleSwapFeeStructOutput[];
  };

  export type TradeStruct = {
    amountIn: PromiseOrValue<BigNumberish>;
    amountOut: PromiseOrValue<BigNumberish>;
    path: PromiseOrValue<string>[];
    to: PromiseOrValue<string>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type TradeStructOutput = [
    BigNumber,
    BigNumber,
    string[],
    string,
    BigNumber
  ] & {
    amountIn: BigNumber;
    amountOut: BigNumber;
    path: string[];
    to: string;
    deadline: BigNumber;
  };
}

export interface SafeSwapTradeRouterInterface extends utils.Interface {
  functions: {
    "addFfsWhitelist(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "feeJar()": FunctionFragment;
    "feePercent()": FunctionFragment;
    "getFees(address[],uint256,address)": FunctionFragment;
    "getLpPriceRangeInfo(address)": FunctionFragment;
    "getReserves(address)": FunctionFragment;
    "getTokenFeeAddresses()": FunctionFragment;
    "getTokenInfoDetails(address,uint8)": FunctionFragment;
    "initialize(address,address,uint256,uint256)": FunctionFragment;
    "isARCBEnabled()": FunctionFragment;
    "percent()": FunctionFragment;
    "removeFfsWhitelist(address)": FunctionFragment;
    "resetLpLastPrice(address)": FunctionFragment;
    "sePercent(uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setFeeJar(address)": FunctionFragment;
    "setFeePercent(uint256)": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "submitLpPriceRange(address,uint256,uint256)": FunctionFragment;
    "submitTokenSwapFee(address,uint8,(uint8,address,address,uint256,bool))": FunctionFragment;
    "swapETHForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)": FunctionFragment;
    "swapExactETHForTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)": FunctionFragment;
    "swapExactTokensForETHAndFeeAmount((uint256,uint256,address[],address,uint256))": FunctionFragment;
    "swapExactTokensForTokensWithFeeAmount((uint256,uint256,address[],address,uint256))": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "swapTokensForExactETHAndFeeAmount((uint256,uint256,address[],address,uint256))": FunctionFragment;
    "swapTokensForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256))": FunctionFragment;
    "switchARCBActivation()": FunctionFragment;
    "switchLpPriceRangeActivation(address)": FunctionFragment;
    "switchSingleSwapActivation(address,uint8,uint256)": FunctionFragment;
    "switchTokenActivation(address,uint8)": FunctionFragment;
    "switchTokenDeletion(address,uint8)": FunctionFragment;
    "updateLpPriceRange(address,uint256,uint256)": FunctionFragment;
    "updateTokenSwapFee(address,uint8,(uint8,address,address,uint256,bool),uint256)": FunctionFragment;
    "whitelistFfsFee(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addFfsWhitelist"
      | "admin"
      | "feeJar"
      | "feePercent"
      | "getFees"
      | "getLpPriceRangeInfo"
      | "getReserves"
      | "getTokenFeeAddresses"
      | "getTokenInfoDetails"
      | "initialize"
      | "isARCBEnabled"
      | "percent"
      | "removeFfsWhitelist"
      | "resetLpLastPrice"
      | "sePercent"
      | "setAdmin"
      | "setFeeJar"
      | "setFeePercent"
      | "setRouter"
      | "submitLpPriceRange"
      | "submitTokenSwapFee"
      | "swapETHForExactTokensWithFeeAmount"
      | "swapExactETHForTokensWithFeeAmount"
      | "swapExactTokensForETHAndFeeAmount"
      | "swapExactTokensForTokensWithFeeAmount"
      | "swapRouter"
      | "swapTokensForExactETHAndFeeAmount"
      | "swapTokensForExactTokensWithFeeAmount"
      | "switchARCBActivation"
      | "switchLpPriceRangeActivation"
      | "switchSingleSwapActivation"
      | "switchTokenActivation"
      | "switchTokenDeletion"
      | "updateLpPriceRange"
      | "updateTokenSwapFee"
      | "whitelistFfsFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addFfsWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeJar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFees",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpPriceRangeInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenFeeAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfoDetails",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isARCBEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "percent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFfsWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetLpLastPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sePercent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeJar",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePercent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitLpPriceRange",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTokenSwapFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      SafeSwapTradeRouter.SingleSwapFeeStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForExactTokensWithFeeAmount",
    values: [SafeSwapTradeRouter.TradeStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokensWithFeeAmount",
    values: [SafeSwapTradeRouter.TradeStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETHAndFeeAmount",
    values: [SafeSwapTradeRouter.TradeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensWithFeeAmount",
    values: [SafeSwapTradeRouter.TradeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactETHAndFeeAmount",
    values: [SafeSwapTradeRouter.TradeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokensWithFeeAmount",
    values: [SafeSwapTradeRouter.TradeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "switchARCBActivation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "switchLpPriceRangeActivation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "switchSingleSwapActivation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "switchTokenActivation",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "switchTokenDeletion",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLpPriceRange",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenSwapFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      SafeSwapTradeRouter.SingleSwapFeeStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistFfsFee",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addFfsWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeJar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLpPriceRangeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenFeeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfoDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isARCBEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "percent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFfsWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetLpLastPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sePercent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeJar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitLpPriceRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTokenSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForExactTokensWithFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokensWithFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETHAndFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensWithFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactETHAndFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokensWithFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchARCBActivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchLpPriceRangeActivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchSingleSwapActivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchTokenActivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchTokenDeletion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLpPriceRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistFfsFee",
    data: BytesLike
  ): Result;

  events: {
    "NewFeeJar(address)": EventFragment;
    "SetARCBStatus(bool)": EventFragment;
    "SetLpPriceRangeStatus(address,bool)": EventFragment;
    "SetTokenDeletionStatus(address,uint8,bool)": EventFragment;
    "SetTokenFeeStatus(address,uint8,bool)": EventFragment;
    "SetTokenSwapFeeStatus(address,uint8,bool,uint256)": EventFragment;
    "SubmitLpPriceRange(address,uint256,uint256,uint256)": EventFragment;
    "SubmitTokenSwapFee(address,uint8,uint256,uint8,address,address,uint256,bool)": EventFragment;
    "TokenFeeSwapped(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewFeeJar"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetARCBStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLpPriceRangeStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenDeletionStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenFeeStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenSwapFeeStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitLpPriceRange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitTokenSwapFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenFeeSwapped"): EventFragment;
}

export interface NewFeeJarEventObject {
  _feeJar: string;
}
export type NewFeeJarEvent = TypedEvent<[string], NewFeeJarEventObject>;

export type NewFeeJarEventFilter = TypedEventFilter<NewFeeJarEvent>;

export interface SetARCBStatusEventObject {
  _isARCBEnabled: boolean;
}
export type SetARCBStatusEvent = TypedEvent<
  [boolean],
  SetARCBStatusEventObject
>;

export type SetARCBStatusEventFilter = TypedEventFilter<SetARCBStatusEvent>;

export interface SetLpPriceRangeStatusEventObject {
  _pair: string;
  _isEnabled: boolean;
}
export type SetLpPriceRangeStatusEvent = TypedEvent<
  [string, boolean],
  SetLpPriceRangeStatusEventObject
>;

export type SetLpPriceRangeStatusEventFilter =
  TypedEventFilter<SetLpPriceRangeStatusEvent>;

export interface SetTokenDeletionStatusEventObject {
  _tokenAddress: string;
  _transactionType: number;
  _status: boolean;
}
export type SetTokenDeletionStatusEvent = TypedEvent<
  [string, number, boolean],
  SetTokenDeletionStatusEventObject
>;

export type SetTokenDeletionStatusEventFilter =
  TypedEventFilter<SetTokenDeletionStatusEvent>;

export interface SetTokenFeeStatusEventObject {
  _tokenAddress: string;
  _transactionType: number;
  _isEnabled: boolean;
}
export type SetTokenFeeStatusEvent = TypedEvent<
  [string, number, boolean],
  SetTokenFeeStatusEventObject
>;

export type SetTokenFeeStatusEventFilter =
  TypedEventFilter<SetTokenFeeStatusEvent>;

export interface SetTokenSwapFeeStatusEventObject {
  _tokenAddress: string;
  _transactionType: number;
  _isEnabled: boolean;
  _index: BigNumber;
}
export type SetTokenSwapFeeStatusEvent = TypedEvent<
  [string, number, boolean, BigNumber],
  SetTokenSwapFeeStatusEventObject
>;

export type SetTokenSwapFeeStatusEventFilter =
  TypedEventFilter<SetTokenSwapFeeStatusEvent>;

export interface SubmitLpPriceRangeEventObject {
  _pair: string;
  _upl: BigNumber;
  _lpl: BigNumber;
  _lastPrice: BigNumber;
}
export type SubmitLpPriceRangeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SubmitLpPriceRangeEventObject
>;

export type SubmitLpPriceRangeEventFilter =
  TypedEventFilter<SubmitLpPriceRangeEvent>;

export interface SubmitTokenSwapFeeEventObject {
  _tokenAddress: string;
  _transactionType: number;
  _tokenFeePercentage: BigNumber;
  _swapKind: number;
  _assetOut: string;
  _beneficiary: string;
  swapFeePercentage: BigNumber;
  isEnabled: boolean;
}
export type SubmitTokenSwapFeeEvent = TypedEvent<
  [string, number, BigNumber, number, string, string, BigNumber, boolean],
  SubmitTokenSwapFeeEventObject
>;

export type SubmitTokenSwapFeeEventFilter =
  TypedEventFilter<SubmitTokenSwapFeeEvent>;

export interface TokenFeeSwappedEventObject {
  _beneficiary: string;
  _assetIn: string;
  _assetOut: string;
  _feeAmount: BigNumber;
}
export type TokenFeeSwappedEvent = TypedEvent<
  [string, string, string, BigNumber],
  TokenFeeSwappedEventObject
>;

export type TokenFeeSwappedEventFilter = TypedEventFilter<TokenFeeSwappedEvent>;

export interface SafeSwapTradeRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SafeSwapTradeRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addFfsWhitelist(
      _wl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    feeJar(overrides?: CallOverrides): Promise<[string]>;

    feePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFees(
      _path: PromiseOrValue<string>[],
      _amountIn: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalBNBFee: BigNumber;
        dexFee: BigNumber;
        tokenAFee: BigNumber;
        tokenBFee: BigNumber;
      }
    >;

    getLpPriceRangeInfo(
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[SafeSwapTradeRouter.AdaptiveLpPriceRangeStructOutput]>;

    getReserves(
      pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reserve0: BigNumber; reserve1: BigNumber }
    >;

    getTokenFeeAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getTokenInfoDetails(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SafeSwapTradeRouter.TokenFeeStructOutput]>;

    initialize(
      _feeJar: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      _feePercent: PromiseOrValue<BigNumberish>,
      _percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isARCBEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    percent(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeFfsWhitelist(
      _wl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetLpLastPrice(
      _pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sePercent(
      _percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeJar(
      _feeJar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitLpPriceRange(
      _pair: PromiseOrValue<string>,
      _upl: PromiseOrValue<BigNumberish>,
      _lpl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitTokenSwapFee(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      _singleSwapFee: SafeSwapTradeRouter.SingleSwapFeeStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapETHForExactTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      _feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactETHForTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      _feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForETHAndFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    swapTokensForExactETHAndFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    switchARCBActivation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    switchLpPriceRangeActivation(
      _pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    switchSingleSwapActivation(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    switchTokenActivation(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    switchTokenDeletion(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateLpPriceRange(
      _pair: PromiseOrValue<string>,
      _upl: PromiseOrValue<BigNumberish>,
      _lpl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTokenSwapFee(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      _singleSwapFee: SafeSwapTradeRouter.SingleSwapFeeStruct,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistFfsFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addFfsWhitelist(
    _wl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  feeJar(overrides?: CallOverrides): Promise<string>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  getFees(
    _path: PromiseOrValue<string>[],
    _amountIn: PromiseOrValue<BigNumberish>,
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalBNBFee: BigNumber;
      dexFee: BigNumber;
      tokenAFee: BigNumber;
      tokenBFee: BigNumber;
    }
  >;

  getLpPriceRangeInfo(
    _pair: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<SafeSwapTradeRouter.AdaptiveLpPriceRangeStructOutput>;

  getReserves(
    pair: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { reserve0: BigNumber; reserve1: BigNumber }
  >;

  getTokenFeeAddresses(overrides?: CallOverrides): Promise<string[]>;

  getTokenInfoDetails(
    _tokenAddress: PromiseOrValue<string>,
    _transactionType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SafeSwapTradeRouter.TokenFeeStructOutput>;

  initialize(
    _feeJar: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    _feePercent: PromiseOrValue<BigNumberish>,
    _percent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isARCBEnabled(overrides?: CallOverrides): Promise<boolean>;

  percent(overrides?: CallOverrides): Promise<BigNumber>;

  removeFfsWhitelist(
    _wl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetLpLastPrice(
    _pair: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sePercent(
    _percent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeJar(
    _feeJar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeePercent(
    _feePercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRouter(
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitLpPriceRange(
    _pair: PromiseOrValue<string>,
    _upl: PromiseOrValue<BigNumberish>,
    _lpl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitTokenSwapFee(
    _tokenAddress: PromiseOrValue<string>,
    _transactionType: PromiseOrValue<BigNumberish>,
    _singleSwapFee: SafeSwapTradeRouter.SingleSwapFeeStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapETHForExactTokensWithFeeAmount(
    trade: SafeSwapTradeRouter.TradeStruct,
    _feeAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactETHForTokensWithFeeAmount(
    trade: SafeSwapTradeRouter.TradeStruct,
    _feeAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForETHAndFeeAmount(
    trade: SafeSwapTradeRouter.TradeStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensWithFeeAmount(
    trade: SafeSwapTradeRouter.TradeStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  swapTokensForExactETHAndFeeAmount(
    trade: SafeSwapTradeRouter.TradeStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactTokensWithFeeAmount(
    trade: SafeSwapTradeRouter.TradeStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  switchARCBActivation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  switchLpPriceRangeActivation(
    _pair: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  switchSingleSwapActivation(
    _tokenAddress: PromiseOrValue<string>,
    _transactionType: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  switchTokenActivation(
    _tokenAddress: PromiseOrValue<string>,
    _transactionType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  switchTokenDeletion(
    _tokenAddress: PromiseOrValue<string>,
    _transactionType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateLpPriceRange(
    _pair: PromiseOrValue<string>,
    _upl: PromiseOrValue<BigNumberish>,
    _lpl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTokenSwapFee(
    _tokenAddress: PromiseOrValue<string>,
    _transactionType: PromiseOrValue<BigNumberish>,
    _singleSwapFee: SafeSwapTradeRouter.SingleSwapFeeStruct,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistFfsFee(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addFfsWhitelist(
      _wl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    feeJar(overrides?: CallOverrides): Promise<string>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getFees(
      _path: PromiseOrValue<string>[],
      _amountIn: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalBNBFee: BigNumber;
        dexFee: BigNumber;
        tokenAFee: BigNumber;
        tokenBFee: BigNumber;
      }
    >;

    getLpPriceRangeInfo(
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<SafeSwapTradeRouter.AdaptiveLpPriceRangeStructOutput>;

    getReserves(
      pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reserve0: BigNumber; reserve1: BigNumber }
    >;

    getTokenFeeAddresses(overrides?: CallOverrides): Promise<string[]>;

    getTokenInfoDetails(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SafeSwapTradeRouter.TokenFeeStructOutput>;

    initialize(
      _feeJar: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      _feePercent: PromiseOrValue<BigNumberish>,
      _percent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isARCBEnabled(overrides?: CallOverrides): Promise<boolean>;

    percent(overrides?: CallOverrides): Promise<BigNumber>;

    removeFfsWhitelist(
      _wl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resetLpLastPrice(
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sePercent(
      _percent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeJar(
      _feeJar: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitLpPriceRange(
      _pair: PromiseOrValue<string>,
      _upl: PromiseOrValue<BigNumberish>,
      _lpl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTokenSwapFee(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      _singleSwapFee: SafeSwapTradeRouter.SingleSwapFeeStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapETHForExactTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      _feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactETHForTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      _feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForETHAndFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    swapTokensForExactETHAndFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForExactTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    switchARCBActivation(overrides?: CallOverrides): Promise<void>;

    switchLpPriceRangeActivation(
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    switchSingleSwapActivation(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    switchTokenActivation(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    switchTokenDeletion(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLpPriceRange(
      _pair: PromiseOrValue<string>,
      _upl: PromiseOrValue<BigNumberish>,
      _lpl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenSwapFee(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      _singleSwapFee: SafeSwapTradeRouter.SingleSwapFeeStruct,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistFfsFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NewFeeJar(address)"(
      _feeJar?: PromiseOrValue<string> | null
    ): NewFeeJarEventFilter;
    NewFeeJar(_feeJar?: PromiseOrValue<string> | null): NewFeeJarEventFilter;

    "SetARCBStatus(bool)"(_isARCBEnabled?: null): SetARCBStatusEventFilter;
    SetARCBStatus(_isARCBEnabled?: null): SetARCBStatusEventFilter;

    "SetLpPriceRangeStatus(address,bool)"(
      _pair?: PromiseOrValue<string> | null,
      _isEnabled?: null
    ): SetLpPriceRangeStatusEventFilter;
    SetLpPriceRangeStatus(
      _pair?: PromiseOrValue<string> | null,
      _isEnabled?: null
    ): SetLpPriceRangeStatusEventFilter;

    "SetTokenDeletionStatus(address,uint8,bool)"(
      _tokenAddress?: PromiseOrValue<string> | null,
      _transactionType?: null,
      _status?: null
    ): SetTokenDeletionStatusEventFilter;
    SetTokenDeletionStatus(
      _tokenAddress?: PromiseOrValue<string> | null,
      _transactionType?: null,
      _status?: null
    ): SetTokenDeletionStatusEventFilter;

    "SetTokenFeeStatus(address,uint8,bool)"(
      _tokenAddress?: PromiseOrValue<string> | null,
      _transactionType?: null,
      _isEnabled?: null
    ): SetTokenFeeStatusEventFilter;
    SetTokenFeeStatus(
      _tokenAddress?: PromiseOrValue<string> | null,
      _transactionType?: null,
      _isEnabled?: null
    ): SetTokenFeeStatusEventFilter;

    "SetTokenSwapFeeStatus(address,uint8,bool,uint256)"(
      _tokenAddress?: PromiseOrValue<string> | null,
      _transactionType?: null,
      _isEnabled?: null,
      _index?: PromiseOrValue<BigNumberish> | null
    ): SetTokenSwapFeeStatusEventFilter;
    SetTokenSwapFeeStatus(
      _tokenAddress?: PromiseOrValue<string> | null,
      _transactionType?: null,
      _isEnabled?: null,
      _index?: PromiseOrValue<BigNumberish> | null
    ): SetTokenSwapFeeStatusEventFilter;

    "SubmitLpPriceRange(address,uint256,uint256,uint256)"(
      _pair?: PromiseOrValue<string> | null,
      _upl?: PromiseOrValue<BigNumberish> | null,
      _lpl?: PromiseOrValue<BigNumberish> | null,
      _lastPrice?: null
    ): SubmitLpPriceRangeEventFilter;
    SubmitLpPriceRange(
      _pair?: PromiseOrValue<string> | null,
      _upl?: PromiseOrValue<BigNumberish> | null,
      _lpl?: PromiseOrValue<BigNumberish> | null,
      _lastPrice?: null
    ): SubmitLpPriceRangeEventFilter;

    "SubmitTokenSwapFee(address,uint8,uint256,uint8,address,address,uint256,bool)"(
      _tokenAddress?: PromiseOrValue<string> | null,
      _transactionType?: null,
      _tokenFeePercentage?: null,
      _swapKind?: null,
      _assetOut?: PromiseOrValue<string> | null,
      _beneficiary?: PromiseOrValue<string> | null,
      swapFeePercentage?: null,
      isEnabled?: null
    ): SubmitTokenSwapFeeEventFilter;
    SubmitTokenSwapFee(
      _tokenAddress?: PromiseOrValue<string> | null,
      _transactionType?: null,
      _tokenFeePercentage?: null,
      _swapKind?: null,
      _assetOut?: PromiseOrValue<string> | null,
      _beneficiary?: PromiseOrValue<string> | null,
      swapFeePercentage?: null,
      isEnabled?: null
    ): SubmitTokenSwapFeeEventFilter;

    "TokenFeeSwapped(address,address,address,uint256)"(
      _beneficiary?: PromiseOrValue<string> | null,
      _assetIn?: PromiseOrValue<string> | null,
      _assetOut?: PromiseOrValue<string> | null,
      _feeAmount?: null
    ): TokenFeeSwappedEventFilter;
    TokenFeeSwapped(
      _beneficiary?: PromiseOrValue<string> | null,
      _assetIn?: PromiseOrValue<string> | null,
      _assetOut?: PromiseOrValue<string> | null,
      _feeAmount?: null
    ): TokenFeeSwappedEventFilter;
  };

  estimateGas: {
    addFfsWhitelist(
      _wl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    feeJar(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getFees(
      _path: PromiseOrValue<string>[],
      _amountIn: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpPriceRangeInfo(
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(
      pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenFeeAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenInfoDetails(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _feeJar: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      _feePercent: PromiseOrValue<BigNumberish>,
      _percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isARCBEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    percent(overrides?: CallOverrides): Promise<BigNumber>;

    removeFfsWhitelist(
      _wl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetLpLastPrice(
      _pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sePercent(
      _percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeJar(
      _feeJar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitLpPriceRange(
      _pair: PromiseOrValue<string>,
      _upl: PromiseOrValue<BigNumberish>,
      _lpl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitTokenSwapFee(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      _singleSwapFee: SafeSwapTradeRouter.SingleSwapFeeStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapETHForExactTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      _feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactETHForTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      _feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactTokensForETHAndFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactTokensForTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    swapTokensForExactETHAndFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForExactTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    switchARCBActivation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    switchLpPriceRangeActivation(
      _pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    switchSingleSwapActivation(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    switchTokenActivation(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    switchTokenDeletion(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateLpPriceRange(
      _pair: PromiseOrValue<string>,
      _upl: PromiseOrValue<BigNumberish>,
      _lpl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTokenSwapFee(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      _singleSwapFee: SafeSwapTradeRouter.SingleSwapFeeStruct,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistFfsFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFfsWhitelist(
      _wl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeJar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFees(
      _path: PromiseOrValue<string>[],
      _amountIn: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLpPriceRangeInfo(
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(
      pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenFeeAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenInfoDetails(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _feeJar: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      _feePercent: PromiseOrValue<BigNumberish>,
      _percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isARCBEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFfsWhitelist(
      _wl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetLpLastPrice(
      _pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sePercent(
      _percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeJar(
      _feeJar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitLpPriceRange(
      _pair: PromiseOrValue<string>,
      _upl: PromiseOrValue<BigNumberish>,
      _lpl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitTokenSwapFee(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      _singleSwapFee: SafeSwapTradeRouter.SingleSwapFeeStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapETHForExactTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      _feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactETHForTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      _feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForETHAndFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapTokensForExactETHAndFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokensWithFeeAmount(
      trade: SafeSwapTradeRouter.TradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    switchARCBActivation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    switchLpPriceRangeActivation(
      _pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    switchSingleSwapActivation(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    switchTokenActivation(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    switchTokenDeletion(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateLpPriceRange(
      _pair: PromiseOrValue<string>,
      _upl: PromiseOrValue<BigNumberish>,
      _lpl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenSwapFee(
      _tokenAddress: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      _singleSwapFee: SafeSwapTradeRouter.SingleSwapFeeStruct,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistFfsFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
