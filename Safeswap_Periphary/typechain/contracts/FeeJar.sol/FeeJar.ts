/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface FeeJarInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FEE_JAR_ADMIN_ROLE()": FunctionFragment;
    "FEE_SETTER_ROLE()": FunctionFragment;
    "buyBackAndBurnFee()": FunctionFragment;
    "buyBackAndBurnFeeCollector()": FunctionFragment;
    "factory()": FunctionFragment;
    "fee()": FunctionFragment;
    "getFeeAmount(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address,address,uint256,uint32,uint32,uint32)": FunctionFragment;
    "lpFee()": FunctionFragment;
    "lpFeeCollector()": FunctionFragment;
    "maxPercentage()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setBuyBackAndBurnFee(uint32)": FunctionFragment;
    "setBuyBackAndBurnFeeCollector(address)": FunctionFragment;
    "setLPFee(uint32)": FunctionFragment;
    "setLPFeeCollector(address)": FunctionFragment;
    "setSupportFee(uint32)": FunctionFragment;
    "supportFee()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "withdrawBNB(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "FEE_JAR_ADMIN_ROLE"
      | "FEE_SETTER_ROLE"
      | "buyBackAndBurnFee"
      | "buyBackAndBurnFeeCollector"
      | "factory"
      | "fee"
      | "getFeeAmount"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "lpFee"
      | "lpFeeCollector"
      | "maxPercentage"
      | "renounceRole"
      | "revokeRole"
      | "setBuyBackAndBurnFee"
      | "setBuyBackAndBurnFeeCollector"
      | "setLPFee"
      | "setLPFeeCollector"
      | "setSupportFee"
      | "supportFee"
      | "supportsInterface"
      | "withdrawBNB"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_JAR_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_SETTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackAndBurnFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackAndBurnFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFeeAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "lpFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lpFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyBackAndBurnFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyBackAndBurnFeeCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLPFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLPFeeCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBNB",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_JAR_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_SETTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackAndBurnFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackAndBurnFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBuyBackAndBurnFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyBackAndBurnFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLPFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLPFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supportFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBNB",
    data: BytesLike
  ): Result;

  events: {
    "BuyBackAndBurnFeeSet(uint32,uint32)": EventFragment;
    "Fee(address,uint256,uint256,uint256,uint256,address,address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LPFeeCollectorSet(address,address)": EventFragment;
    "LPFeeSet(uint32,uint32)": EventFragment;
    "NetworFeeCollectorSet(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SupportFeeSet(uint32,uint32)": EventFragment;
    "WithdrawBNB(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyBackAndBurnFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LPFeeCollectorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LPFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NetworFeeCollectorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawBNB"): EventFragment;
}

export interface BuyBackAndBurnFeeSetEventObject {
  newFee: number;
  oldFee: number;
}
export type BuyBackAndBurnFeeSetEvent = TypedEvent<
  [number, number],
  BuyBackAndBurnFeeSetEventObject
>;

export type BuyBackAndBurnFeeSetEventFilter =
  TypedEventFilter<BuyBackAndBurnFeeSetEvent>;

export interface FeeEventObject {
  feePayer: string;
  feeAmount: BigNumber;
  buyBackAndBurnFeeAmount: BigNumber;
  lpFeeAmount: BigNumber;
  supportFeeAmount: BigNumber;
  buyBackAndBurnFeeCollector: string;
  supportFeeCollector: string;
  lpFeeCollector: string;
}
export type FeeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, string, string, string],
  FeeEventObject
>;

export type FeeEventFilter = TypedEventFilter<FeeEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LPFeeCollectorSetEventObject {
  newCollector: string;
  oldLPFeeCollector: string;
}
export type LPFeeCollectorSetEvent = TypedEvent<
  [string, string],
  LPFeeCollectorSetEventObject
>;

export type LPFeeCollectorSetEventFilter =
  TypedEventFilter<LPFeeCollectorSetEvent>;

export interface LPFeeSetEventObject {
  newFee: number;
  oldFee: number;
}
export type LPFeeSetEvent = TypedEvent<[number, number], LPFeeSetEventObject>;

export type LPFeeSetEventFilter = TypedEventFilter<LPFeeSetEvent>;

export interface NetworFeeCollectorSetEventObject {
  newCollector: string;
  oldBuyBackAndBurnFeeCollector: string;
}
export type NetworFeeCollectorSetEvent = TypedEvent<
  [string, string],
  NetworFeeCollectorSetEventObject
>;

export type NetworFeeCollectorSetEventFilter =
  TypedEventFilter<NetworFeeCollectorSetEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SupportFeeSetEventObject {
  newFee: number;
  oldFee: number;
}
export type SupportFeeSetEvent = TypedEvent<
  [number, number],
  SupportFeeSetEventObject
>;

export type SupportFeeSetEventFilter = TypedEventFilter<SupportFeeSetEvent>;

export interface WithdrawBNBEventObject {
  to: string;
  amount: BigNumber;
}
export type WithdrawBNBEvent = TypedEvent<
  [string, BigNumber],
  WithdrawBNBEventObject
>;

export type WithdrawBNBEventFilter = TypedEventFilter<WithdrawBNBEvent>;

export interface FeeJar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeJarInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FEE_JAR_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FEE_SETTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    buyBackAndBurnFee(overrides?: CallOverrides): Promise<[number]>;

    buyBackAndBurnFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    fee(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getFeeAmount(
      totalFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        buyBackAndBurnFeeAmount: BigNumber;
        supportFeeAmount: BigNumber;
        lpFeeAmount: BigNumber;
      }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _feeJarAdmin: PromiseOrValue<string>,
      _feeSetter: PromiseOrValue<string>,
      _buyBackAndBurnFeeCollector: PromiseOrValue<string>,
      _lpFeeCollector: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _maxPercentage: PromiseOrValue<BigNumberish>,
      _buyBackAndBurnFee: PromiseOrValue<BigNumberish>,
      _lpFee: PromiseOrValue<BigNumberish>,
      _supportFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lpFee(overrides?: CallOverrides): Promise<[number]>;

    lpFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    maxPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBuyBackAndBurnFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBuyBackAndBurnFeeCollector(
      newCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLPFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLPFeeCollector(
      newCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSupportFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportFee(overrides?: CallOverrides): Promise<[number]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawBNB(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  FEE_JAR_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  FEE_SETTER_ROLE(overrides?: CallOverrides): Promise<string>;

  buyBackAndBurnFee(overrides?: CallOverrides): Promise<number>;

  buyBackAndBurnFeeCollector(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  fee(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getFeeAmount(
    totalFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      buyBackAndBurnFeeAmount: BigNumber;
      supportFeeAmount: BigNumber;
      lpFeeAmount: BigNumber;
    }
  >;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _feeJarAdmin: PromiseOrValue<string>,
    _feeSetter: PromiseOrValue<string>,
    _buyBackAndBurnFeeCollector: PromiseOrValue<string>,
    _lpFeeCollector: PromiseOrValue<string>,
    _factory: PromiseOrValue<string>,
    _maxPercentage: PromiseOrValue<BigNumberish>,
    _buyBackAndBurnFee: PromiseOrValue<BigNumberish>,
    _lpFee: PromiseOrValue<BigNumberish>,
    _supportFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lpFee(overrides?: CallOverrides): Promise<number>;

  lpFeeCollector(overrides?: CallOverrides): Promise<string>;

  maxPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBuyBackAndBurnFee(
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBuyBackAndBurnFeeCollector(
    newCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLPFee(
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLPFeeCollector(
    newCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSupportFee(
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportFee(overrides?: CallOverrides): Promise<number>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawBNB(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FEE_JAR_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FEE_SETTER_ROLE(overrides?: CallOverrides): Promise<string>;

    buyBackAndBurnFee(overrides?: CallOverrides): Promise<number>;

    buyBackAndBurnFeeCollector(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber]>;

    getFeeAmount(
      totalFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        buyBackAndBurnFeeAmount: BigNumber;
        supportFeeAmount: BigNumber;
        lpFeeAmount: BigNumber;
      }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _feeJarAdmin: PromiseOrValue<string>,
      _feeSetter: PromiseOrValue<string>,
      _buyBackAndBurnFeeCollector: PromiseOrValue<string>,
      _lpFeeCollector: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _maxPercentage: PromiseOrValue<BigNumberish>,
      _buyBackAndBurnFee: PromiseOrValue<BigNumberish>,
      _lpFee: PromiseOrValue<BigNumberish>,
      _supportFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lpFee(overrides?: CallOverrides): Promise<number>;

    lpFeeCollector(overrides?: CallOverrides): Promise<string>;

    maxPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyBackAndBurnFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyBackAndBurnFeeCollector(
      newCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLPFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLPFeeCollector(
      newCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupportFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportFee(overrides?: CallOverrides): Promise<number>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawBNB(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyBackAndBurnFeeSet(uint32,uint32)"(
      newFee?: PromiseOrValue<BigNumberish> | null,
      oldFee?: PromiseOrValue<BigNumberish> | null
    ): BuyBackAndBurnFeeSetEventFilter;
    BuyBackAndBurnFeeSet(
      newFee?: PromiseOrValue<BigNumberish> | null,
      oldFee?: PromiseOrValue<BigNumberish> | null
    ): BuyBackAndBurnFeeSetEventFilter;

    "Fee(address,uint256,uint256,uint256,uint256,address,address,address)"(
      feePayer?: PromiseOrValue<string> | null,
      feeAmount?: null,
      buyBackAndBurnFeeAmount?: null,
      lpFeeAmount?: null,
      supportFeeAmount?: null,
      buyBackAndBurnFeeCollector?: null,
      supportFeeCollector?: null,
      lpFeeCollector?: null
    ): FeeEventFilter;
    Fee(
      feePayer?: PromiseOrValue<string> | null,
      feeAmount?: null,
      buyBackAndBurnFeeAmount?: null,
      lpFeeAmount?: null,
      supportFeeAmount?: null,
      buyBackAndBurnFeeCollector?: null,
      supportFeeCollector?: null,
      lpFeeCollector?: null
    ): FeeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LPFeeCollectorSet(address,address)"(
      newCollector?: null,
      oldLPFeeCollector?: null
    ): LPFeeCollectorSetEventFilter;
    LPFeeCollectorSet(
      newCollector?: null,
      oldLPFeeCollector?: null
    ): LPFeeCollectorSetEventFilter;

    "LPFeeSet(uint32,uint32)"(
      newFee?: PromiseOrValue<BigNumberish> | null,
      oldFee?: PromiseOrValue<BigNumberish> | null
    ): LPFeeSetEventFilter;
    LPFeeSet(
      newFee?: PromiseOrValue<BigNumberish> | null,
      oldFee?: PromiseOrValue<BigNumberish> | null
    ): LPFeeSetEventFilter;

    "NetworFeeCollectorSet(address,address)"(
      newCollector?: null,
      oldBuyBackAndBurnFeeCollector?: null
    ): NetworFeeCollectorSetEventFilter;
    NetworFeeCollectorSet(
      newCollector?: null,
      oldBuyBackAndBurnFeeCollector?: null
    ): NetworFeeCollectorSetEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SupportFeeSet(uint32,uint32)"(
      newFee?: PromiseOrValue<BigNumberish> | null,
      oldFee?: PromiseOrValue<BigNumberish> | null
    ): SupportFeeSetEventFilter;
    SupportFeeSet(
      newFee?: PromiseOrValue<BigNumberish> | null,
      oldFee?: PromiseOrValue<BigNumberish> | null
    ): SupportFeeSetEventFilter;

    "WithdrawBNB(address,uint256)"(
      to?: null,
      amount?: null
    ): WithdrawBNBEventFilter;
    WithdrawBNB(to?: null, amount?: null): WithdrawBNBEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_JAR_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_SETTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackAndBurnFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackAndBurnFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fee(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getFeeAmount(
      totalFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _feeJarAdmin: PromiseOrValue<string>,
      _feeSetter: PromiseOrValue<string>,
      _buyBackAndBurnFeeCollector: PromiseOrValue<string>,
      _lpFeeCollector: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _maxPercentage: PromiseOrValue<BigNumberish>,
      _buyBackAndBurnFee: PromiseOrValue<BigNumberish>,
      _lpFee: PromiseOrValue<BigNumberish>,
      _supportFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lpFee(overrides?: CallOverrides): Promise<BigNumber>;

    lpFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    maxPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBuyBackAndBurnFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBuyBackAndBurnFeeCollector(
      newCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLPFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLPFeeCollector(
      newCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSupportFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportFee(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawBNB(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEE_JAR_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEE_SETTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBackAndBurnFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBackAndBurnFeeCollector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getFeeAmount(
      totalFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _feeJarAdmin: PromiseOrValue<string>,
      _feeSetter: PromiseOrValue<string>,
      _buyBackAndBurnFeeCollector: PromiseOrValue<string>,
      _lpFeeCollector: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _maxPercentage: PromiseOrValue<BigNumberish>,
      _buyBackAndBurnFee: PromiseOrValue<BigNumberish>,
      _lpFee: PromiseOrValue<BigNumberish>,
      _supportFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lpFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpFeeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBuyBackAndBurnFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBuyBackAndBurnFeeCollector(
      newCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLPFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLPFeeCollector(
      newCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSupportFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawBNB(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
