/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  DiamondCutFacet,
  DiamondCutFacetInterface,
} from "../../../../contracts/router_v2/facets/DiamondCutFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
    ],
    name: "CannotAddFunctionToDiamondThatAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "_selectors",
        type: "bytes4[]",
      },
    ],
    name: "CannotAddSelectorsToZeroAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
    ],
    name: "CannotRemoveFunctionThatDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
    ],
    name: "CannotRemoveImmutableFunction",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
    ],
    name: "CannotReplaceFunctionThatDoesNotExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
    ],
    name: "CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "_selectors",
        type: "bytes4[]",
      },
    ],
    name: "CannotReplaceFunctionsFromFacetWithZeroAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
    ],
    name: "CannotReplaceImmutableFunction",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_action",
        type: "uint8",
      },
    ],
    name: "IncorrectFacetCutAction",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_initializationContractAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "InitializationFunctionReverted",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contractAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "NoBytecodeAtAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facetAddress",
        type: "address",
      },
    ],
    name: "NoSelectorsProvidedForFacetForCut",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_contractOwner",
        type: "address",
      },
    ],
    name: "NotContractOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facetAddress",
        type: "address",
      },
    ],
    name: "RemoveFacetAddressMustBeZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        indexed: false,
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "DiamondCut",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "diamondCut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f73806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610981565b610045565b005b61004d61009e565b61009761005a8587610ac3565b8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506100fc92505050565b5050505050565b6100a66102a7565b600301546001600160a01b031633146100fa57336100c26102a7565b60030154604051600162bed83560e01b031981526001600160a01b039283166004820152911660248201526044015b60405180910390fd5b565b60005b835181101561025c57600084828151811061011c5761011c610c06565b6020026020010151604001519050600085838151811061013e5761013e610c06565b6020026020010151600001519050815160001415610171578060405163e767f91f60e01b81526004016100f19190610c1c565b600086848151811061018557610185610c06565b6020026020010151602001519050600060028111156101a6576101a6610c30565b8160028111156101b8576101b8610c30565b14156101cd576101c882846102cb565b610246565b60018160028111156101e1576101e1610c30565b14156101f1576101c88284610462565b600281600281111561020557610205610c30565b1415610215576101c882846105d6565b80600281111561022757610227610c30565b604051633ff4d20f60e11b815260ff90911660048201526024016100f1565b505050808061025490610c5c565b9150506100ff565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161029093929190610ccf565b60405180910390a16102a28282610833565b505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6001600160a01b0382166102f457806040516302b8da0760e21b81526004016100f19190610dcf565b60006102fe6102a7565b905060008160010180549050905061032e84604051806060016040528060248152602001610eca602491396108f9565b60005b835181101561009757600084828151811061034e5761034e610c06565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b031680156103a1578160405163ebbf5d0760e01b81526004016100f19190610e1d565b6040805180820182526001600160a01b03808a16825261ffff80881660208085019182526001600160e01b0319881660009081528b8252958620945185549251909316600160a01b026001600160b01b0319909216929093169190911717909155600180880180549182018155835291206008820401805460e085901c60046007909416939093026101000a92830263ffffffff90930219169190911790558361044a81610e32565b9450505050808061045a90610c5c565b915050610331565b600061046c6102a7565b90506001600160a01b038316610497578160405163cd98a96f60e01b81526004016100f19190610dcf565b6104b983604051806060016040528060288152602001610f16602891396108f9565b60005b82518110156105d05760008382815181106104d9576104d9610c06565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b03163081141561052e5781604051632901806d60e11b81526004016100f19190610e1d565b856001600160a01b0316816001600160a01b031614156105635781604051631ac6ce8d60e11b81526004016100f19190610e1d565b6001600160a01b03811661058c5781604051637479f93960e01b81526004016100f19190610e1d565b506001600160e01b031916600090815260208390526040902080546001600160a01b0319166001600160a01b038616179055806105c881610c5c565b9150506104bc565b50505050565b60006105e06102a7565b60018101549091506001600160a01b03841615610612578360405163d091bc8160e01b81526004016100f19190610c1c565b60005b835181101561009757600084828151811061063257610632610c06565b6020908102919091018101516001600160e01b0319811660009081528683526040908190208151808301909252546001600160a01b038116808352600160a01b90910461ffff1693820193909352909250906106a35781604051637a08a22d60e01b81526004016100f19190610e1d565b80516001600160a01b03163014156106d05781604051630df5fd6160e31b81526004016100f19190610e1d565b836106da81610e54565b94505083816020015161ffff16146107b857600085600101858154811061070357610703610c06565b90600052602060002090600891828204019190066004029054906101000a900460e01b90508086600101836020015161ffff168154811061074657610746610c06565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c92909202939093179055838201516001600160e01b03199390931681529087905260409020805461ffff60a01b1916600160a01b61ffff909316929092029190911790555b846001018054806107cb576107cb610e6b565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319909316815291859052506040902080546001600160b01b03191690558061082b81610c5c565b915050610615565b6001600160a01b038216610845575050565b61086782604051806060016040528060288152602001610eee602891396108f9565b600080836001600160a01b0316836040516108829190610e81565b600060405180830381855af49150503d80600081146108bd576040519150601f19603f3d011682016040523d82523d6000602084013e6108c2565b606091505b5091509150816105d0578051156108dc5780518082602001fd5b838360405163192105d760e01b81526004016100f1929190610e9d565b813b806102a257828260405163919834b960e01b81526004016100f1929190610e9d565b80356001600160a01b038116811461093457600080fd5b919050565b60008083601f84011261094b57600080fd5b5081356001600160401b0381111561096257600080fd5b60208301915083602082850101111561097a57600080fd5b9250929050565b60008060008060006060868803121561099957600080fd5b85356001600160401b03808211156109b057600080fd5b818801915088601f8301126109c457600080fd5b8135818111156109d357600080fd5b8960208260051b85010111156109e857600080fd5b602083019750809650506109fe6020890161091d565b94506040880135915080821115610a1457600080fd5b50610a2188828901610939565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715610a6a57610a6a610a32565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610a9857610a98610a32565b604052919050565b60006001600160401b03821115610ab957610ab9610a32565b5060051b60200190565b6000610ad6610ad184610aa0565b610a70565b83815260208082019190600586811b860136811115610af457600080fd5b865b81811015610bf95780356001600160401b0380821115610b165760008081fd5b818a01915060608236031215610b2c5760008081fd5b610b34610a48565b610b3d8361091d565b81528683013560038110610b515760008081fd5b8188015260408381013583811115610b695760008081fd5b939093019236601f850112610b8057600092508283fd5b83359250610b90610ad184610aa0565b83815292871b84018801928881019036851115610bad5760008081fd5b948901945b84861015610be25785356001600160e01b031981168114610bd35760008081fd5b82529489019490890190610bb2565b918301919091525088525050948301948301610af6565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0391909116815260200190565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610c7057610c70610c46565b5060010190565b60005b83811015610c92578181015183820152602001610c7a565b838111156105d05750506000910152565b60008151808452610cbb816020860160208601610c77565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b84811015610d9f57898403607f19018652815180516001600160a01b03168552838101518986019060038110610d3e57634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015610d8a5783516001600160e01b0319168252928601926001929092019190860190610d60565b50978501979550505090820190600101610cf8565b50506001600160a01b038a16908801528681036040880152610dc18189610ca3565b9a9950505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610e115783516001600160e01b03191683529284019291840191600101610deb565b50909695505050505050565b6001600160e01b031991909116815260200190565b600061ffff80831681811415610e4a57610e4a610c46565b6001019392505050565b600081610e6357610e63610c46565b506000190190565b634e487b7160e01b600052603160045260246000fd5b60008251610e93818460208701610c77565b9190910192915050565b6001600160a01b0383168152604060208201819052600090610ec190830184610ca3565b94935050505056fe4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20636f64654c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f6465a26469706673582212204c743952d2197e2460170b7d30aad9e983fdb5b1e15659adcf59105676b9498564736f6c634300080b0033";

type DiamondCutFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondCutFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondCutFacet__factory extends ContractFactory {
  constructor(...args: DiamondCutFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DiamondCutFacet> {
    return super.deploy(overrides || {}) as Promise<DiamondCutFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DiamondCutFacet {
    return super.attach(address) as DiamondCutFacet;
  }
  override connect(signer: Signer): DiamondCutFacet__factory {
    return super.connect(signer) as DiamondCutFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondCutFacetInterface {
    return new utils.Interface(_abi) as DiamondCutFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondCutFacet {
    return new Contract(address, _abi, signerOrProvider) as DiamondCutFacet;
  }
}
