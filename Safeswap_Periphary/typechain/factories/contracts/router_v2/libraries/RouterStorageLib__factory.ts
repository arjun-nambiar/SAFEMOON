/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  RouterStorageLib,
  RouterStorageLibInterface,
} from "../../../../contracts/router_v2/libraries/RouterStorageLib";

const _abi = [
  {
    inputs: [],
    name: "ONE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608e610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063c2ee3a08146038575b600080fd5b6046670de0b6b3a764000081565b60405190815260200160405180910390f3fea2646970667358221220cd66e8fd09d3850d9b2985572fb93c383016926cbb366559638fcf6d1fd0682264736f6c634300080b0033";

type RouterStorageLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RouterStorageLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RouterStorageLib__factory extends ContractFactory {
  constructor(...args: RouterStorageLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RouterStorageLib> {
    return super.deploy(overrides || {}) as Promise<RouterStorageLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RouterStorageLib {
    return super.attach(address) as RouterStorageLib;
  }
  override connect(signer: Signer): RouterStorageLib__factory {
    return super.connect(signer) as RouterStorageLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RouterStorageLibInterface {
    return new utils.Interface(_abi) as RouterStorageLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RouterStorageLib {
    return new Contract(address, _abi, signerOrProvider) as RouterStorageLib;
  }
}
