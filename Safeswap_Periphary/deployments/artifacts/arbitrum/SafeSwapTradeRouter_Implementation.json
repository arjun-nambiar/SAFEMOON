{
  "address": "0xfcb48986b360B8e79e67ce25e4808408004f954B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_feeJar",
          "type": "address"
        }
      ],
      "name": "NewFeeJar",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "SetTokenDeletionStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isEnabled",
          "type": "bool"
        }
      ],
      "name": "SetTokenFeeStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isEnabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "SetTokenSwapFeeStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenFeePercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SafeSwapTradeRouter.SwapKind",
          "name": "_swapKind",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_assetOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapFeePercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "SubmitTokenSwapFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_assetIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_assetOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "TokenFeeSwapped",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wl",
          "type": "address"
        }
      ],
      "name": "addFfsWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeJar",
      "outputs": [
        {
          "internalType": "contract IFeeJar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPortalSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getSwapFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenFeeAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        }
      ],
      "name": "getTokenInfoDetails",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum SafeSwapTradeRouter.TransactionType",
                  "name": "transactionType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "feePercentage",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isEnabled",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isDeleted",
                  "type": "bool"
                }
              ],
              "internalType": "struct SafeSwapTradeRouter.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum SafeSwapTradeRouter.SwapKind",
                  "name": "swapKind",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetOut",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "percentage",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isEnabled",
                  "type": "bool"
                }
              ],
              "internalType": "struct SafeSwapTradeRouter.SingleSwapFee[]",
              "name": "singleSwapFees",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.TokenFee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_totalFee",
          "type": "bool"
        }
      ],
      "name": "getTokenSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getTotalSwapFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "portalFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeJar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wl",
          "type": "address"
        }
      ],
      "name": "removeFfsWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "sePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeJar",
          "type": "address"
        }
      ],
      "name": "setFeeJar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "enum SafeSwapTradeRouter.SwapKind",
              "name": "swapKind",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "assetOut",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "percentage",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.SingleSwapFee",
          "name": "_singleSwapFee",
          "type": "tuple"
        }
      ],
      "name": "submitTokenSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokensWithFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokensWithFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapExactTokensForETHAndFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapExactTokensForTokensWithFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForExactETHAndFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForExactTokensWithFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "switchSingleSwapActivation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        }
      ],
      "name": "switchTokenActivation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        }
      ],
      "name": "switchTokenDeletion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "enum SafeSwapTradeRouter.SwapKind",
              "name": "swapKind",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "assetOut",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "percentage",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.SingleSwapFee",
          "name": "_singleSwapFee",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "updateTokenSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistFfsFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc32b415c4e90bcce3352a17fb0f989e5c52261e582fba34c06fcd6dbcdd60ba2",
  "receipt": {
    "to": null,
    "from": "0x8868F1b2aafc2afBF24076Aa6829024A1385A047",
    "contractAddress": "0xfcb48986b360B8e79e67ce25e4808408004f954B",
    "transactionIndex": 1,
    "gasUsed": "4199186",
    "logsBloom": "0x
    "blockHash": "0xcf98ebab1cc23af3fe7ad1228a433273f54d39d0885ff65cec697e81493fd6f8",
    "transactionHash": "0xc32b415c4e90bcce3352a17fb0f989e5c52261e582fba34c06fcd6dbcdd60ba2",
    "logs": [],
    "blockNumber": 36004432,
    "cumulativeGasUsed": "4199186",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "deef495e32f316ca34a323daf33b391f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeJar\",\"type\":\"address\"}],\"name\":\"NewFeeJar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"SetTokenDeletionStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"}],\"name\":\"SetTokenFeeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"SetTokenSwapFeeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SafeSwapTradeRouter.SwapKind\",\"name\":\"_swapKind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_assetOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"SubmitTokenSwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_assetIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_assetOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"TokenFeeSwapped\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wl\",\"type\":\"address\"}],\"name\":\"addFfsWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeJar\",\"outputs\":[{\"internalType\":\"contract IFeeJar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPortalSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getSwapFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenFeeAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"}],\"name\":\"getTokenInfoDetails\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"transactionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDeleted\",\"type\":\"bool\"}],\"internalType\":\"struct SafeSwapTradeRouter.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum SafeSwapTradeRouter.SwapKind\",\"name\":\"swapKind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct SafeSwapTradeRouter.SingleSwapFee[]\",\"name\":\"singleSwapFees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SafeSwapTradeRouter.TokenFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_totalFee\",\"type\":\"bool\"}],\"name\":\"getTokenSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getTotalSwapFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"portalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeJar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wl\",\"type\":\"address\"}],\"name\":\"removeFfsWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"sePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeJar\",\"type\":\"address\"}],\"name\":\"setFeeJar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"enum SafeSwapTradeRouter.SwapKind\",\"name\":\"swapKind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct SafeSwapTradeRouter.SingleSwapFee\",\"name\":\"_singleSwapFee\",\"type\":\"tuple\"}],\"name\":\"submitTokenSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokensWithFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensWithFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForETHAndFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForTokensWithFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForExactETHAndFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForExactTokensWithFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"switchSingleSwapActivation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"}],\"name\":\"switchTokenActivation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"}],\"name\":\"switchTokenDeletion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"enum SafeSwapTradeRouter.SwapKind\",\"name\":\"swapKind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct SafeSwapTradeRouter.SingleSwapFee\",\"name\":\"_singleSwapFee\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"updateTokenSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistFfsFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Allows SFM Router-compliant trades to be paid via bsc\",\"kind\":\"dev\",\"methods\":{\"getPortalSwapFee(uint256,uint256,address,address)\":{\"params\":{\"_amountOut\":\"Amount out to calculate fee\",\"amountIn\":\"Amount in to calculate fee\",\"tokenA\":\"token1 for swap\",\"tokenB\":\"token2 for swap\"},\"returns\":{\"_fee\":\"the tokens fee amount value\"}},\"getSwapFees(uint256,address[])\":{\"params\":{\"amountIn\":\"Amount in to calculate fee\",\"path\":\"tokens addresses\"},\"returns\":{\"_feeAmount\":\"total fees amount\"}},\"getTokenFeeAddresses()\":{\"returns\":{\"_0\":\"the tokens fee information list\"}},\"getTokenInfoDetails(address,uint8)\":{\"returns\":{\"_0\":\"the token fee information\"}},\"getTokenSwapFee(uint256,uint8,address,bool)\":{\"params\":{\"_amount\":\"Amount to calculate fee\",\"_token\":\"token addresses\"},\"returns\":{\"_fee\":\"token swap fees amount\"}},\"getTotalSwapFees(uint256,address[])\":{\"params\":{\"amountIn\":\"Amount in to calculate fee\",\"path\":\"tokens addresses\"},\"returns\":{\"feeAmount\":\"total fees amount, portal fee amount\"}},\"setFeeJar(address)\":{\"params\":{\"_feeJar\":\"Address of FeeJar contract\"}},\"setRouter(address)\":{\"params\":{\"_router\":\"Address of SFM Router contract\"}},\"swapETHForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)\":{\"params\":{\"_feeAmount\":\"Fee value\",\"trade\":\"Trade details\"}},\"swapExactETHForTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)\":{\"params\":{\"_feeAmount\":\"Fee value\",\"trade\":\"Trade details\"}},\"swapExactTokensForETHAndFeeAmount((uint256,uint256,address[],address,uint256))\":{\"params\":{\"trade\":\"Trade details\"}},\"swapExactTokensForTokensWithFeeAmount((uint256,uint256,address[],address,uint256))\":{\"params\":{\"trade\":\"Trade details\"}},\"swapTokensForExactETHAndFeeAmount((uint256,uint256,address[],address,uint256))\":{\"params\":{\"trade\":\"Trade details\"}},\"swapTokensForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256))\":{\"params\":{\"trade\":\"Trade details\"}}},\"title\":\"SafeSwapTradeRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeJar()\":{\"notice\":\"FeepJar proxy\"},\"getPortalSwapFee(uint256,uint256,address,address)\":{\"notice\":\"Get swap fee based on the amounts\"},\"getSwapFees(uint256,address[])\":{\"notice\":\"Get swap fee based on the amounts\"},\"getTokenFeeAddresses()\":{\"notice\":\"Returns the tokens fee information list.\"},\"getTokenInfoDetails(address,uint8)\":{\"notice\":\"Returns the token swap fee information for a given identifier.\"},\"getTokenSwapFee(uint256,uint8,address,bool)\":{\"notice\":\"Get token swap fee for single token\"},\"getTotalSwapFees(uint256,address[])\":{\"notice\":\"Get swap fee based on the amounts\"},\"setFeeJar(address)\":{\"notice\":\"set feeJar address\"},\"setRouter(address)\":{\"notice\":\"set SFM router address\"},\"swapETHForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)\":{\"notice\":\"Swap BNB for tokens and pay amount of BNB input as fee\"},\"swapExactETHForTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)\":{\"notice\":\"Swap BNB for tokens and pay % of BNB input as fee\"},\"swapExactTokensForETHAndFeeAmount((uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for BNB and pay amount of BNB as fee\"},\"swapExactTokensForTokensWithFeeAmount((uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for tokens and pay BNB amount as fee\"},\"swapTokensForExactETHAndFeeAmount((uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for BNB and pay amount of BNB as fee\"},\"swapTokensForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for tokens and pay BNB amount as fee\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeSwapTradeRouter.sol\":\"SafeSwapTradeRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"contracts/SafeSwapTradeRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ISafeSwapRouter.sol\\\";\\nimport \\\"./interfaces/IFeeJar.sol\\\";\\nimport \\\"./interfaces/IERC20Extended.sol\\\";\\nimport \\\"./libraries/Initializable.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20Extended;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20Extended token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Extended token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20Extended-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Extended token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Extended token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Extended token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Extended token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\nlibrary TransferHelper {\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\\n/**\\n * @title SafeSwapTradeRouter\\n * @dev Allows SFM Router-compliant trades to be paid via bsc\\n */\\ncontract SafeSwapTradeRouter is Initializable {\\n    using SafeERC20 for IERC20Extended;\\n\\n    /// @notice Receive function to allow contract to accept BNB\\n    receive() external payable {}\\n\\n    /// @notice Fallback function in case receive function is not matched\\n    fallback() external payable {}\\n\\n    /// @notice FeepJar proxy\\n    IFeeJar public feeJar;\\n    address public swapRouter;\\n    address public admin;\\n    uint256 public percent;\\n    uint256 public feePercent;\\n    mapping(address => bool) public whitelistFfsFee;\\n\\n    mapping(address => mapping(TransactionType => TokenFee)) private tokensFeeList;\\n    address[] private tokenFeeAddresses;\\n\\n    event NewFeeJar(address _feeJar);\\n    event SetTokenFeeStatus(address _tokenAddress, TransactionType _transactionType, bool _isEnabled);\\n    event SetTokenDeletionStatus(address _tokenAddress, TransactionType _transactionType, bool _status);\\n    event TokenFeeSwapped(address _beneficiary, address _assetIn, address _assetOut, uint256 _feeAmount);\\n    event SetTokenSwapFeeStatus(\\n        address _tokenAddress,\\n        TransactionType _transactionType,\\n        bool _isEnabled,\\n        uint256 _index\\n    );\\n    event SubmitTokenSwapFee(\\n        address _tokenAddress,\\n        TransactionType _transactionType,\\n        uint256 _tokenFeePercentage,\\n        SwapKind _swapKind,\\n        address _assetOut,\\n        address _beneficiary,\\n        uint256 swapFeePercentage,\\n        bool isEnabled\\n    );\\n\\n    /// @notice Trade details\\n    struct Trade {\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        address[] path;\\n        address payable to;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice TMI details\\n    struct TokenFee {\\n        TokenInfo tokenInfo;\\n        // mapping(SwapKind => SingleSwapFee) singleSwapFees;\\n        SingleSwapFee[] singleSwapFees;\\n    }\\n\\n    struct TokenInfo {\\n        TransactionType transactionType;\\n        address tokenAddress;\\n        uint256 feePercentage;\\n        bool isEnabled;\\n        bool isDeleted;\\n    }\\n\\n    enum SwapKind {\\n        SEND_ONLY,\\n        SWAP_AND_SEND,\\n        SWAP_AND_BURN\\n    }\\n\\n    enum FeeKind {\\n        TOKEN_FEE,\\n        PORTAL_FEE\\n    }\\n\\n    enum TransactionType {\\n        SELL,\\n        BUY\\n    }\\n\\n    /// @notice FM details\\n    struct SingleSwapFee {\\n        SwapKind swapKind;\\n        address assetOut;\\n        address beneficiary;\\n        uint256 percentage;\\n        bool isEnabled;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(admin == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _feeJar,\\n        address _router,\\n        uint256 _feePercent,\\n        uint256 _percent\\n    ) external initializer {\\n        feeJar = IFeeJar(_feeJar);\\n        swapRouter = _router;\\n        admin = msg.sender;\\n        feePercent = _feePercent;\\n        percent = _percent;\\n    }\\n\\n    /**\\n     * @notice set SFM router address\\n     * @param _router Address of SFM Router contract\\n     */\\n    function setRouter(address _router) public onlyOwner {\\n        require(msg.sender == admin, \\\"SafeswapRouter: NOT AUTHORIZED\\\");\\n        swapRouter = _router;\\n    }\\n\\n    function setFeePercent(uint256 _feePercent) public onlyOwner {\\n        feePercent = _feePercent;\\n    }\\n\\n    function sePercent(uint256 _percent) public onlyOwner {\\n        percent = _percent;\\n    }\\n\\n    function addFfsWhitelist(address _wl) public onlyOwner {\\n        whitelistFfsFee[_wl] = true;\\n    }\\n\\n    function removeFfsWhitelist(address _wl) public onlyOwner {\\n        whitelistFfsFee[_wl] = false;\\n    }\\n\\n    /**\\n     * @notice set feeJar address\\n     * @param _feeJar Address of FeeJar contract\\n     */\\n    function setFeeJar(address _feeJar) external onlyOwner {\\n        feeJar = IFeeJar(_feeJar);\\n        emit NewFeeJar(_feeJar);\\n    }\\n\\n    function submitTokenSwapFee(\\n        address _tokenAddress,\\n        TransactionType _transactionType,\\n        SingleSwapFee calldata _singleSwapFee\\n    ) external onlyOwner {\\n        require(\\n            (tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage + _singleSwapFee.percentage) <=\\n                (percent - feePercent),\\n            \\\"SafeSwapTradeRouter: FeePercentage >100%\\\"\\n        );\\n\\n        if (tokensFeeList[_tokenAddress][_transactionType].tokenInfo.tokenAddress == address(0)) {\\n            if (\\n                !tokensFeeList[_tokenAddress][TransactionType.BUY].tokenInfo.isEnabled &&\\n                !tokensFeeList[_tokenAddress][TransactionType.SELL].tokenInfo.isEnabled\\n            ) {\\n                tokenFeeAddresses.push(_tokenAddress);\\n            }\\n            TokenFee storage _tokenFee = tokensFeeList[_tokenAddress][_transactionType];\\n            _tokenFee.singleSwapFees.push(\\n                SingleSwapFee(\\n                    _singleSwapFee.swapKind,\\n                    _singleSwapFee.assetOut,\\n                    _singleSwapFee.beneficiary,\\n                    _singleSwapFee.percentage,\\n                    _singleSwapFee.isEnabled\\n                )\\n            );\\n            _tokenFee.tokenInfo = TokenInfo(\\n                _transactionType,\\n                _tokenAddress,\\n                (tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage + _singleSwapFee.percentage),\\n                true,\\n                false\\n            );\\n        } else {\\n            tokensFeeList[_tokenAddress][_transactionType].singleSwapFees.push(\\n                SingleSwapFee(\\n                    _singleSwapFee.swapKind,\\n                    _singleSwapFee.assetOut,\\n                    _singleSwapFee.beneficiary,\\n                    _singleSwapFee.percentage,\\n                    _singleSwapFee.isEnabled\\n                )\\n            );\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage += _singleSwapFee.percentage;\\n        }\\n        emit SubmitTokenSwapFee(\\n            _tokenAddress,\\n            _transactionType,\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage,\\n            _singleSwapFee.swapKind,\\n            _singleSwapFee.assetOut,\\n            _singleSwapFee.beneficiary,\\n            _singleSwapFee.percentage,\\n            _singleSwapFee.isEnabled\\n        );\\n    }\\n\\n    function updateTokenSwapFee(\\n        address _tokenAddress,\\n        TransactionType _transactionType,\\n        SingleSwapFee calldata _singleSwapFee,\\n        uint256 _index\\n    ) external onlyOwner {\\n        require(\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.tokenAddress != address(0),\\n            \\\"SafeSwapTradeRouter: Token does not exist\\\"\\n        );\\n        require(\\n            tokensFeeList[_tokenAddress][_transactionType].singleSwapFees[_index].isEnabled,\\n            \\\"SafeSwapTradeRouter: Token's swap fee not active\\\"\\n        );\\n        require(\\n            _index <= tokensFeeList[_tokenAddress][_transactionType].singleSwapFees.length,\\n            \\\"SafeSwapTradeRouter: Invalid index\\\"\\n        );\\n        require(\\n            (tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage +\\n                _singleSwapFee.percentage -\\n                tokensFeeList[_tokenAddress][_transactionType].singleSwapFees[_index].percentage) <=\\n                (percent - feePercent),\\n            \\\"SafeSwapTradeRouter: FeePercentage >100%\\\"\\n        );\\n\\n        tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage -= tokensFeeList[_tokenAddress][\\n            _transactionType\\n        ].singleSwapFees[_index].percentage;\\n        tokensFeeList[_tokenAddress][_transactionType].singleSwapFees[_index] = SingleSwapFee(\\n            _singleSwapFee.swapKind,\\n            _singleSwapFee.assetOut,\\n            _singleSwapFee.beneficiary,\\n            _singleSwapFee.percentage,\\n            _singleSwapFee.isEnabled\\n        );\\n        tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage += _singleSwapFee.percentage;\\n\\n        emit SubmitTokenSwapFee(\\n            _tokenAddress,\\n            _transactionType,\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage,\\n            _singleSwapFee.swapKind,\\n            _singleSwapFee.assetOut,\\n            _singleSwapFee.beneficiary,\\n            _singleSwapFee.percentage,\\n            _singleSwapFee.isEnabled\\n        );\\n    }\\n\\n    function switchTokenDeletion(address _tokenAddress, TransactionType _transactionType) external onlyOwner {\\n        require(\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.tokenAddress != address(0),\\n            \\\"SafeSwapTradeRouter: Token does not exist\\\"\\n        );\\n\\n        tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isDeleted = !tokensFeeList[_tokenAddress][\\n            _transactionType\\n        ].tokenInfo.isDeleted;\\n        tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isEnabled = !tokensFeeList[_tokenAddress][\\n            _transactionType\\n        ].tokenInfo.isEnabled;\\n\\n        emit SetTokenDeletionStatus(\\n            _tokenAddress,\\n            _transactionType,\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isDeleted\\n        );\\n    }\\n\\n    function switchTokenActivation(address _tokenAddress, TransactionType _transactionType) external onlyOwner {\\n        require(\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isDeleted == false,\\n            \\\"SafeSwapTradeRouter: Token already deleted\\\"\\n        );\\n        tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isEnabled = !tokensFeeList[_tokenAddress][\\n            _transactionType\\n        ].tokenInfo.isEnabled;\\n\\n        emit SetTokenFeeStatus(\\n            _tokenAddress,\\n            _transactionType,\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isEnabled\\n        );\\n    }\\n\\n    function switchSingleSwapActivation(\\n        address _tokenAddress,\\n        TransactionType _transactionType,\\n        uint256 _index\\n    ) external onlyOwner {\\n        require(\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isDeleted == false,\\n            \\\"SafeSwapTradeRouter: Token already deleted\\\"\\n        );\\n        require(\\n            _index <= tokensFeeList[_tokenAddress][_transactionType].singleSwapFees.length,\\n            \\\"SafeSwapTradeRouter: Invalid index\\\"\\n        );\\n\\n        if (tokensFeeList[_tokenAddress][_transactionType].singleSwapFees[_index].isEnabled) {\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage -= tokensFeeList[_tokenAddress][\\n                _transactionType\\n            ].singleSwapFees[_index].percentage;\\n        } else {\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage += tokensFeeList[_tokenAddress][\\n                _transactionType\\n            ].singleSwapFees[_index].percentage;\\n        }\\n\\n        tokensFeeList[_tokenAddress][_transactionType].singleSwapFees[_index].isEnabled = !tokensFeeList[_tokenAddress][\\n            _transactionType\\n        ].singleSwapFees[_index].isEnabled;\\n\\n        emit SetTokenSwapFeeStatus(\\n            _tokenAddress,\\n            _transactionType,\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isEnabled,\\n            _index\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the tokens fee information list.\\n     * @return the tokens fee information list\\n     */\\n    function getTokenFeeAddresses() public view returns (address[] memory) {\\n        return tokenFeeAddresses;\\n    }\\n\\n    /**\\n     * @notice Returns the token swap fee information for a given identifier.\\n     * @return the token fee information\\n     */\\n    function getTokenInfoDetails(address _tokenAddress, TransactionType _transactionType)\\n        public\\n        view\\n        returns (TokenFee memory)\\n    {\\n        return tokensFeeList[_tokenAddress][_transactionType];\\n    }\\n\\n    /**\\n     * @notice Swap tokens for BNB and pay amount of BNB as fee\\n     * @param trade Trade details\\n     */\\n    function swapExactTokensForETHAndFeeAmount(Trade calldata trade) external payable {\\n        if (!whitelistFfsFee[msg.sender]) {\\n            (uint256 feeAmount, ) = getTotalSwapFees(trade.amountIn, trade.path);\\n            require(msg.value >= feeAmount, \\\"SafeswapRouter: You must send enough BNB to cover fee\\\");\\n            _claimTokenFees(trade.path, trade.amountIn);\\n            _feeAmountBNB(address(this).balance);\\n        }\\n        _swapExactTokensForETH(trade.amountIn, trade.amountOut, trade.path, msg.sender, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for BNB and pay amount of BNB as fee\\n     * @param trade Trade details\\n     */\\n    function swapTokensForExactETHAndFeeAmount(Trade calldata trade) external payable {\\n        if (!whitelistFfsFee[msg.sender]) {\\n            (uint256 feeAmount, ) = getTotalSwapFees(trade.amountIn, trade.path);\\n            require(msg.value >= feeAmount, \\\"SafeswapRouter: You must send enough BNB to cover fee\\\");\\n\\n            _claimTokenFees(trade.path, trade.amountIn);\\n            _feeAmountBNB(address(this).balance);\\n        }\\n\\n        _swapTokensForExactETH(trade.amountOut, trade.amountIn, trade.path, msg.sender, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for tokens and pay % of BNB input as fee\\n     * @param trade Trade details\\n     * @param _feeAmount Fee value\\n     */\\n    function swapExactETHForTokensWithFeeAmount(Trade calldata trade, uint256 _feeAmount) external payable {\\n        if (!whitelistFfsFee[msg.sender]) {\\n\\n            (uint256 feeAmount, ) = getTotalSwapFees(trade.amountIn, trade.path);\\n            require(\\n                _feeAmount >= feeAmount && (msg.value >= trade.amountIn + feeAmount),\\n                \\\"SafeswapRouter: You must send enough BNB to cover fee \\\"\\n            );\\n            _claimTokenFees(trade.path, trade.amountIn);\\n            _feeAmountBNB(address(this).balance - trade.amountIn);\\n        }\\n        _swapExactETHForTokens(trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for tokens and pay amount of BNB input as fee\\n     * @param trade Trade details\\n     * @param _feeAmount Fee value\\n     */\\n    function swapETHForExactTokensWithFeeAmount(Trade calldata trade, uint256 _feeAmount) external payable {\\n        if (!whitelistFfsFee[msg.sender]) {\\n            (uint256 feeAmount, ) = getTotalSwapFees(trade.amountIn, trade.path);\\n            require(\\n                _feeAmount >= feeAmount && (msg.value >= trade.amountIn + feeAmount),\\n                \\\"SafeswapRouter: You must send enough BNB to cover fee \\\"\\n            );\\n            _claimTokenFees(trade.path, trade.amountIn);\\n            _feeAmountBNB(address(this).balance - trade.amountIn);\\n        }\\n        _swapETHForExactTokens(trade.amountOut, trade.amountIn, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay BNB amount as fee\\n     * @param trade Trade details\\n     */\\n    function swapExactTokensForTokensWithFeeAmount(Trade calldata trade) external payable {\\n        if (!whitelistFfsFee[msg.sender]) {\\n            (uint256 feeAmount, ) = getTotalSwapFees(trade.amountIn, trade.path);\\n            require(msg.value >= feeAmount, \\\"SafeswapRouter: You must send enough BNB to cover fee \\\");\\n            _claimTokenFees(trade.path, trade.amountIn);\\n            _feeAmountBNB(address(this).balance);\\n        }\\n        _swapExactTokensForTokens(trade.amountIn, trade.amountOut, trade.path, msg.sender, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay BNB amount as fee\\n     * @param trade Trade details\\n     */\\n    function swapTokensForExactTokensWithFeeAmount(Trade calldata trade) external payable {\\n        if (!whitelistFfsFee[msg.sender]) {\\n            (uint256 feeAmount, ) = getTotalSwapFees(trade.amountIn, trade.path);\\n            require(msg.value >= feeAmount, \\\"SafeswapRouter: You must send enough BNB to cover fee \\\");\\n            _claimTokenFees(trade.path, trade.amountIn);\\n            _feeAmountBNB(address(this).balance);\\n        }\\n        _swapTokensForExactTokens(trade.amountOut, trade.amountIn, trade.path, msg.sender, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap BNB for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param to Address to receive tokens\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapExactETHForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapExactETHForTokensSupportingFeeOnTransferTokens{ value: amountIn }(\\n            amountOutMin,\\n            path,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap BNB for tokens\\n     * @param amountOut Amount of BNB out\\n     * @param amountInMax Max amount in\\n     * @param path Path for swap\\n     * @param to Address to receive BNB\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapETHForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapETHForExactTokens{ value: amountInMax }(amountOut, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for BNB\\n     * @param amountOut Amount of BNB out\\n     * @param amountInMax Max amount in\\n     * @param path Path for swap\\n     * @param from address to swap token from\\n     * @param to Address to receive BNB\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapTokensForExactETH(amountOut, amountInMax, path, from, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for BNB\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param from address to swap token from\\n     * @param to Address to receive tokens\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountIn,\\n            amountOutMin,\\n            path,\\n            from,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param from address to swap token from\\n     * @param to Address to receive tokens\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            amountIn,\\n            amountOutMin,\\n            path,\\n            from,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for tokens\\n     * @param amountOut Amount of tokens out\\n     * @param amountInMax Max amount in\\n     * @param path Path for swap\\n     * @param from address to swap token from\\n     * @param to Address to receive tokens\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapTokensForExactTokens(amountOut, amountInMax, path, from, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Get swap fee based on the amounts\\n     * @param amountIn Amount in to calculate fee\\n     * @param _amountOut Amount out to calculate fee\\n     * @param tokenA token1 for swap\\n     * @param tokenB token2 for swap\\n     * @return _fee the tokens fee amount value\\n     */\\n    function getPortalSwapFee(\\n        uint256 amountIn,\\n        uint256 _amountOut,\\n        address tokenA,\\n        address tokenB\\n    ) public view returns (uint256 _fee) {\\n        uint256 decimals = 18 - IERC20Extended(tokenA).decimals();\\n\\n        if (tokenA == ISafeSwapRouter(swapRouter).WETH()) {\\n            return _fee = ((amountIn * feePercent) / percent) * 10**decimals;\\n        }\\n\\n        address[] memory _FFSpath = new address[](2);\\n        _FFSpath[0] = tokenA;\\n        _FFSpath[1] = ISafeSwapRouter(swapRouter).WETH();\\n\\n        uint256 amountOut;\\n        try ISafeSwapRouter(swapRouter).getAmountsOut(amountIn, _FFSpath) returns (uint256[] memory amounts) {\\n            amountOut = amounts[amounts.length - 1];\\n        } catch {\\n            _FFSpath[0] = tokenB;\\n            try ISafeSwapRouter(swapRouter).getAmountsOut(_amountOut, _FFSpath) returns (uint256[] memory amounts) {\\n                amountOut = amounts[amounts.length - 1];\\n            } catch {\\n                amountOut = 0;\\n            }\\n        }\\n\\n        if (amountOut > 0) {\\n            _fee = (amountOut * feePercent) / percent;\\n        } else {\\n            _fee = ((amountIn * feePercent) / percent) * 10**decimals;\\n        }\\n\\n        return _fee;\\n    }\\n\\n    /**\\n     * @notice Get swap fee based on the amounts\\n     * @param amountIn Amount in to calculate fee\\n     * @param path tokens addresses\\n     * @param _feekind fee swap kind\\n     * @return _fees total fees amount\\n     */\\n    function fetchSwapFees(\\n        uint256 amountIn,\\n        address[] memory path,\\n        FeeKind _feekind\\n    ) internal view returns (uint256 _fees) {\\n        if (whitelistFfsFee[msg.sender]) {\\n            return 0;\\n        }\\n        require(path.length >= 2, \\\"SafeswapFee: INVALID_PATH\\\");\\n        uint256[] memory amounts = ISafeSwapRouter(swapRouter).getAmountsOut(amountIn, path);\\n        for (uint256 i; i < path.length - 1; i++) {\\n            if (_feekind == FeeKind.TOKEN_FEE) {\\n                _fees =\\n                    _fees +\\n                    getTokenSwapFee(amounts[i], TransactionType.SELL, path[i], true) +\\n                    getTokenSwapFee(amounts[i + 1], TransactionType.BUY, path[i + 1], true);\\n            } else {\\n                _fees = _fees + getPortalSwapFee(amounts[i], amounts[i + 1], path[i], path[i + 1]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get swap fee based on the amounts\\n     * @param amountIn Amount in to calculate fee\\n     * @param path tokens addresses\\n     * @return feeAmount total fees amount, portal fee amount\\n     */\\n    function getTotalSwapFees(uint256 amountIn, address[] memory path)\\n        public\\n        view\\n        returns (uint256 feeAmount, uint256 portalFee)\\n    {\\n        if (whitelistFfsFee[msg.sender]) {\\n            return (0, 0);\\n        }\\n        require(path.length >= 2, \\\"SafeswapFee: INVALID_PATH\\\");\\n        portalFee = fetchSwapFees(amountIn, path, FeeKind.PORTAL_FEE);\\n        feeAmount = portalFee + fetchSwapFees(amountIn, path, FeeKind.TOKEN_FEE);\\n    }\\n\\n    /**\\n     * @notice Get swap fee based on the amounts\\n     * @param amountIn Amount in to calculate fee\\n     * @param path tokens addresses\\n     * @return _feeAmount total fees amount\\n     */\\n    function getSwapFees(uint256 amountIn, address[] memory path) external view returns (uint256 _feeAmount) {\\n        (_feeAmount, ) = getTotalSwapFees(amountIn, path);\\n    }\\n\\n    /**\\n     * @notice Get token swap fee for single token\\n     * @param _amount Amount to calculate fee\\n     * @param _token token addresses\\n     * @return _fee token swap fees amount\\n     */\\n    function getTokenSwapFee(\\n        uint256 _amount,\\n        TransactionType _transactionType,\\n        address _token,\\n        bool _totalFee\\n    ) public view returns (uint256 _fee) {\\n        if (\\n            _token != ISafeSwapRouter(swapRouter).WETH() &&\\n            tokensFeeList[_token][_transactionType].tokenInfo.isEnabled &&\\n            tokensFeeList[_token][_transactionType].tokenInfo.feePercentage > 0 &&\\n            !whitelistFfsFee[msg.sender]\\n        ) {\\n            address[] memory tokenSwapPath = new address[](2);\\n            tokenSwapPath[0] = _token;\\n            tokenSwapPath[1] = ISafeSwapRouter(swapRouter).WETH();\\n            try ISafeSwapRouter(swapRouter).getAmountsOut(_amount, tokenSwapPath) returns (uint256[] memory amounts) {\\n                if (_totalFee) {\\n                    _fee =\\n                        (amounts[amounts.length - 1] *\\n                            tokensFeeList[_token][_transactionType].tokenInfo.feePercentage) /\\n                        percent;\\n                } else {\\n                    _fee = amounts[amounts.length - 1];\\n                }\\n            } catch {\\n                _fee = 0;\\n            }\\n        }\\n\\n        return _fee;\\n    }\\n\\n    function _claimTokenFee(\\n        address _assetIn,\\n        TransactionType _transactionType,\\n        uint256 _feeAmount\\n    ) private {\\n        if (tokensFeeList[_assetIn][_transactionType].tokenInfo.isEnabled) {\\n            for (uint256 i; i < tokensFeeList[_assetIn][_transactionType].singleSwapFees.length; i++) {\\n                if (\\n                    tokensFeeList[_assetIn][_transactionType].singleSwapFees[i].isEnabled &&\\n                    tokensFeeList[_assetIn][_transactionType].singleSwapFees[i].percentage > 0\\n                ) {\\n                    uint256 swapKindPercentage = tokensFeeList[_assetIn][_transactionType].singleSwapFees[i].percentage;\\n                    uint256 feeAmount = ((_feeAmount * swapKindPercentage) / percent);\\n                    SwapKind swapKind = tokensFeeList[_assetIn][_transactionType].singleSwapFees[i].swapKind;\\n\\n                    if (swapKind == SwapKind.SEND_ONLY) {\\n                        TransferHelper.safeTransferETH(\\n                            tokensFeeList[_assetIn][_transactionType].singleSwapFees[i].beneficiary,\\n                            feeAmount\\n                        );\\n                    } else {\\n                        if (swapKind == SwapKind.SWAP_AND_BURN) {\\n                            tokensFeeList[_assetIn][_transactionType]\\n                                .singleSwapFees[i]\\n                                .beneficiary = 0x000000000000000000000000000000000000dEaD;\\n                        }\\n\\n                        address[] memory path = new address[](2);\\n                        path[0] = ISafeSwapRouter(swapRouter).WETH();\\n                        path[1] = tokensFeeList[_assetIn][_transactionType].singleSwapFees[i].assetOut;\\n\\n                        _swapExactETHForTokens(\\n                            feeAmount,\\n                            0,\\n                            path,\\n                            tokensFeeList[_assetIn][_transactionType].singleSwapFees[i].beneficiary,\\n                            block.timestamp + 20\\n                        );\\n\\n                        emit TokenFeeSwapped(\\n                            tokensFeeList[_assetIn][_transactionType].singleSwapFees[i].beneficiary,\\n                            _assetIn,\\n                            tokensFeeList[_assetIn][_transactionType].singleSwapFees[i].assetOut,\\n                            feeAmount\\n                        );\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _claimTokenFees(address[] memory _path, uint256 _amountIn) private {\\n        uint256[] memory amounts = ISafeSwapRouter(swapRouter).getAmountsOut(_amountIn, _path);\\n\\n        for (uint256 i; i < _path.length - 1; i++) {\\n            uint256 tokenAfeeAmount = getTokenSwapFee(amounts[i], TransactionType.SELL, _path[i], false);\\n            _claimTokenFee(_path[i], TransactionType.SELL, tokenAfeeAmount);\\n\\n            uint256 tokenBfeeAmount = getTokenSwapFee(amounts[i + 1], TransactionType.BUY, _path[i + 1], false);\\n            _claimTokenFee(_path[i + 1], TransactionType.BUY, tokenBfeeAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Fee % of BNB contract balance\\n     * @param feePct % to get fee\\n     */\\n    function _feePctBNB(uint32 feePct) internal {\\n        uint256 contractBalance = address(this).balance;\\n        uint256 feeAmount = (contractBalance * feePct) / 1000000;\\n        feeJar.fee{ value: feeAmount }();\\n    }\\n\\n    /**\\n     * @notice Fee specific amount of BNB\\n     * @param feeAmount Amount to fee\\n     */\\n    function _feeAmountBNB(uint256 feeAmount) internal {\\n        feeJar.fee{ value: feeAmount }();\\n    }\\n\\n    /**\\n     * @notice Convert a token balance into BNB and then fee\\n     * @param amountIn Amount to swap\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _feeWithTokens(\\n        uint256 amountIn,\\n        address from,\\n        address[] memory path,\\n        uint256 deadline,\\n        uint256 minEth\\n    ) internal {\\n        IERC20Extended(path[0]).safeIncreaseAllowance(address(swapRouter), amountIn);\\n        ISafeSwapRouter(swapRouter).swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountIn,\\n            minEth,\\n            path,\\n            from,\\n            address(this),\\n            deadline\\n        );\\n        feeJar.fee{ value: address(this).balance }();\\n    }\\n}\\n\",\"keccak256\":\"0x75a67d9152dfab830597f99c68f7224e385179da6cdd4ac98a9144f8110af352\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC20Extended {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function version() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function receiveWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        returns (bool);\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function nonces(address) external view returns (uint256);\\n\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n\\n    function VERSION_HASH() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n\\n    function TRANSFER_WITH_AUTHORIZATION_TYPEHASH()\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function RECEIVE_WITH_AUTHORIZATION_TYPEHASH()\\n        external\\n        view\\n        returns (bytes32);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n}\\n\",\"keccak256\":\"0x45fe6d67343a1fb42b650dc78a66553ba28616b4424db70311a340548b7c79e1\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeJar.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IFeeJar {\\n    function fee() external payable;\\n}\\n\",\"keccak256\":\"0x976e76c8dcb84f2651736b1f0a9fb5349dbeb15e98dc1c7599250254094ce48b\",\"license\":\"MIT\"},\"contracts/interfaces/ISafeSwapRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\nimport \\\"./ISafeswapRouter01.sol\\\";\\n\\ninterface ISafeSwapRouter is ISafeswapRouter01 {\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x63ecfa60091944e8395808ee156cea973829410d05026a590bc339241c86c0b6\",\"license\":\"MIT\"},\"contracts/interfaces/ISafeswapRouter01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface ISafeswapRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external view returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external view returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xb366e1a3bdf247df2fa758e261f40b892ffa76873a22f279047eedf79dea3d9a\"},\"contracts/libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.11;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            _initializing || _isConstructor() || !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc2a0f06b1a46db8d1476fb6c1c3bfe31935e17fe4f525869a6b54bb821788e80\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614aff806100206000396000f3fe60806040526004361061015d5760003560e01c806287403014610166578063017b34bc146101915780630ea9c040146101bf57806312f788a4146101d257806318e75a5b146101f25780631db33ab91461021f5780632f8df2741461023f5780633744d9d41461025f5780633b7766da1461027f57806344a850ba1461029f5780634535e34c146102bf5780635ffde08f146102f257806370ba11131461030557806372d049811461031b5780637ce3489b1461032e5780637fd6f15c1461034e57806381bdf4f2146103645780638a879cab146103845780639166aecd146103975780639b8a9b68146103aa578063a3514087146103ca578063bca31f98146103dd578063c0d78655146103fd578063c31c9c071461041d578063d0bfbe971461043d578063d76d59fc1461045d578063eb990c591461049d578063f2e50a1e146104bd578063f851a440146104dd578063ff861304146104fd57005b3661016457005b005b34801561017257600080fd5b5061017b610532565b6040516101889190613e9f565b60405180910390f35b34801561019d57600080fd5b506101b16101ac366004613eeb565b610594565b604051908152602001610188565b6101646101cd366004613f52565b61090e565b3480156101de57600080fd5b506101646101ed366004613f86565b610a59565b3480156101fe57600080fd5b5061021261020d366004613fd5565b6110f0565b6040516101889190614044565b34801561022b57600080fd5b5061016461023a366004613fd5565b6112da565b34801561024b57600080fd5b506101b161025a366004614121565b6114c4565b34801561026b57600080fd5b5061016461027a36600461416b565b6118a6565b34801561028b57600080fd5b5061016461029a3660046141a9565b611d89565b3480156102ab57600080fd5b506101b16102ba366004614258565b6124aa565b3480156102cb57600080fd5b506000546102e5906201000090046001600160a01b031681565b6040516101889190614302565b610164610300366004613f52565b6124be565b34801561031157600080fd5b506101b160035481565b610164610329366004614316565b61258c565b34801561033a57600080fd5b5061016461034936600461435a565b6126b6565b34801561035a57600080fd5b506101b160045481565b34801561037057600080fd5b5061016461037f366004614373565b6126e5565b610164610392366004613f52565b61276c565b6101646103a5366004613f52565b61283a565b3480156103b657600080fd5b506101646103c536600461435a565b612908565b6101646103d8366004614316565b612937565b3480156103e957600080fd5b506101646103f8366004614373565b612a1e565b34801561040957600080fd5b50610164610418366004614373565b612a6c565b34801561042957600080fd5b506001546102e5906001600160a01b031681565b34801561044957600080fd5b50610164610458366004614373565b612b12565b34801561046957600080fd5b5061048d610478366004614373565b60056020526000908152604090205460ff1681565b6040519015158152602001610188565b3480156104a957600080fd5b506101646104b8366004614390565b612b5d565b3480156104c957600080fd5b506101646104d8366004613fd5565b612c72565b3480156104e957600080fd5b506002546102e5906001600160a01b031681565b34801561050957600080fd5b5061051d610518366004614258565b612f2c565b60408051928352602083019190915201610188565b6060600780548060200260200160405190810160405280929190818152602001828054801561058a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161056c575b5050505050905090565b600154604080516315ab88c960e31b815290516000926001600160a01b03169163ad5c46489160048083019260209291908290030181865afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060291906143d6565b6001600160a01b0316836001600160a01b03161415801561067257506001600160a01b0383166000908152600660205260408120908560018111156106495761064961400a565b600181111561065a5761065a61400a565b815260208101919091526040016000206002015460ff165b80156106cc57506001600160a01b0383166000908152600660205260408120818660018111156106a4576106a461400a565b60018111156106b5576106b561400a565b815260200190815260200160002060000160010154115b80156106e857503360009081526005602052604090205460ff16155b15610906576040805160028082526060820183526000926020830190803683370190505090508381600081518110610722576107226143f3565b6001600160a01b03928316602091820292909201810191909152600154604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561077b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079f91906143d6565b816001815181106107b2576107b26143f3565b6001600160a01b03928316602091820292909201015260015460405163d06ca61f60e01b815291169063d06ca61f906107f19089908590600401614409565b600060405180830381865afa92505050801561082f57506040513d6000823e601f3d908101601f1916820160405261082c9190810190614422565b60015b61083c5760009150610904565b83156108d8576003546001600160a01b0386166000908152600660205260408120908860018111156108705761087061400a565b60018111156108815761088161400a565b81526020019081526020016000206000016001015482600184516108a591906144c8565b815181106108b5576108b56143f3565b60200260200101516108c791906144df565b6108d191906144fe565b9250610902565b80600182516108e791906144c8565b815181106108f7576108f76143f3565b602002602001015192505b505b505b949350505050565b3360009081526005602052604090205460ff166109f157600061097082356109396040850185614520565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612f2c92505050565b5090508034101561099c5760405162461bcd60e51b815260040161099390614569565b60405180910390fd5b6109e66109ac6040840184614520565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505085359150612fa19050565b6109ef47613131565b505b610a5681356020830135610a086040850185614520565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250610a4c9150506080870160608801614373565b866080013561319d565b50565b6002546001600160a01b03163314610a835760405162461bcd60e51b8152600401610993906145ac565b6001600160a01b038416600090815260066020526040812081856001811115610aae57610aae61400a565b6001811115610abf57610abf61400a565b815260208101919091526040016000205461010090046001600160a01b03161415610afc5760405162461bcd60e51b8152600401610993906145e1565b6001600160a01b038416600090815260066020526040812090846001811115610b2757610b2761400a565b6001811115610b3857610b3861400a565b81526020019081526020016000206003018181548110610b5a57610b5a6143f3565b600091825260209091206003600490920201015460ff16610bd65760405162461bcd60e51b815260206004820152603060248201527f53616665537761705472616465526f757465723a20546f6b656e27732073776160448201526f7020666565206e6f742061637469766560801b6064820152608401610993565b6001600160a01b038416600090815260066020526040812090846001811115610c0157610c0161400a565b6001811115610c1257610c1261400a565b8152602081019190915260400160002060030154811115610c455760405162461bcd60e51b81526004016109939061462a565b600454600354610c5591906144c8565b6001600160a01b038516600090815260066020526040812090856001811115610c8057610c8061400a565b6001811115610c9157610c9161400a565b81526020019081526020016000206003018281548110610cb357610cb36143f3565b906000526020600020906004020160020154836060013560066000886001600160a01b03166001600160a01b031681526020019081526020016000206000876001811115610d0357610d0361400a565b6001811115610d1457610d1461400a565b815260200190815260200160002060000160010154610d33919061466c565b610d3d91906144c8565b1115610d5b5760405162461bcd60e51b815260040161099390614684565b6001600160a01b038416600090815260066020526040812090846001811115610d8657610d8661400a565b6001811115610d9757610d9761400a565b81526020019081526020016000206003018181548110610db957610db96143f3565b90600052602060002090600402016002015460066000866001600160a01b03166001600160a01b031681526020019081526020016000206000856001811115610e0457610e0461400a565b6001811115610e1557610e1561400a565b81526020019081526020016000206000016001016000828254610e3891906144c8565b90915550506040805160a0810190915280610e5660208501856146cc565b6002811115610e6757610e6761400a565b8152602001836020016020810190610e7f9190614373565b6001600160a01b03168152602001610e9d6060850160408601614373565b6001600160a01b0316815260608401356020820152604001610ec560a08501608086016146ed565b151590526001600160a01b038516600090815260066020526040812090856001811115610ef457610ef461400a565b6001811115610f0557610f0561400a565b81526020019081526020016000206003018281548110610f2757610f276143f3565b6000918252602090912082516004909202018054909190829060ff19166001836002811115610f5857610f5861400a565b02179055506020828101518254610100600160a81b0319166101006001600160a01b0392831602178355604080850151600180860180546001600160a01b0319169285169290921790915560608087015160028701556080909601516003909501805460ff1916951515959095179094559088166000908152600690925281209285013592918690811115610fef57610fef61400a565b60018111156110005761100061400a565b81526020019081526020016000206000016001016000828254611023919061466c565b90915550506001600160a01b0384166000908152600660205260408120600080516020614a8a83398151915291869186918260018111156110665761106661400a565b60018111156110775761107761400a565b81526020808201929092526040016000206001015490611099908701876146cc565b6110a96040880160208901614373565b6110b96060890160408a01614373565b60608901356110ce60a08b0160808c016146ed565b6040516110e2989796959493929190614708565b60405180910390a150505050565b6040805160e081018252600091810182815260608083018490526080830184905260a0830184905260c0830193909352815260208101919091526001600160a01b0383166000908152600660205260408120908360018111156111555761115561400a565b60018111156111665761116661400a565b815260208101919091526040908101600020815160e081018352815490928391908201908390829060ff1660018111156111a2576111a261400a565b60018111156111b3576111b361400a565b815281546001600160a01b036101009182900416602080840191909152600184015460408085019190915260029094015460ff80821615156060860152929004909116151560809092019190915291835260038401805482518185028101850190935280835293830193919290919060009084015b828210156112c9576000848152602090206040805160a08101909152600484029091018054829060ff1660028111156112635761126361400a565b60028111156112745761127461400a565b815281546001600160a01b03610100909104811660208084019190915260018085015490921660408401526002840154606084015260039093015460ff16151560809092019190915291835292019101611228565b505050508152505090505b92915050565b6002546001600160a01b031633146113045760405162461bcd60e51b8152600401610993906145ac565b6001600160a01b03821660009081526006602052604081209082600181111561132f5761132f61400a565b60018111156113405761134061400a565b8152602081019190915260400160002060020154610100900460ff16156113795760405162461bcd60e51b815260040161099390614767565b6001600160a01b0382166000908152600660205260408120908260018111156113a4576113a461400a565b60018111156113b5576113b561400a565b815260208082019290925260409081016000908120600201546001600160a01b0386168252600690935290812060ff9092161591908360018111156113fc576113fc61400a565b600181111561140d5761140d61400a565b815260208082019290925260409081016000908120600201805460ff1916941515949094179093556001600160a01b0385168352600690915281207f95437ba9f2848cd22a891a779e6179145fcce51375c56a427807e653c77b945f91849184918260018111156114805761148061400a565b60018111156114915761149161400a565b8152602081019190915260409081016000206002015490516114b893929160ff16906147b1565b60405180910390a15050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611505573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152991906147de565b611534906012614801565b60ff169050600160009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b091906143d6565b6001600160a01b0316846001600160a01b03161415611600576115d481600a614908565b6003546004546115e490896144df565b6115ee91906144fe565b6115f891906144df565b915050610906565b6040805160028082526060820183526000926020830190803683370190505090508481600081518110611635576116356143f3565b6001600160a01b03928316602091820292909201810191909152600154604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b291906143d6565b816001815181106116c5576116c56143f3565b6001600160a01b03928316602091820292909201015260015460405163d06ca61f60e01b8152600092919091169063d06ca61f90611709908b908690600401614409565b600060405180830381865afa92505050801561174757506040513d6000823e601f3d908101601f191682016040526117449190810190614422565b60015b61181757848260008151811061175f5761175f6143f3565b6001600160a01b03928316602091820292909201015260015460405163d06ca61f60e01b815291169063d06ca61f9061179e908a908690600401614409565b600060405180830381865afa9250505080156117dc57506040513d6000823e601f3d908101601f191682016040526117d99190810190614422565b60015b6117e857506000611842565b80600182516117f791906144c8565b81518110611807576118076143f3565b6020026020010151915050611842565b806001825161182691906144c8565b81518110611836576118366143f3565b60200260200101519150505b80156118695760035460045461185890836144df565b61186291906144fe565b935061189b565b61187483600a614908565b600354600454611884908b6144df565b61188e91906144fe565b61189891906144df565b93505b505050949350505050565b6002546001600160a01b031633146118d05760405162461bcd60e51b8152600401610993906145ac565b6001600160a01b0383166000908152600660205260408120908360018111156118fb576118fb61400a565b600181111561190c5761190c61400a565b8152602081019190915260400160002060020154610100900460ff16156119455760405162461bcd60e51b815260040161099390614767565b6001600160a01b0383166000908152600660205260408120908360018111156119705761197061400a565b60018111156119815761198161400a565b81526020810191909152604001600020600301548111156119b45760405162461bcd60e51b81526004016109939061462a565b6001600160a01b0383166000908152600660205260408120908360018111156119df576119df61400a565b60018111156119f0576119f061400a565b81526020019081526020016000206003018181548110611a1257611a126143f3565b600091825260209091206003600490920201015460ff1615611b16576001600160a01b038316600090815260066020526040812090836001811115611a5957611a5961400a565b6001811115611a6a57611a6a61400a565b81526020019081526020016000206003018181548110611a8c57611a8c6143f3565b90600052602060002090600402016002015460066000856001600160a01b03166001600160a01b031681526020019081526020016000206000846001811115611ad757611ad761400a565b6001811115611ae857611ae861400a565b81526020019081526020016000206000016001016000828254611b0b91906144c8565b90915550611bf99050565b6001600160a01b038316600090815260066020526040812090836001811115611b4157611b4161400a565b6001811115611b5257611b5261400a565b81526020019081526020016000206003018181548110611b7457611b746143f3565b90600052602060002090600402016002015460066000856001600160a01b03166001600160a01b031681526020019081526020016000206000846001811115611bbf57611bbf61400a565b6001811115611bd057611bd061400a565b81526020019081526020016000206000016001016000828254611bf3919061466c565b90915550505b6001600160a01b038316600090815260066020526040812090836001811115611c2457611c2461400a565b6001811115611c3557611c3561400a565b81526020019081526020016000206003018181548110611c5757611c576143f3565b60009182526020808320600360049093020191909101546001600160a01b038616835260069091526040822060ff9091161591846001811115611c9c57611c9c61400a565b6001811115611cad57611cad61400a565b81526020019081526020016000206003018281548110611ccf57611ccf6143f3565b60009182526020808320600492909202909101600301805460ff1916931515939093179092556001600160a01b03851681526006909152604081207f196ff3554753d125f87be48683fa3afa6021b058731ab355eea0dbfd5e99b0469185918591826001811115611d4257611d4261400a565b6001811115611d5357611d5361400a565b815260208101919091526040908101600020600201549051611d7c93929160ff16908690614914565b60405180910390a1505050565b6002546001600160a01b03163314611db35760405162461bcd60e51b8152600401610993906145ac565b600454600354611dc391906144c8565b6001600160a01b0384166000908152600660205260408120606084013591856001811115611df357611df361400a565b6001811115611e0457611e0461400a565b815260200190815260200160002060000160010154611e23919061466c565b1115611e415760405162461bcd60e51b815260040161099390614684565b6001600160a01b038316600090815260066020526040812081846001811115611e6c57611e6c61400a565b6001811115611e7d57611e7d61400a565b815260208101919091526040016000205461010090046001600160a01b03161415612205576001600160a01b03831660009081526006602090815260408083206001845290915290206002015460ff16158015611f0157506001600160a01b038316600090815260066020908152604080832083805290915290206002015460ff16155b15611f5257600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b0385161790555b6001600160a01b038316600090815260066020526040812081846001811115611f7d57611f7d61400a565b6001811115611f8e57611f8e61400a565b81526020019081526020016000209050806003016040518060a00160405280846000016020810190611fc091906146cc565b6002811115611fd157611fd161400a565b8152602001846020016020810190611fe99190614373565b6001600160a01b031681526020016120076060860160408701614373565b6001600160a01b031681526060850135602082015260400161202f60a08601608087016146ed565b15159052815460018181018455600093845260209093208251600490920201805492939092839160ff199091169083600281111561206f5761206f61400a565b021790555060208201518154610100600160a81b0319166101006001600160a01b0392831602178255604080840151600180850180546001600160a01b0319169290941691909117909255606084015160028401556080909301516003909201805460ff191692151592909217909155815160a08101909252819085908111156120fb576120fb61400a565b81526001600160a01b038616602080830182905260009182526006905260408082209201916060860135918760018111156121385761213861400a565b60018111156121495761214961400a565b815260200190815260200160002060000160010154612168919061466c565b81526001602082018190526000604090920191909152815183548492839160ff191690838181111561219c5761219c61400a565b021790555060208201518154610100600160a81b0319166101006001600160a01b0390921682021782556040830151600183015560608301516002909201805460809094015161ffff1990941692151561ff0019169290921792151502919091179055506123f0565b6001600160a01b0383166000908152600660205260408120908360018111156122305761223061400a565b60018111156122415761224161400a565b81526020019081526020016000206003016040518060a0016040528083600001602081019061227091906146cc565b60028111156122815761228161400a565b81526020018360200160208101906122999190614373565b6001600160a01b031681526020016122b76060850160408601614373565b6001600160a01b03168152606084013560208201526040016122df60a08501608086016146ed565b15159052815460018181018455600093845260209093208251600490920201805492939092839160ff199091169083600281111561231f5761231f61400a565b02179055506020828101518254610100600160a81b0319166101006001600160a01b0392831602178355604080850151600180860180546001600160a01b0319169285169290921790915560608087015160028701556080909601516003909501805460ff19169515159590951790945590871660009081526006909252812092840135929185908111156123b6576123b661400a565b60018111156123c7576123c761400a565b815260200190815260200160002060000160010160008282546123ea919061466c565b90915550505b6001600160a01b0383166000908152600660205260408120600080516020614a8a833981519152918591859182600181111561242e5761242e61400a565b600181111561243f5761243f61400a565b81526020808201929092526040016000206001015490612461908601866146cc565b6124716040870160208801614373565b6124816060880160408901614373565b606088013561249660a08a0160808b016146ed565b604051611d7c989796959493929190614708565b60006124b68383612f2c565b509392505050565b3360009081526005602052604090205460ff166125275760006124e982356109396040850185614520565b5090508034101561250c5760405162461bcd60e51b815260040161099390614943565b61251c6109ac6040840184614520565b61252547613131565b505b610a566020820135823561253e6040850185614520565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503392506125829150506080870160608801614373565b8660800135613211565b3360009081526005602052604090205460ff1661264f5760006125b783356109396040860186614520565b5090508082101580156125d457506125d081843561466c565b3410155b6125f05760405162461bcd60e51b815260040161099390614943565b61263a6126006040850185614520565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505086359150612fa19050565b61264d6126488435476144c8565b613131565b505b6126b2602083013583356126666040860186614520565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506126a8925050506080870160608801614373565b866080013561329b565b5050565b6002546001600160a01b031633146126e05760405162461bcd60e51b8152600401610993906145ac565b600455565b6002546001600160a01b0316331461270f5760405162461bcd60e51b8152600401610993906145ac565b6000805462010000600160b01b031916620100006001600160a01b038416021790556040517f9fbc3107cd5de0b63e7e8ee125c41156ece8511d0030e7d3e7b9174d6b9cf2c390612761908390614302565b60405180910390a150565b3360009081526005602052604090205460ff166127d557600061279782356109396040850185614520565b509050803410156127ba5760405162461bcd60e51b815260040161099390614569565b6127ca6109ac6040840184614520565b6127d347613131565b505b610a56602082013582356127ec6040850185614520565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503392506128309150506080870160608801614373565b866080013561331a565b3360009081526005602052604090205460ff166128a357600061286582356109396040850185614520565b509050803410156128885760405162461bcd60e51b815260040161099390614943565b6128986109ac6040840184614520565b6128a147613131565b505b610a56813560208301356128ba6040850185614520565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503392506128fe9150506080870160608801614373565b8660800135613354565b6002546001600160a01b031633146129325760405162461bcd60e51b8152600401610993906145ac565b600355565b3360009081526005602052604090205460ff166129bb57600061296283356109396040860186614520565b50905080821015801561297f575061297b81843561466c565b3410155b61299b5760405162461bcd60e51b815260040161099390614943565b6129ab6126006040850185614520565b6129b96126488435476144c8565b505b6126b2823560208401356129d26040860186614520565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612a14925050506080870160608801614373565b866080013561338e565b6002546001600160a01b03163314612a485760405162461bcd60e51b8152600401610993906145ac565b6001600160a01b03166000908152600560205260409020805460ff19166001179055565b6002546001600160a01b03163314612a965760405162461bcd60e51b8152600401610993906145ac565b6002546001600160a01b03163314612af05760405162461bcd60e51b815260206004820152601e60248201527f5361666573776170526f757465723a204e4f5420415554484f52495a454400006044820152606401610993565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314612b3c5760405162461bcd60e51b8152600401610993906145ac565b6001600160a01b03166000908152600560205260409020805460ff19169055565b600054610100900460ff1680612b725750303b155b80612b80575060005460ff16155b612be35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610993565b600054610100900460ff16158015612c05576000805461ffff19166101011790555b600080546001600160a01b03808816620100000262010000600160b01b031990921691909117909155600180549186166001600160a01b03199283161790556002805490911633179055600483905560038290558015612c6b576000805461ff00191690555b5050505050565b6002546001600160a01b03163314612c9c5760405162461bcd60e51b8152600401610993906145ac565b6001600160a01b038216600090815260066020526040812081836001811115612cc757612cc761400a565b6001811115612cd857612cd861400a565b815260208101919091526040016000205461010090046001600160a01b03161415612d155760405162461bcd60e51b8152600401610993906145e1565b6001600160a01b038216600090815260066020526040812090826001811115612d4057612d4061400a565b6001811115612d5157612d5161400a565b815260200190815260200160002060000160020160019054906101000a900460ff161560066000846001600160a01b03166001600160a01b031681526020019081526020016000206000836001811115612dad57612dad61400a565b6001811115612dbe57612dbe61400a565b81526020808201929092526040908101600090812060020180549415156101000261ff0019909516949094179093556001600160a01b03851683526006909152812090826001811115612e1357612e1361400a565b6001811115612e2457612e2461400a565b815260208082019290925260409081016000908120600201546001600160a01b0386168252600690935290812060ff909216159190836001811115612e6b57612e6b61400a565b6001811115612e7c57612e7c61400a565b815260208082019290925260409081016000908120600201805460ff1916941515949094179093556001600160a01b0385168352600690915281207f43116470e1e462f8da735d92f836a07475cde94449b1cd54c7145aedfcecfde79184918491826001811115612eef57612eef61400a565b6001811115612f0057612f0061400a565b8152602081019190915260409081016000206002015490516114b8939291610100900460ff16906147b1565b33600090815260056020526040812054819060ff1615612f5157506000905080612f9a565b600283511015612f735760405162461bcd60e51b815260040161099390614987565b612f7f848460016133df565b9050612f8d848460006133df565b612f97908261466c565b91505b9250929050565b60015460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f90612fd49085908790600401614409565b600060405180830381865afa158015612ff1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526130199190810190614422565b905060005b6001845161302c91906144c8565b81101561312b57600061307583838151811061304a5761304a6143f3565b60200260200101516000878581518110613066576130666143f3565b60200260200101516000610594565b905061309c85838151811061308c5761308c6143f3565b6020026020010151600083613620565b60006130e5846130ad85600161466c565b815181106130bd576130bd6143f3565b60200260200101516001888660016130d5919061466c565b81518110613066576130666143f3565b9050613116866130f685600161466c565b81518110613106576131066143f3565b6020026020010151600183613620565b50508080613123906149ba565b91505061301e565b50505050565b600060029054906101000a90046001600160a01b03166001600160a01b031663ddca3f43826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561318157600080fd5b505af1158015613195573d6000803e3d6000fd5b505050505050565b600154604051632955261160e11b81526001600160a01b03909116906352aa4c22906131d7908990899089908990899089906004016149d5565b600060405180830381600087803b1580156131f157600080fd5b505af1158015613205573d6000803e3d6000fd5b50505050505050505050565b60015460405163083722b560e01b81526001600160a01b039091169063083722b59061324b908990899089908990899089906004016149d5565b6000604051808303816000875af115801561326a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132929190810190614422565b50505050505050565b60015460405163fb3bdb4160e01b81526001600160a01b039091169063fb3bdb419086906132d3908990889088908890600401614a19565b60006040518083038185885af11580156132f1573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526131959190810190614422565b6001546040516304723bfd60e31b81526001600160a01b0390911690632391dfe89061324b908990899089908990899089906004016149d5565b60015460405163561c49dd60e11b81526001600160a01b039091169063ac3893ba906131d7908990899089908990899089906004016149d5565b60015460405163b6f9de9560e01b81526001600160a01b039091169063b6f9de959087906133c6908890889088908890600401614a19565b6000604051808303818588803b1580156131f157600080fd5b3360009081526005602052604081205460ff16156133ff57506000613619565b6002835110156134215760405162461bcd60e51b815260040161099390614987565b60015460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f906134549088908890600401614409565b600060405180830381865afa158015613471573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526134999190810190614422565b905060005b600185516134ac91906144c8565b8110156136165760008460018111156134c7576134c761400a565b141561356f57613523826134dc83600161466c565b815181106134ec576134ec6143f3565b6020026020010151600187846001613504919061466c565b81518110613514576135146143f3565b60200260200101516001610594565b613554838381518110613538576135386143f3565b60200260200101516000888581518110613514576135146143f3565b61355e908561466c565b613568919061466c565b9250613604565b6135f7828281518110613584576135846143f3565b60200260200101518383600161359a919061466c565b815181106135aa576135aa6143f3565b60200260200101518784815181106135c4576135c46143f3565b6020026020010151888560016135da919061466c565b815181106135ea576135ea6143f3565b60200260200101516114c4565b613601908461466c565b92505b8061360e816149ba565b91505061349e565b50505b9392505050565b6001600160a01b03831660009081526006602052604081209083600181111561364b5761364b61400a565b600181111561365c5761365c61400a565b815260208101919091526040016000206002015460ff1615613d7c5760005b6001600160a01b0384166000908152600660205260408120908460018111156136a6576136a661400a565b60018111156136b7576136b761400a565b815260208101919091526040016000206003015481101561312b576001600160a01b0384166000908152600660205260408120908460018111156136fd576136fd61400a565b600181111561370e5761370e61400a565b81526020019081526020016000206003018181548110613730576137306143f3565b600091825260209091206003600490920201015460ff1680156137c057506001600160a01b0384166000908152600660205260408120818560018111156137795761377961400a565b600181111561378a5761378a61400a565b815260200190815260200160002060030182815481106137ac576137ac6143f3565b906000526020600020906004020160020154115b15613d6a576001600160a01b0384166000908152600660205260408120818560018111156137f0576137f061400a565b60018111156138015761380161400a565b81526020019081526020016000206003018281548110613823576138236143f3565b90600052602060002090600402016002015490506000600354828561384891906144df565b61385291906144fe565b6001600160a01b038716600090815260066020526040812091925090818760018111156138815761388161400a565b60018111156138925761389261400a565b815260200190815260200160002060030184815481106138b4576138b46143f3565b6000918252602082206004909102015460ff1691508160028111156138db576138db61400a565b141561396a576001600160a01b03871660009081526006602052604081206139659188600181111561390f5761390f61400a565b60018111156139205761392061400a565b81526020019081526020016000206003018581548110613942576139426143f3565b60009182526020909120600160049092020101546001600160a01b031683613d81565b613d66565b600281600281111561397e5761397e61400a565b1415613a1b576001600160a01b038716600090815260066020526040812061dead918860018111156139b2576139b261400a565b60018111156139c3576139c361400a565b815260200190815260200160002060030185815481106139e5576139e56143f3565b906000526020600020906004020160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6040805160028082526060820183526000926020830190803683375050600154604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015613a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa991906143d6565b81600081518110613abc57613abc6143f3565b6001600160a01b03928316602091820292909201810191909152908916600090815260069091526040812090886001811115613afa57613afa61400a565b6001811115613b0b57613b0b61400a565b81526020019081526020016000206003018581548110613b2d57613b2d6143f3565b906000526020600020906004020160000160019054906101000a90046001600160a01b031681600181518110613b6557613b656143f3565b60200260200101906001600160a01b031690816001600160a01b031681525050613c2583600083600660008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001811115613bc557613bc561400a565b6001811115613bd657613bd661400a565b81526020019081526020016000206003018981548110613bf857613bf86143f3565b60009182526020909120600160049092020101546001600160a01b0316613c2042601461466c565b61338e565b6001600160a01b03881660009081526006602052604081207f2ee8b4373db2e5efd8f38a651db96135641602894fc6fef7cb54bc02b78cde3e91896001811115613c7157613c7161400a565b6001811115613c8257613c8261400a565b81526020019081526020016000206003018681548110613ca457613ca46143f3565b6000918252602080832060016004909302018201546001600160a01b038d811685526006909252604084209116928c928c90811115613ce557613ce561400a565b6001811115613cf657613cf661400a565b81526020019081526020016000206003018881548110613d1857613d186143f3565b60009182526020918290206004919091020154604080516001600160a01b039586168152938516928401929092526101009004909216818301526060810186905290519081900360800190a1505b5050505b80613d74816149ba565b91505061367b565b505050565b604080516000808252602082019092526001600160a01b038416908390604051613dab9190614a4e565b60006040518083038185875af1925050503d8060008114613de8576040519150601f19603f3d011682016040523d82523d6000602084013e613ded565b606091505b5050905080613d7c5760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b6064820152608401610993565b600081518084526020808501945080840160005b83811015613e945781516001600160a01b031687529582019590820190600101613e6f565b509495945050505050565b6020815260006136196020830184613e5b565b803560028110613ec157600080fd5b919050565b6001600160a01b0381168114610a5657600080fd5b80358015158114613ec157600080fd5b60008060008060808587031215613f0157600080fd5b84359350613f1160208601613eb2565b92506040850135613f2181613ec6565b9150613f2f60608601613edb565b905092959194509250565b600060a08284031215613f4c57600080fd5b50919050565b600060208284031215613f6457600080fd5b81356001600160401b03811115613f7a57600080fd5b61090684828501613f3a565b6000806000806101008587031215613f9d57600080fd5b8435613fa881613ec6565b9350613fb660208601613eb2565b9250613fc58660408701613f3a565b9396929550929360e00135925050565b60008060408385031215613fe857600080fd5b8235613ff381613ec6565b915061400160208401613eb2565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b600281106140305761403061400a565b9052565b600381106140305761403061400a565b6000602080835260e08301845161405e8386018251614020565b808301516001600160a01b03908116604087810191909152808301516060808901919091528084015115156080808a019190915293840151151560a0898101919091528987015160c0808b015280519687905287019560009591949291906101008b01905b808810156141115788516140d8838251614034565b808b01518616838c01528681015186168784015284810151858401528301511515838301529789019760019790970196908601906140c3565b509b9a5050505050505050505050565b6000806000806080858703121561413757600080fd5b8435935060208501359250604085013561415081613ec6565b9150606085013561416081613ec6565b939692955090935050565b60008060006060848603121561418057600080fd5b833561418b81613ec6565b925061419960208501613eb2565b9150604084013590509250925092565b600080600060e084860312156141be57600080fd5b83356141c981613ec6565b92506141d760208501613eb2565b91506141e68560408601613f3a565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561422d5761422d6141ef565b604052919050565b60006001600160401b0382111561424e5761424e6141ef565b5060051b60200190565b6000806040838503121561426b57600080fd5b823591506020808401356001600160401b0381111561428957600080fd5b8401601f8101861361429a57600080fd5b80356142ad6142a882614235565b614205565b81815260059190911b820183019083810190888311156142cc57600080fd5b928401925b828410156142f35783356142e481613ec6565b825292840192908401906142d1565b80955050505050509250929050565b6001600160a01b0391909116815260200190565b6000806040838503121561432957600080fd5b82356001600160401b0381111561433f57600080fd5b61434b85828601613f3a565b95602094909401359450505050565b60006020828403121561436c57600080fd5b5035919050565b60006020828403121561438557600080fd5b813561361981613ec6565b600080600080608085870312156143a657600080fd5b84356143b181613ec6565b935060208501356143c181613ec6565b93969395505050506040820135916060013590565b6000602082840312156143e857600080fd5b815161361981613ec6565b634e487b7160e01b600052603260045260246000fd5b8281526040602082015260006109066040830184613e5b565b6000602080838503121561443557600080fd5b82516001600160401b0381111561444b57600080fd5b8301601f8101851361445c57600080fd5b805161446a6142a882614235565b81815260059190911b8201830190838101908783111561448957600080fd5b928401925b828410156144a75783518252928401929084019061448e565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156144da576144da6144b2565b500390565b60008160001904831182151516156144f9576144f96144b2565b500290565b60008261451b57634e487b7160e01b600052601260045260246000fd5b500490565b6000808335601e1984360301811261453757600080fd5b8301803591506001600160401b0382111561455157600080fd5b6020019150600581901b3603821315612f9a57600080fd5b6020808252603590820152600080516020614aaa8339815191526040820152746f75676820424e4220746f20636f7665722066656560581b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f53616665537761705472616465526f757465723a20546f6b656e20646f6573206040820152681b9bdd08195e1a5cdd60ba1b606082015260800190565b60208082526022908201527f53616665537761705472616465526f757465723a20496e76616c696420696e646040820152610caf60f31b606082015260800190565b6000821982111561467f5761467f6144b2565b500190565b60208082526028908201527f53616665537761705472616465526f757465723a2046656550657263656e74616040820152676765203e3130302560c01b606082015260800190565b6000602082840312156146de57600080fd5b81356003811061361957600080fd5b6000602082840312156146ff57600080fd5b61361982613edb565b6001600160a01b038981168252610100820190614728602084018b614020565b88604084015261473b6060840189614034565b808716608084015280861660a0840152508360c083015282151560e08301529998505050505050505050565b6020808252602a908201527f53616665537761705472616465526f757465723a20546f6b656e20616c726561604082015269191e4819195b195d195960b21b606082015260800190565b6001600160a01b0384168152606081016147ce6020830185614020565b8215156040830152949350505050565b6000602082840312156147f057600080fd5b815160ff8116811461361957600080fd5b600060ff821660ff84168082101561481b5761481b6144b2565b90039392505050565b600181815b8085111561485f578160001904821115614845576148456144b2565b8085161561485257918102915b93841c9390800290614829565b509250929050565b600082614876575060016112d4565b81614883575060006112d4565b816001811461489957600281146148a3576148bf565b60019150506112d4565b60ff8411156148b4576148b46144b2565b50506001821b6112d4565b5060208310610133831016604e8410600b84101617156148e2575081810a6112d4565b6148ec8383614824565b8060001904821115614900576149006144b2565b029392505050565b60006136198383614867565b6001600160a01b0385168152608081016149316020830186614020565b92151560408201526060015292915050565b6020808252603690820152600080516020614aaa833981519152604082015275037bab3b410212721103a379031b7bb32b9103332b2960551b606082015260800190565b6020808252601990820152780a6c2cccae6eec2e08ccaca7440929cac82989288bea082a89603b1b604082015260600190565b60006000198214156149ce576149ce6144b2565b5060010190565b86815285602082015260c0604082015260006149f460c0830187613e5b565b6001600160a01b03958616606084015293909416608082015260a00152949350505050565b848152608060208201526000614a326080830186613e5b565b6001600160a01b03949094166040830152506060015292915050565b6000825160005b81811015614a6f5760208186018101518583015201614a55565b81811115614a7e576000828501525b50919091019291505056fe13a5198c06dda8adb82629a4b7833e14feece24a869103d32d93ba2ed24b6b935361666573776170526f757465723a20596f75206d7573742073656e6420656ea26469706673582212208d03a48c28ecd93b42d40d09f624792b4c5d12a44c98214f06817c059284f50a64736f6c634300080b0033",
  "deployedBytecode": "0x60806040526004361061015d5760003560e01c806287403014610166578063017b34bc146101915780630ea9c040146101bf57806312f788a4146101d257806318e75a5b146101f25780631db33ab91461021f5780632f8df2741461023f5780633744d9d41461025f5780633b7766da1461027f57806344a850ba1461029f5780634535e34c146102bf5780635ffde08f146102f257806370ba11131461030557806372d049811461031b5780637ce3489b1461032e5780637fd6f15c1461034e57806381bdf4f2146103645780638a879cab146103845780639166aecd146103975780639b8a9b68146103aa578063a3514087146103ca578063bca31f98146103dd578063c0d78655146103fd578063c31c9c071461041d578063d0bfbe971461043d578063d76d59fc1461045d578063eb990c591461049d578063f2e50a1e146104bd578063f851a440146104dd578063ff861304146104fd57005b3661016457005b005b34801561017257600080fd5b5061017b610532565b6040516101889190613e9f565b60405180910390f35b34801561019d57600080fd5b506101b16101ac366004613eeb565b610594565b604051908152602001610188565b6101646101cd366004613f52565b61090e565b3480156101de57600080fd5b506101646101ed366004613f86565b610a59565b3480156101fe57600080fd5b5061021261020d366004613fd5565b6110f0565b6040516101889190614044565b34801561022b57600080fd5b5061016461023a366004613fd5565b6112da565b34801561024b57600080fd5b506101b161025a366004614121565b6114c4565b34801561026b57600080fd5b5061016461027a36600461416b565b6118a6565b34801561028b57600080fd5b5061016461029a3660046141a9565b611d89565b3480156102ab57600080fd5b506101b16102ba366004614258565b6124aa565b3480156102cb57600080fd5b506000546102e5906201000090046001600160a01b031681565b6040516101889190614302565b610164610300366004613f52565b6124be565b34801561031157600080fd5b506101b160035481565b610164610329366004614316565b61258c565b34801561033a57600080fd5b5061016461034936600461435a565b6126b6565b34801561035a57600080fd5b506101b160045481565b34801561037057600080fd5b5061016461037f366004614373565b6126e5565b610164610392366004613f52565b61276c565b6101646103a5366004613f52565b61283a565b3480156103b657600080fd5b506101646103c536600461435a565b612908565b6101646103d8366004614316565b612937565b3480156103e957600080fd5b506101646103f8366004614373565b612a1e565b34801561040957600080fd5b50610164610418366004614373565b612a6c565b34801561042957600080fd5b506001546102e5906001600160a01b031681565b34801561044957600080fd5b50610164610458366004614373565b612b12565b34801561046957600080fd5b5061048d610478366004614373565b60056020526000908152604090205460ff1681565b6040519015158152602001610188565b3480156104a957600080fd5b506101646104b8366004614390565b612b5d565b3480156104c957600080fd5b506101646104d8366004613fd5565b612c72565b3480156104e957600080fd5b506002546102e5906001600160a01b031681565b34801561050957600080fd5b5061051d610518366004614258565b612f2c565b60408051928352602083019190915201610188565b6060600780548060200260200160405190810160405280929190818152602001828054801561058a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161056c575b5050505050905090565b600154604080516315ab88c960e31b815290516000926001600160a01b03169163ad5c46489160048083019260209291908290030181865afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060291906143d6565b6001600160a01b0316836001600160a01b03161415801561067257506001600160a01b0383166000908152600660205260408120908560018111156106495761064961400a565b600181111561065a5761065a61400a565b815260208101919091526040016000206002015460ff165b80156106cc57506001600160a01b0383166000908152600660205260408120818660018111156106a4576106a461400a565b60018111156106b5576106b561400a565b815260200190815260200160002060000160010154115b80156106e857503360009081526005602052604090205460ff16155b15610906576040805160028082526060820183526000926020830190803683370190505090508381600081518110610722576107226143f3565b6001600160a01b03928316602091820292909201810191909152600154604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561077b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079f91906143d6565b816001815181106107b2576107b26143f3565b6001600160a01b03928316602091820292909201015260015460405163d06ca61f60e01b815291169063d06ca61f906107f19089908590600401614409565b600060405180830381865afa92505050801561082f57506040513d6000823e601f3d908101601f1916820160405261082c9190810190614422565b60015b61083c5760009150610904565b83156108d8576003546001600160a01b0386166000908152600660205260408120908860018111156108705761087061400a565b60018111156108815761088161400a565b81526020019081526020016000206000016001015482600184516108a591906144c8565b815181106108b5576108b56143f3565b60200260200101516108c791906144df565b6108d191906144fe565b9250610902565b80600182516108e791906144c8565b815181106108f7576108f76143f3565b602002602001015192505b505b505b949350505050565b3360009081526005602052604090205460ff166109f157600061097082356109396040850185614520565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612f2c92505050565b5090508034101561099c5760405162461bcd60e51b815260040161099390614569565b60405180910390fd5b6109e66109ac6040840184614520565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505085359150612fa19050565b6109ef47613131565b505b610a5681356020830135610a086040850185614520565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250610a4c9150506080870160608801614373565b866080013561319d565b50565b6002546001600160a01b03163314610a835760405162461bcd60e51b8152600401610993906145ac565b6001600160a01b038416600090815260066020526040812081856001811115610aae57610aae61400a565b6001811115610abf57610abf61400a565b815260208101919091526040016000205461010090046001600160a01b03161415610afc5760405162461bcd60e51b8152600401610993906145e1565b6001600160a01b038416600090815260066020526040812090846001811115610b2757610b2761400a565b6001811115610b3857610b3861400a565b81526020019081526020016000206003018181548110610b5a57610b5a6143f3565b600091825260209091206003600490920201015460ff16610bd65760405162461bcd60e51b815260206004820152603060248201527f53616665537761705472616465526f757465723a20546f6b656e27732073776160448201526f7020666565206e6f742061637469766560801b6064820152608401610993565b6001600160a01b038416600090815260066020526040812090846001811115610c0157610c0161400a565b6001811115610c1257610c1261400a565b8152602081019190915260400160002060030154811115610c455760405162461bcd60e51b81526004016109939061462a565b600454600354610c5591906144c8565b6001600160a01b038516600090815260066020526040812090856001811115610c8057610c8061400a565b6001811115610c9157610c9161400a565b81526020019081526020016000206003018281548110610cb357610cb36143f3565b906000526020600020906004020160020154836060013560066000886001600160a01b03166001600160a01b031681526020019081526020016000206000876001811115610d0357610d0361400a565b6001811115610d1457610d1461400a565b815260200190815260200160002060000160010154610d33919061466c565b610d3d91906144c8565b1115610d5b5760405162461bcd60e51b815260040161099390614684565b6001600160a01b038416600090815260066020526040812090846001811115610d8657610d8661400a565b6001811115610d9757610d9761400a565b81526020019081526020016000206003018181548110610db957610db96143f3565b90600052602060002090600402016002015460066000866001600160a01b03166001600160a01b031681526020019081526020016000206000856001811115610e0457610e0461400a565b6001811115610e1557610e1561400a565b81526020019081526020016000206000016001016000828254610e3891906144c8565b90915550506040805160a0810190915280610e5660208501856146cc565b6002811115610e6757610e6761400a565b8152602001836020016020810190610e7f9190614373565b6001600160a01b03168152602001610e9d6060850160408601614373565b6001600160a01b0316815260608401356020820152604001610ec560a08501608086016146ed565b151590526001600160a01b038516600090815260066020526040812090856001811115610ef457610ef461400a565b6001811115610f0557610f0561400a565b81526020019081526020016000206003018281548110610f2757610f276143f3565b6000918252602090912082516004909202018054909190829060ff19166001836002811115610f5857610f5861400a565b02179055506020828101518254610100600160a81b0319166101006001600160a01b0392831602178355604080850151600180860180546001600160a01b0319169285169290921790915560608087015160028701556080909601516003909501805460ff1916951515959095179094559088166000908152600690925281209285013592918690811115610fef57610fef61400a565b60018111156110005761100061400a565b81526020019081526020016000206000016001016000828254611023919061466c565b90915550506001600160a01b0384166000908152600660205260408120600080516020614a8a83398151915291869186918260018111156110665761106661400a565b60018111156110775761107761400a565b81526020808201929092526040016000206001015490611099908701876146cc565b6110a96040880160208901614373565b6110b96060890160408a01614373565b60608901356110ce60a08b0160808c016146ed565b6040516110e2989796959493929190614708565b60405180910390a150505050565b6040805160e081018252600091810182815260608083018490526080830184905260a0830184905260c0830193909352815260208101919091526001600160a01b0383166000908152600660205260408120908360018111156111555761115561400a565b60018111156111665761116661400a565b815260208101919091526040908101600020815160e081018352815490928391908201908390829060ff1660018111156111a2576111a261400a565b60018111156111b3576111b361400a565b815281546001600160a01b036101009182900416602080840191909152600184015460408085019190915260029094015460ff80821615156060860152929004909116151560809092019190915291835260038401805482518185028101850190935280835293830193919290919060009084015b828210156112c9576000848152602090206040805160a08101909152600484029091018054829060ff1660028111156112635761126361400a565b60028111156112745761127461400a565b815281546001600160a01b03610100909104811660208084019190915260018085015490921660408401526002840154606084015260039093015460ff16151560809092019190915291835292019101611228565b505050508152505090505b92915050565b6002546001600160a01b031633146113045760405162461bcd60e51b8152600401610993906145ac565b6001600160a01b03821660009081526006602052604081209082600181111561132f5761132f61400a565b60018111156113405761134061400a565b8152602081019190915260400160002060020154610100900460ff16156113795760405162461bcd60e51b815260040161099390614767565b6001600160a01b0382166000908152600660205260408120908260018111156113a4576113a461400a565b60018111156113b5576113b561400a565b815260208082019290925260409081016000908120600201546001600160a01b0386168252600690935290812060ff9092161591908360018111156113fc576113fc61400a565b600181111561140d5761140d61400a565b815260208082019290925260409081016000908120600201805460ff1916941515949094179093556001600160a01b0385168352600690915281207f95437ba9f2848cd22a891a779e6179145fcce51375c56a427807e653c77b945f91849184918260018111156114805761148061400a565b60018111156114915761149161400a565b8152602081019190915260409081016000206002015490516114b893929160ff16906147b1565b60405180910390a15050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611505573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152991906147de565b611534906012614801565b60ff169050600160009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b091906143d6565b6001600160a01b0316846001600160a01b03161415611600576115d481600a614908565b6003546004546115e490896144df565b6115ee91906144fe565b6115f891906144df565b915050610906565b6040805160028082526060820183526000926020830190803683370190505090508481600081518110611635576116356143f3565b6001600160a01b03928316602091820292909201810191909152600154604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b291906143d6565b816001815181106116c5576116c56143f3565b6001600160a01b03928316602091820292909201015260015460405163d06ca61f60e01b8152600092919091169063d06ca61f90611709908b908690600401614409565b600060405180830381865afa92505050801561174757506040513d6000823e601f3d908101601f191682016040526117449190810190614422565b60015b61181757848260008151811061175f5761175f6143f3565b6001600160a01b03928316602091820292909201015260015460405163d06ca61f60e01b815291169063d06ca61f9061179e908a908690600401614409565b600060405180830381865afa9250505080156117dc57506040513d6000823e601f3d908101601f191682016040526117d99190810190614422565b60015b6117e857506000611842565b80600182516117f791906144c8565b81518110611807576118076143f3565b6020026020010151915050611842565b806001825161182691906144c8565b81518110611836576118366143f3565b60200260200101519150505b80156118695760035460045461185890836144df565b61186291906144fe565b935061189b565b61187483600a614908565b600354600454611884908b6144df565b61188e91906144fe565b61189891906144df565b93505b505050949350505050565b6002546001600160a01b031633146118d05760405162461bcd60e51b8152600401610993906145ac565b6001600160a01b0383166000908152600660205260408120908360018111156118fb576118fb61400a565b600181111561190c5761190c61400a565b8152602081019190915260400160002060020154610100900460ff16156119455760405162461bcd60e51b815260040161099390614767565b6001600160a01b0383166000908152600660205260408120908360018111156119705761197061400a565b60018111156119815761198161400a565b81526020810191909152604001600020600301548111156119b45760405162461bcd60e51b81526004016109939061462a565b6001600160a01b0383166000908152600660205260408120908360018111156119df576119df61400a565b60018111156119f0576119f061400a565b81526020019081526020016000206003018181548110611a1257611a126143f3565b600091825260209091206003600490920201015460ff1615611b16576001600160a01b038316600090815260066020526040812090836001811115611a5957611a5961400a565b6001811115611a6a57611a6a61400a565b81526020019081526020016000206003018181548110611a8c57611a8c6143f3565b90600052602060002090600402016002015460066000856001600160a01b03166001600160a01b031681526020019081526020016000206000846001811115611ad757611ad761400a565b6001811115611ae857611ae861400a565b81526020019081526020016000206000016001016000828254611b0b91906144c8565b90915550611bf99050565b6001600160a01b038316600090815260066020526040812090836001811115611b4157611b4161400a565b6001811115611b5257611b5261400a565b81526020019081526020016000206003018181548110611b7457611b746143f3565b90600052602060002090600402016002015460066000856001600160a01b03166001600160a01b031681526020019081526020016000206000846001811115611bbf57611bbf61400a565b6001811115611bd057611bd061400a565b81526020019081526020016000206000016001016000828254611bf3919061466c565b90915550505b6001600160a01b038316600090815260066020526040812090836001811115611c2457611c2461400a565b6001811115611c3557611c3561400a565b81526020019081526020016000206003018181548110611c5757611c576143f3565b60009182526020808320600360049093020191909101546001600160a01b038616835260069091526040822060ff9091161591846001811115611c9c57611c9c61400a565b6001811115611cad57611cad61400a565b81526020019081526020016000206003018281548110611ccf57611ccf6143f3565b60009182526020808320600492909202909101600301805460ff1916931515939093179092556001600160a01b03851681526006909152604081207f196ff3554753d125f87be48683fa3afa6021b058731ab355eea0dbfd5e99b0469185918591826001811115611d4257611d4261400a565b6001811115611d5357611d5361400a565b815260208101919091526040908101600020600201549051611d7c93929160ff16908690614914565b60405180910390a1505050565b6002546001600160a01b03163314611db35760405162461bcd60e51b8152600401610993906145ac565b600454600354611dc391906144c8565b6001600160a01b0384166000908152600660205260408120606084013591856001811115611df357611df361400a565b6001811115611e0457611e0461400a565b815260200190815260200160002060000160010154611e23919061466c565b1115611e415760405162461bcd60e51b815260040161099390614684565b6001600160a01b038316600090815260066020526040812081846001811115611e6c57611e6c61400a565b6001811115611e7d57611e7d61400a565b815260208101919091526040016000205461010090046001600160a01b03161415612205576001600160a01b03831660009081526006602090815260408083206001845290915290206002015460ff16158015611f0157506001600160a01b038316600090815260066020908152604080832083805290915290206002015460ff16155b15611f5257600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b0385161790555b6001600160a01b038316600090815260066020526040812081846001811115611f7d57611f7d61400a565b6001811115611f8e57611f8e61400a565b81526020019081526020016000209050806003016040518060a00160405280846000016020810190611fc091906146cc565b6002811115611fd157611fd161400a565b8152602001846020016020810190611fe99190614373565b6001600160a01b031681526020016120076060860160408701614373565b6001600160a01b031681526060850135602082015260400161202f60a08601608087016146ed565b15159052815460018181018455600093845260209093208251600490920201805492939092839160ff199091169083600281111561206f5761206f61400a565b021790555060208201518154610100600160a81b0319166101006001600160a01b0392831602178255604080840151600180850180546001600160a01b0319169290941691909117909255606084015160028401556080909301516003909201805460ff191692151592909217909155815160a08101909252819085908111156120fb576120fb61400a565b81526001600160a01b038616602080830182905260009182526006905260408082209201916060860135918760018111156121385761213861400a565b60018111156121495761214961400a565b815260200190815260200160002060000160010154612168919061466c565b81526001602082018190526000604090920191909152815183548492839160ff191690838181111561219c5761219c61400a565b021790555060208201518154610100600160a81b0319166101006001600160a01b0390921682021782556040830151600183015560608301516002909201805460809094015161ffff1990941692151561ff0019169290921792151502919091179055506123f0565b6001600160a01b0383166000908152600660205260408120908360018111156122305761223061400a565b60018111156122415761224161400a565b81526020019081526020016000206003016040518060a0016040528083600001602081019061227091906146cc565b60028111156122815761228161400a565b81526020018360200160208101906122999190614373565b6001600160a01b031681526020016122b76060850160408601614373565b6001600160a01b03168152606084013560208201526040016122df60a08501608086016146ed565b15159052815460018181018455600093845260209093208251600490920201805492939092839160ff199091169083600281111561231f5761231f61400a565b02179055506020828101518254610100600160a81b0319166101006001600160a01b0392831602178355604080850151600180860180546001600160a01b0319169285169290921790915560608087015160028701556080909601516003909501805460ff19169515159590951790945590871660009081526006909252812092840135929185908111156123b6576123b661400a565b60018111156123c7576123c761400a565b815260200190815260200160002060000160010160008282546123ea919061466c565b90915550505b6001600160a01b0383166000908152600660205260408120600080516020614a8a833981519152918591859182600181111561242e5761242e61400a565b600181111561243f5761243f61400a565b81526020808201929092526040016000206001015490612461908601866146cc565b6124716040870160208801614373565b6124816060880160408901614373565b606088013561249660a08a0160808b016146ed565b604051611d7c989796959493929190614708565b60006124b68383612f2c565b509392505050565b3360009081526005602052604090205460ff166125275760006124e982356109396040850185614520565b5090508034101561250c5760405162461bcd60e51b815260040161099390614943565b61251c6109ac6040840184614520565b61252547613131565b505b610a566020820135823561253e6040850185614520565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503392506125829150506080870160608801614373565b8660800135613211565b3360009081526005602052604090205460ff1661264f5760006125b783356109396040860186614520565b5090508082101580156125d457506125d081843561466c565b3410155b6125f05760405162461bcd60e51b815260040161099390614943565b61263a6126006040850185614520565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505086359150612fa19050565b61264d6126488435476144c8565b613131565b505b6126b2602083013583356126666040860186614520565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506126a8925050506080870160608801614373565b866080013561329b565b5050565b6002546001600160a01b031633146126e05760405162461bcd60e51b8152600401610993906145ac565b600455565b6002546001600160a01b0316331461270f5760405162461bcd60e51b8152600401610993906145ac565b6000805462010000600160b01b031916620100006001600160a01b038416021790556040517f9fbc3107cd5de0b63e7e8ee125c41156ece8511d0030e7d3e7b9174d6b9cf2c390612761908390614302565b60405180910390a150565b3360009081526005602052604090205460ff166127d557600061279782356109396040850185614520565b509050803410156127ba5760405162461bcd60e51b815260040161099390614569565b6127ca6109ac6040840184614520565b6127d347613131565b505b610a56602082013582356127ec6040850185614520565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503392506128309150506080870160608801614373565b866080013561331a565b3360009081526005602052604090205460ff166128a357600061286582356109396040850185614520565b509050803410156128885760405162461bcd60e51b815260040161099390614943565b6128986109ac6040840184614520565b6128a147613131565b505b610a56813560208301356128ba6040850185614520565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503392506128fe9150506080870160608801614373565b8660800135613354565b6002546001600160a01b031633146129325760405162461bcd60e51b8152600401610993906145ac565b600355565b3360009081526005602052604090205460ff166129bb57600061296283356109396040860186614520565b50905080821015801561297f575061297b81843561466c565b3410155b61299b5760405162461bcd60e51b815260040161099390614943565b6129ab6126006040850185614520565b6129b96126488435476144c8565b505b6126b2823560208401356129d26040860186614520565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612a14925050506080870160608801614373565b866080013561338e565b6002546001600160a01b03163314612a485760405162461bcd60e51b8152600401610993906145ac565b6001600160a01b03166000908152600560205260409020805460ff19166001179055565b6002546001600160a01b03163314612a965760405162461bcd60e51b8152600401610993906145ac565b6002546001600160a01b03163314612af05760405162461bcd60e51b815260206004820152601e60248201527f5361666573776170526f757465723a204e4f5420415554484f52495a454400006044820152606401610993565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314612b3c5760405162461bcd60e51b8152600401610993906145ac565b6001600160a01b03166000908152600560205260409020805460ff19169055565b600054610100900460ff1680612b725750303b155b80612b80575060005460ff16155b612be35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610993565b600054610100900460ff16158015612c05576000805461ffff19166101011790555b600080546001600160a01b03808816620100000262010000600160b01b031990921691909117909155600180549186166001600160a01b03199283161790556002805490911633179055600483905560038290558015612c6b576000805461ff00191690555b5050505050565b6002546001600160a01b03163314612c9c5760405162461bcd60e51b8152600401610993906145ac565b6001600160a01b038216600090815260066020526040812081836001811115612cc757612cc761400a565b6001811115612cd857612cd861400a565b815260208101919091526040016000205461010090046001600160a01b03161415612d155760405162461bcd60e51b8152600401610993906145e1565b6001600160a01b038216600090815260066020526040812090826001811115612d4057612d4061400a565b6001811115612d5157612d5161400a565b815260200190815260200160002060000160020160019054906101000a900460ff161560066000846001600160a01b03166001600160a01b031681526020019081526020016000206000836001811115612dad57612dad61400a565b6001811115612dbe57612dbe61400a565b81526020808201929092526040908101600090812060020180549415156101000261ff0019909516949094179093556001600160a01b03851683526006909152812090826001811115612e1357612e1361400a565b6001811115612e2457612e2461400a565b815260208082019290925260409081016000908120600201546001600160a01b0386168252600690935290812060ff909216159190836001811115612e6b57612e6b61400a565b6001811115612e7c57612e7c61400a565b815260208082019290925260409081016000908120600201805460ff1916941515949094179093556001600160a01b0385168352600690915281207f43116470e1e462f8da735d92f836a07475cde94449b1cd54c7145aedfcecfde79184918491826001811115612eef57612eef61400a565b6001811115612f0057612f0061400a565b8152602081019190915260409081016000206002015490516114b8939291610100900460ff16906147b1565b33600090815260056020526040812054819060ff1615612f5157506000905080612f9a565b600283511015612f735760405162461bcd60e51b815260040161099390614987565b612f7f848460016133df565b9050612f8d848460006133df565b612f97908261466c565b91505b9250929050565b60015460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f90612fd49085908790600401614409565b600060405180830381865afa158015612ff1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526130199190810190614422565b905060005b6001845161302c91906144c8565b81101561312b57600061307583838151811061304a5761304a6143f3565b60200260200101516000878581518110613066576130666143f3565b60200260200101516000610594565b905061309c85838151811061308c5761308c6143f3565b6020026020010151600083613620565b60006130e5846130ad85600161466c565b815181106130bd576130bd6143f3565b60200260200101516001888660016130d5919061466c565b81518110613066576130666143f3565b9050613116866130f685600161466c565b81518110613106576131066143f3565b6020026020010151600183613620565b50508080613123906149ba565b91505061301e565b50505050565b600060029054906101000a90046001600160a01b03166001600160a01b031663ddca3f43826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561318157600080fd5b505af1158015613195573d6000803e3d6000fd5b505050505050565b600154604051632955261160e11b81526001600160a01b03909116906352aa4c22906131d7908990899089908990899089906004016149d5565b600060405180830381600087803b1580156131f157600080fd5b505af1158015613205573d6000803e3d6000fd5b50505050505050505050565b60015460405163083722b560e01b81526001600160a01b039091169063083722b59061324b908990899089908990899089906004016149d5565b6000604051808303816000875af115801561326a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132929190810190614422565b50505050505050565b60015460405163fb3bdb4160e01b81526001600160a01b039091169063fb3bdb419086906132d3908990889088908890600401614a19565b60006040518083038185885af11580156132f1573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526131959190810190614422565b6001546040516304723bfd60e31b81526001600160a01b0390911690632391dfe89061324b908990899089908990899089906004016149d5565b60015460405163561c49dd60e11b81526001600160a01b039091169063ac3893ba906131d7908990899089908990899089906004016149d5565b60015460405163b6f9de9560e01b81526001600160a01b039091169063b6f9de959087906133c6908890889088908890600401614a19565b6000604051808303818588803b1580156131f157600080fd5b3360009081526005602052604081205460ff16156133ff57506000613619565b6002835110156134215760405162461bcd60e51b815260040161099390614987565b60015460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f906134549088908890600401614409565b600060405180830381865afa158015613471573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526134999190810190614422565b905060005b600185516134ac91906144c8565b8110156136165760008460018111156134c7576134c761400a565b141561356f57613523826134dc83600161466c565b815181106134ec576134ec6143f3565b6020026020010151600187846001613504919061466c565b81518110613514576135146143f3565b60200260200101516001610594565b613554838381518110613538576135386143f3565b60200260200101516000888581518110613514576135146143f3565b61355e908561466c565b613568919061466c565b9250613604565b6135f7828281518110613584576135846143f3565b60200260200101518383600161359a919061466c565b815181106135aa576135aa6143f3565b60200260200101518784815181106135c4576135c46143f3565b6020026020010151888560016135da919061466c565b815181106135ea576135ea6143f3565b60200260200101516114c4565b613601908461466c565b92505b8061360e816149ba565b91505061349e565b50505b9392505050565b6001600160a01b03831660009081526006602052604081209083600181111561364b5761364b61400a565b600181111561365c5761365c61400a565b815260208101919091526040016000206002015460ff1615613d7c5760005b6001600160a01b0384166000908152600660205260408120908460018111156136a6576136a661400a565b60018111156136b7576136b761400a565b815260208101919091526040016000206003015481101561312b576001600160a01b0384166000908152600660205260408120908460018111156136fd576136fd61400a565b600181111561370e5761370e61400a565b81526020019081526020016000206003018181548110613730576137306143f3565b600091825260209091206003600490920201015460ff1680156137c057506001600160a01b0384166000908152600660205260408120818560018111156137795761377961400a565b600181111561378a5761378a61400a565b815260200190815260200160002060030182815481106137ac576137ac6143f3565b906000526020600020906004020160020154115b15613d6a576001600160a01b0384166000908152600660205260408120818560018111156137f0576137f061400a565b60018111156138015761380161400a565b81526020019081526020016000206003018281548110613823576138236143f3565b90600052602060002090600402016002015490506000600354828561384891906144df565b61385291906144fe565b6001600160a01b038716600090815260066020526040812091925090818760018111156138815761388161400a565b60018111156138925761389261400a565b815260200190815260200160002060030184815481106138b4576138b46143f3565b6000918252602082206004909102015460ff1691508160028111156138db576138db61400a565b141561396a576001600160a01b03871660009081526006602052604081206139659188600181111561390f5761390f61400a565b60018111156139205761392061400a565b81526020019081526020016000206003018581548110613942576139426143f3565b60009182526020909120600160049092020101546001600160a01b031683613d81565b613d66565b600281600281111561397e5761397e61400a565b1415613a1b576001600160a01b038716600090815260066020526040812061dead918860018111156139b2576139b261400a565b60018111156139c3576139c361400a565b815260200190815260200160002060030185815481106139e5576139e56143f3565b906000526020600020906004020160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6040805160028082526060820183526000926020830190803683375050600154604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015613a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa991906143d6565b81600081518110613abc57613abc6143f3565b6001600160a01b03928316602091820292909201810191909152908916600090815260069091526040812090886001811115613afa57613afa61400a565b6001811115613b0b57613b0b61400a565b81526020019081526020016000206003018581548110613b2d57613b2d6143f3565b906000526020600020906004020160000160019054906101000a90046001600160a01b031681600181518110613b6557613b656143f3565b60200260200101906001600160a01b031690816001600160a01b031681525050613c2583600083600660008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001811115613bc557613bc561400a565b6001811115613bd657613bd661400a565b81526020019081526020016000206003018981548110613bf857613bf86143f3565b60009182526020909120600160049092020101546001600160a01b0316613c2042601461466c565b61338e565b6001600160a01b03881660009081526006602052604081207f2ee8b4373db2e5efd8f38a651db96135641602894fc6fef7cb54bc02b78cde3e91896001811115613c7157613c7161400a565b6001811115613c8257613c8261400a565b81526020019081526020016000206003018681548110613ca457613ca46143f3565b6000918252602080832060016004909302018201546001600160a01b038d811685526006909252604084209116928c928c90811115613ce557613ce561400a565b6001811115613cf657613cf661400a565b81526020019081526020016000206003018881548110613d1857613d186143f3565b60009182526020918290206004919091020154604080516001600160a01b039586168152938516928401929092526101009004909216818301526060810186905290519081900360800190a1505b5050505b80613d74816149ba565b91505061367b565b505050565b604080516000808252602082019092526001600160a01b038416908390604051613dab9190614a4e565b60006040518083038185875af1925050503d8060008114613de8576040519150601f19603f3d011682016040523d82523d6000602084013e613ded565b606091505b5050905080613d7c5760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b6064820152608401610993565b600081518084526020808501945080840160005b83811015613e945781516001600160a01b031687529582019590820190600101613e6f565b509495945050505050565b6020815260006136196020830184613e5b565b803560028110613ec157600080fd5b919050565b6001600160a01b0381168114610a5657600080fd5b80358015158114613ec157600080fd5b60008060008060808587031215613f0157600080fd5b84359350613f1160208601613eb2565b92506040850135613f2181613ec6565b9150613f2f60608601613edb565b905092959194509250565b600060a08284031215613f4c57600080fd5b50919050565b600060208284031215613f6457600080fd5b81356001600160401b03811115613f7a57600080fd5b61090684828501613f3a565b6000806000806101008587031215613f9d57600080fd5b8435613fa881613ec6565b9350613fb660208601613eb2565b9250613fc58660408701613f3a565b9396929550929360e00135925050565b60008060408385031215613fe857600080fd5b8235613ff381613ec6565b915061400160208401613eb2565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b600281106140305761403061400a565b9052565b600381106140305761403061400a565b6000602080835260e08301845161405e8386018251614020565b808301516001600160a01b03908116604087810191909152808301516060808901919091528084015115156080808a019190915293840151151560a0898101919091528987015160c0808b015280519687905287019560009591949291906101008b01905b808810156141115788516140d8838251614034565b808b01518616838c01528681015186168784015284810151858401528301511515838301529789019760019790970196908601906140c3565b509b9a5050505050505050505050565b6000806000806080858703121561413757600080fd5b8435935060208501359250604085013561415081613ec6565b9150606085013561416081613ec6565b939692955090935050565b60008060006060848603121561418057600080fd5b833561418b81613ec6565b925061419960208501613eb2565b9150604084013590509250925092565b600080600060e084860312156141be57600080fd5b83356141c981613ec6565b92506141d760208501613eb2565b91506141e68560408601613f3a565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561422d5761422d6141ef565b604052919050565b60006001600160401b0382111561424e5761424e6141ef565b5060051b60200190565b6000806040838503121561426b57600080fd5b823591506020808401356001600160401b0381111561428957600080fd5b8401601f8101861361429a57600080fd5b80356142ad6142a882614235565b614205565b81815260059190911b820183019083810190888311156142cc57600080fd5b928401925b828410156142f35783356142e481613ec6565b825292840192908401906142d1565b80955050505050509250929050565b6001600160a01b0391909116815260200190565b6000806040838503121561432957600080fd5b82356001600160401b0381111561433f57600080fd5b61434b85828601613f3a565b95602094909401359450505050565b60006020828403121561436c57600080fd5b5035919050565b60006020828403121561438557600080fd5b813561361981613ec6565b600080600080608085870312156143a657600080fd5b84356143b181613ec6565b935060208501356143c181613ec6565b93969395505050506040820135916060013590565b6000602082840312156143e857600080fd5b815161361981613ec6565b634e487b7160e01b600052603260045260246000fd5b8281526040602082015260006109066040830184613e5b565b6000602080838503121561443557600080fd5b82516001600160401b0381111561444b57600080fd5b8301601f8101851361445c57600080fd5b805161446a6142a882614235565b81815260059190911b8201830190838101908783111561448957600080fd5b928401925b828410156144a75783518252928401929084019061448e565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156144da576144da6144b2565b500390565b60008160001904831182151516156144f9576144f96144b2565b500290565b60008261451b57634e487b7160e01b600052601260045260246000fd5b500490565b6000808335601e1984360301811261453757600080fd5b8301803591506001600160401b0382111561455157600080fd5b6020019150600581901b3603821315612f9a57600080fd5b6020808252603590820152600080516020614aaa8339815191526040820152746f75676820424e4220746f20636f7665722066656560581b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f53616665537761705472616465526f757465723a20546f6b656e20646f6573206040820152681b9bdd08195e1a5cdd60ba1b606082015260800190565b60208082526022908201527f53616665537761705472616465526f757465723a20496e76616c696420696e646040820152610caf60f31b606082015260800190565b6000821982111561467f5761467f6144b2565b500190565b60208082526028908201527f53616665537761705472616465526f757465723a2046656550657263656e74616040820152676765203e3130302560c01b606082015260800190565b6000602082840312156146de57600080fd5b81356003811061361957600080fd5b6000602082840312156146ff57600080fd5b61361982613edb565b6001600160a01b038981168252610100820190614728602084018b614020565b88604084015261473b6060840189614034565b808716608084015280861660a0840152508360c083015282151560e08301529998505050505050505050565b6020808252602a908201527f53616665537761705472616465526f757465723a20546f6b656e20616c726561604082015269191e4819195b195d195960b21b606082015260800190565b6001600160a01b0384168152606081016147ce6020830185614020565b8215156040830152949350505050565b6000602082840312156147f057600080fd5b815160ff8116811461361957600080fd5b600060ff821660ff84168082101561481b5761481b6144b2565b90039392505050565b600181815b8085111561485f578160001904821115614845576148456144b2565b8085161561485257918102915b93841c9390800290614829565b509250929050565b600082614876575060016112d4565b81614883575060006112d4565b816001811461489957600281146148a3576148bf565b60019150506112d4565b60ff8411156148b4576148b46144b2565b50506001821b6112d4565b5060208310610133831016604e8410600b84101617156148e2575081810a6112d4565b6148ec8383614824565b8060001904821115614900576149006144b2565b029392505050565b60006136198383614867565b6001600160a01b0385168152608081016149316020830186614020565b92151560408201526060015292915050565b6020808252603690820152600080516020614aaa833981519152604082015275037bab3b410212721103a379031b7bb32b9103332b2960551b606082015260800190565b6020808252601990820152780a6c2cccae6eec2e08ccaca7440929cac82989288bea082a89603b1b604082015260600190565b60006000198214156149ce576149ce6144b2565b5060010190565b86815285602082015260c0604082015260006149f460c0830187613e5b565b6001600160a01b03958616606084015293909416608082015260a00152949350505050565b848152608060208201526000614a326080830186613e5b565b6001600160a01b03949094166040830152506060015292915050565b6000825160005b81811015614a6f5760208186018101518583015201614a55565b81811115614a7e576000828501525b50919091019291505056fe13a5198c06dda8adb82629a4b7833e14feece24a869103d32d93ba2ed24b6b935361666573776170526f757465723a20596f75206d7573742073656e6420656ea26469706673582212208d03a48c28ecd93b42d40d09f624792b4c5d12a44c98214f06817c059284f50a64736f6c634300080b0033",
  "devdoc": {
    "details": "Allows SFM Router-compliant trades to be paid via bsc",
    "kind": "dev",
    "methods": {
      "getPortalSwapFee(uint256,uint256,address,address)": {
        "params": {
          "_amountOut": "Amount out to calculate fee",
          "amountIn": "Amount in to calculate fee",
          "tokenA": "token1 for swap",
          "tokenB": "token2 for swap"
        },
        "returns": {
          "_fee": "the tokens fee amount value"
        }
      },
      "getSwapFees(uint256,address[])": {
        "params": {
          "amountIn": "Amount in to calculate fee",
          "path": "tokens addresses"
        },
        "returns": {
          "_feeAmount": "total fees amount"
        }
      },
      "getTokenFeeAddresses()": {
        "returns": {
          "_0": "the tokens fee information list"
        }
      },
      "getTokenInfoDetails(address,uint8)": {
        "returns": {
          "_0": "the token fee information"
        }
      },
      "getTokenSwapFee(uint256,uint8,address,bool)": {
        "params": {
          "_amount": "Amount to calculate fee",
          "_token": "token addresses"
        },
        "returns": {
          "_fee": "token swap fees amount"
        }
      },
      "getTotalSwapFees(uint256,address[])": {
        "params": {
          "amountIn": "Amount in to calculate fee",
          "path": "tokens addresses"
        },
        "returns": {
          "feeAmount": "total fees amount, portal fee amount"
        }
      },
      "setFeeJar(address)": {
        "params": {
          "_feeJar": "Address of FeeJar contract"
        }
      },
      "setRouter(address)": {
        "params": {
          "_router": "Address of SFM Router contract"
        }
      },
      "swapETHForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)": {
        "params": {
          "_feeAmount": "Fee value",
          "trade": "Trade details"
        }
      },
      "swapExactETHForTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)": {
        "params": {
          "_feeAmount": "Fee value",
          "trade": "Trade details"
        }
      },
      "swapExactTokensForETHAndFeeAmount((uint256,uint256,address[],address,uint256))": {
        "params": {
          "trade": "Trade details"
        }
      },
      "swapExactTokensForTokensWithFeeAmount((uint256,uint256,address[],address,uint256))": {
        "params": {
          "trade": "Trade details"
        }
      },
      "swapTokensForExactETHAndFeeAmount((uint256,uint256,address[],address,uint256))": {
        "params": {
          "trade": "Trade details"
        }
      },
      "swapTokensForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256))": {
        "params": {
          "trade": "Trade details"
        }
      }
    },
    "title": "SafeSwapTradeRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "feeJar()": {
        "notice": "FeepJar proxy"
      },
      "getPortalSwapFee(uint256,uint256,address,address)": {
        "notice": "Get swap fee based on the amounts"
      },
      "getSwapFees(uint256,address[])": {
        "notice": "Get swap fee based on the amounts"
      },
      "getTokenFeeAddresses()": {
        "notice": "Returns the tokens fee information list."
      },
      "getTokenInfoDetails(address,uint8)": {
        "notice": "Returns the token swap fee information for a given identifier."
      },
      "getTokenSwapFee(uint256,uint8,address,bool)": {
        "notice": "Get token swap fee for single token"
      },
      "getTotalSwapFees(uint256,address[])": {
        "notice": "Get swap fee based on the amounts"
      },
      "setFeeJar(address)": {
        "notice": "set feeJar address"
      },
      "setRouter(address)": {
        "notice": "set SFM router address"
      },
      "swapETHForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)": {
        "notice": "Swap BNB for tokens and pay amount of BNB input as fee"
      },
      "swapExactETHForTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)": {
        "notice": "Swap BNB for tokens and pay % of BNB input as fee"
      },
      "swapExactTokensForETHAndFeeAmount((uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for BNB and pay amount of BNB as fee"
      },
      "swapExactTokensForTokensWithFeeAmount((uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for tokens and pay BNB amount as fee"
      },
      "swapTokensForExactETHAndFeeAmount((uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for BNB and pay amount of BNB as fee"
      },
      "swapTokensForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for tokens and pay BNB amount as fee"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8676,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8679,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 567,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "feeJar",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IFeeJar)8303"
      },
      {
        "astId": 569,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "swapRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 571,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 573,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "percent",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 575,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "feePercent",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 579,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "whitelistFfsFee",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 587,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "tokensFeeList",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_enum(TransactionType)695,t_struct(TokenFee)673_storage))"
      },
      {
        "astId": 590,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "tokenFeeAddresses",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SingleSwapFee)707_storage)dyn_storage": {
        "base": "t_struct(SingleSwapFee)707_storage",
        "encoding": "dynamic_array",
        "label": "struct SafeSwapTradeRouter.SingleSwapFee[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFeeJar)8303": {
        "encoding": "inplace",
        "label": "contract IFeeJar",
        "numberOfBytes": "20"
      },
      "t_enum(SwapKind)689": {
        "encoding": "inplace",
        "label": "enum SafeSwapTradeRouter.SwapKind",
        "numberOfBytes": "1"
      },
      "t_enum(TransactionType)695": {
        "encoding": "inplace",
        "label": "enum SafeSwapTradeRouter.TransactionType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_enum(TransactionType)695,t_struct(TokenFee)673_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum SafeSwapTradeRouter.TransactionType => struct SafeSwapTradeRouter.TokenFee))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TransactionType)695,t_struct(TokenFee)673_storage)"
      },
      "t_mapping(t_enum(TransactionType)695,t_struct(TokenFee)673_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TransactionType)695",
        "label": "mapping(enum SafeSwapTradeRouter.TransactionType => struct SafeSwapTradeRouter.TokenFee)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenFee)673_storage"
      },
      "t_struct(SingleSwapFee)707_storage": {
        "encoding": "inplace",
        "label": "struct SafeSwapTradeRouter.SingleSwapFee",
        "members": [
          {
            "astId": 698,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "swapKind",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(SwapKind)689"
          },
          {
            "astId": 700,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "assetOut",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 702,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "beneficiary",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 704,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "percentage",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 706,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "isEnabled",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenFee)673_storage": {
        "encoding": "inplace",
        "label": "struct SafeSwapTradeRouter.TokenFee",
        "members": [
          {
            "astId": 668,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "tokenInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(TokenInfo)685_storage"
          },
          {
            "astId": 672,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "singleSwapFees",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(SingleSwapFee)707_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenInfo)685_storage": {
        "encoding": "inplace",
        "label": "struct SafeSwapTradeRouter.TokenInfo",
        "members": [
          {
            "astId": 676,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "transactionType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(TransactionType)695"
          },
          {
            "astId": 678,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "tokenAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 680,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "feePercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 682,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "isEnabled",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 684,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "isDeleted",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}