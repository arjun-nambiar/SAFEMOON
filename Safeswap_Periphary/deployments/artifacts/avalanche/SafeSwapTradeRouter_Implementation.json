{
  "address": "0xfcb48986b360B8e79e67ce25e4808408004f954B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_feeJar",
          "type": "address"
        }
      ],
      "name": "NewFeeJar",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isARCBEnabled",
          "type": "bool"
        }
      ],
      "name": "SetARCBStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isEnabled",
          "type": "bool"
        }
      ],
      "name": "SetLpPriceRangeStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "SetTokenDeletionStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isEnabled",
          "type": "bool"
        }
      ],
      "name": "SetTokenFeeStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isEnabled",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "SetTokenSwapFeeStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_upl",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_lpl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lastPrice",
          "type": "uint256"
        }
      ],
      "name": "SubmitLpPriceRange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenFeePercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SafeSwapTradeRouter.SwapKind",
          "name": "_swapKind",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_assetOut",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapFeePercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "SubmitTokenSwapFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_assetIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_assetOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "TokenFeeSwapped",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wl",
          "type": "address"
        }
      ],
      "name": "addFfsWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeJar",
      "outputs": [
        {
          "internalType": "contract IFeeJar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBNBFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dexFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "getLpPriceRangeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upl",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpl",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.AdaptiveLpPriceRange",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserve0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve1",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenFeeAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        }
      ],
      "name": "getTokenInfoDetails",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum SafeSwapTradeRouter.TransactionType",
                  "name": "transactionType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "feePercentage",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isEnabled",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isDeleted",
                  "type": "bool"
                }
              ],
              "internalType": "struct SafeSwapTradeRouter.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum SafeSwapTradeRouter.SwapKind",
                  "name": "swapKind",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetOut",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "percentage",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isEnabled",
                  "type": "bool"
                }
              ],
              "internalType": "struct SafeSwapTradeRouter.SingleSwapFee[]",
              "name": "singleSwapFees",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.TokenFee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeJar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isARCBEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wl",
          "type": "address"
        }
      ],
      "name": "removeFfsWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "resetLpLastPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "sePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeJar",
          "type": "address"
        }
      ],
      "name": "setFeeJar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_upl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpl",
          "type": "uint256"
        }
      ],
      "name": "submitLpPriceRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "enum SafeSwapTradeRouter.SwapKind",
              "name": "swapKind",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "assetOut",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "percentage",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.SingleSwapFee",
          "name": "_singleSwapFee",
          "type": "tuple"
        }
      ],
      "name": "submitTokenSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokensWithFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokensWithFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapExactTokensForETHAndFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapExactTokensForTokensWithFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForExactETHAndFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForExactTokensWithFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "switchARCBActivation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "switchLpPriceRangeActivation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "switchSingleSwapActivation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        }
      ],
      "name": "switchTokenActivation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        }
      ],
      "name": "switchTokenDeletion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_upl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpl",
          "type": "uint256"
        }
      ],
      "name": "updateLpPriceRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "enum SafeSwapTradeRouter.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "enum SafeSwapTradeRouter.SwapKind",
              "name": "swapKind",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "assetOut",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "percentage",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.SingleSwapFee",
          "name": "_singleSwapFee",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "updateTokenSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistFfsFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x70d56225823c1649a1f4e8044844fd8013d547262111648f4ac5527da4b0e01f",
  "receipt": {
    "to": null,
    "from": "0x8868F1b2aafc2afBF24076Aa6829024A1385A047",
    "contractAddress": "0xfcb48986b360B8e79e67ce25e4808408004f954B",
    "transactionIndex": 0,
    "gasUsed": "5317589",
    "logsBloom": "0x
    "blockHash": "0x1ca1a53bf85e1d307983282a7d508ef30a9e61730cf5315d84a9c5f08368eb88",
    "transactionHash": "0x70d56225823c1649a1f4e8044844fd8013d547262111648f4ac5527da4b0e01f",
    "logs": [],
    "blockNumber": 25220996,
    "cumulativeGasUsed": "5317589",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "7b969a88e7804fd6163a12ae2797fc5e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_feeJar\",\"type\":\"address\"}],\"name\":\"NewFeeJar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isARCBEnabled\",\"type\":\"bool\"}],\"name\":\"SetARCBStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"}],\"name\":\"SetLpPriceRangeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"SetTokenDeletionStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"}],\"name\":\"SetTokenFeeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"SetTokenSwapFeeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_upl\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_lpl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastPrice\",\"type\":\"uint256\"}],\"name\":\"SubmitLpPriceRange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SafeSwapTradeRouter.SwapKind\",\"name\":\"_swapKind\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_assetOut\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"SubmitTokenSwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_assetIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_assetOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"TokenFeeSwapped\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wl\",\"type\":\"address\"}],\"name\":\"addFfsWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeJar\",\"outputs\":[{\"internalType\":\"contract IFeeJar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBNBFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dexFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getLpPriceRangeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpl\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct SafeSwapTradeRouter.AdaptiveLpPriceRange\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenFeeAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"}],\"name\":\"getTokenInfoDetails\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"transactionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDeleted\",\"type\":\"bool\"}],\"internalType\":\"struct SafeSwapTradeRouter.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum SafeSwapTradeRouter.SwapKind\",\"name\":\"swapKind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct SafeSwapTradeRouter.SingleSwapFee[]\",\"name\":\"singleSwapFees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SafeSwapTradeRouter.TokenFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeJar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isARCBEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wl\",\"type\":\"address\"}],\"name\":\"removeFfsWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"resetLpLastPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"sePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeJar\",\"type\":\"address\"}],\"name\":\"setFeeJar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_upl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpl\",\"type\":\"uint256\"}],\"name\":\"submitLpPriceRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"enum SafeSwapTradeRouter.SwapKind\",\"name\":\"swapKind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct SafeSwapTradeRouter.SingleSwapFee\",\"name\":\"_singleSwapFee\",\"type\":\"tuple\"}],\"name\":\"submitTokenSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokensWithFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensWithFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForETHAndFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForTokensWithFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForExactETHAndFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForExactTokensWithFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchARCBActivation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"switchLpPriceRangeActivation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"switchSingleSwapActivation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"}],\"name\":\"switchTokenActivation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"}],\"name\":\"switchTokenDeletion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_upl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpl\",\"type\":\"uint256\"}],\"name\":\"updateLpPriceRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum SafeSwapTradeRouter.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"enum SafeSwapTradeRouter.SwapKind\",\"name\":\"swapKind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct SafeSwapTradeRouter.SingleSwapFee\",\"name\":\"_singleSwapFee\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"updateTokenSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistFfsFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Allows SFM Router-compliant trades to be paid via bsc\",\"kind\":\"dev\",\"methods\":{\"getTokenFeeAddresses()\":{\"returns\":{\"_0\":\"the tokens fee information list\"}},\"getTokenInfoDetails(address,uint8)\":{\"returns\":{\"_0\":\"the token fee information\"}},\"setFeeJar(address)\":{\"params\":{\"_feeJar\":\"Address of FeeJar contract\"}},\"setRouter(address)\":{\"params\":{\"_router\":\"Address of SFM Router contract\"}},\"swapETHForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)\":{\"params\":{\"_feeAmount\":\"Fee value\",\"trade\":\"Trade details\"}},\"swapExactETHForTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)\":{\"params\":{\"_feeAmount\":\"Fee value\",\"trade\":\"Trade details\"}},\"swapExactTokensForETHAndFeeAmount((uint256,uint256,address[],address,uint256))\":{\"params\":{\"trade\":\"Trade details\"}},\"swapExactTokensForTokensWithFeeAmount((uint256,uint256,address[],address,uint256))\":{\"params\":{\"trade\":\"Trade details\"}},\"swapTokensForExactETHAndFeeAmount((uint256,uint256,address[],address,uint256))\":{\"params\":{\"trade\":\"Trade details\"}},\"swapTokensForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256))\":{\"params\":{\"trade\":\"Trade details\"}}},\"title\":\"SafeSwapTradeRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeJar()\":{\"notice\":\"FeepJar proxy\"},\"getTokenFeeAddresses()\":{\"notice\":\"Returns the tokens fee information list.\"},\"getTokenInfoDetails(address,uint8)\":{\"notice\":\"Returns the token swap fee information for a given identifier.\"},\"setFeeJar(address)\":{\"notice\":\"set feeJar address\"},\"setRouter(address)\":{\"notice\":\"set SFM router address\"},\"swapETHForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)\":{\"notice\":\"Swap BNB for tokens and pay amount of BNB input as fee\"},\"swapExactETHForTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)\":{\"notice\":\"Swap BNB for tokens and pay % of BNB input as fee\"},\"swapExactTokensForETHAndFeeAmount((uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for BNB and pay amount of BNB as fee\"},\"swapExactTokensForTokensWithFeeAmount((uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for tokens and pay BNB amount as fee\"},\"swapTokensForExactETHAndFeeAmount((uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for BNB and pay amount of BNB as fee\"},\"swapTokensForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for tokens and pay BNB amount as fee\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeSwapTradeRouter.sol\":\"SafeSwapTradeRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"contracts/SafeSwapTradeRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/ISafeSwapRouter.sol\\\";\\nimport \\\"./interfaces/IFeeJar.sol\\\";\\nimport \\\"./libraries/Initializable.sol\\\";\\n\\ninterface IERC20 {\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function decimals() external pure returns (uint8);\\n}\\n\\ninterface ISafeswapFactory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\\ninterface ISafeswapPair {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function sync() external;\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112,\\n            uint112,\\n            uint32\\n        );\\n}\\n\\nlibrary TransferHelper {\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        require(success, \\\"SafeSwapTradeRouter::safeTransferETH: ETH transfer failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SafeSwapTradeRouter::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SafeSwapTradeRouter::transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SafeSwapTradeRouter::safeApprove: approve failed\\\"\\n        );\\n    }\\n}\\n\\n/**\\n * @title SafeSwapTradeRouter\\n * @dev Allows SFM Router-compliant trades to be paid via bsc\\n */\\ncontract SafeSwapTradeRouter is Initializable {\\n    /// @notice Receive function to allow contract to accept BNB\\n    receive() external payable {}\\n\\n    /// @notice Fallback function in case receive function is not matched\\n    fallback() external payable {}\\n\\n    /// @notice FeepJar proxy\\n    IFeeJar public feeJar;\\n    address public swapRouter;\\n    address public admin;\\n    uint256 public percent;\\n    uint256 public feePercent;\\n    mapping(address => bool) public whitelistFfsFee;\\n\\n    mapping(address => mapping(TransactionType => TokenFee)) private tokensFeeList;\\n    address[] private tokenFeeAddresses;\\n\\n    mapping(address => AdaptiveLpPriceRange) private adaptiveLpPriceRange;\\n    bool public isARCBEnabled;\\n\\n    uint256 private constant LP_PRICE_BASE_AMOUNT = 6;\\n\\n    event NewFeeJar(address indexed _feeJar);\\n    event SetTokenFeeStatus(address indexed _tokenAddress, TransactionType _transactionType, bool _isEnabled);\\n    event SetTokenDeletionStatus(address indexed _tokenAddress, TransactionType _transactionType, bool _status);\\n    event SubmitLpPriceRange(address indexed _pair, uint256 indexed _upl, uint256 indexed _lpl, uint256 _lastPrice);\\n    event SetLpPriceRangeStatus(address indexed _pair, bool _isEnabled);\\n    event SetARCBStatus(bool _isARCBEnabled);\\n    event SetTokenSwapFeeStatus(\\n        address indexed _tokenAddress,\\n        TransactionType _transactionType,\\n        bool _isEnabled,\\n        uint256 indexed _index\\n    );\\n    event SubmitTokenSwapFee(\\n        address indexed _tokenAddress,\\n        TransactionType _transactionType,\\n        uint256 _tokenFeePercentage,\\n        SwapKind _swapKind,\\n        address indexed _assetOut,\\n        address indexed _beneficiary,\\n        uint256 swapFeePercentage,\\n        bool isEnabled\\n    );\\n    event TokenFeeSwapped(\\n        address indexed _beneficiary,\\n        address indexed _assetIn,\\n        address indexed _assetOut,\\n        uint256 _feeAmount\\n    );\\n\\n    /// @notice Trade details\\n    struct Trade {\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        address[] path;\\n        address payable to;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice TMI details\\n    struct TokenFee {\\n        TokenInfo tokenInfo;\\n        SingleSwapFee[] singleSwapFees;\\n    }\\n\\n    struct TokenInfo {\\n        TransactionType transactionType;\\n        address tokenAddress;\\n        uint256 feePercentage;\\n        bool isEnabled;\\n        bool isDeleted;\\n    }\\n\\n    /// @notice adaptive Lp Price Range details\\n    struct AdaptiveLpPriceRange {\\n        address tokenAddress;\\n        uint256 lastPrice;\\n        uint256 upl;\\n        uint256 lpl;\\n        bool isEnabled;\\n    }\\n\\n    enum SwapKind {\\n        SEND_ONLY,\\n        SWAP_AND_SEND,\\n        SWAP_AND_BURN\\n    }\\n\\n    enum FeeKind {\\n        TOKEN_FEE,\\n        PORTAL_FEE\\n    }\\n\\n    enum TransactionType {\\n        SELL,\\n        BUY\\n    }\\n\\n    /// @notice FM details\\n    struct SingleSwapFee {\\n        SwapKind swapKind;\\n        address assetOut;\\n        address beneficiary;\\n        uint256 percentage;\\n        bool isEnabled;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(admin == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    function _isSwapRangeValid(address[] calldata _path) private {\\n        require(_isLpsPriceInRange(_path), \\\"SafeswapRouter: Transaction rejected by ARC-B\\\");\\n    }\\n\\n    function _isTokenInfoDeleted(bool _isTokenDeleted) private pure {\\n        require(_isTokenDeleted == false, \\\"SafeSwapTradeRouter: Token already deleted\\\");\\n    }\\n\\n    function _isValidAdd(address _address) private pure {\\n        require(_address != address(0), \\\"SafeSwapTradeRouter: Token does not exist\\\");\\n    }\\n\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    modifier isSwapRangeValid(address[] calldata _path) {\\n        _isSwapRangeValid(_path);\\n        _;\\n    }\\n\\n    modifier isTokenInfoDelted(bool _isTokenDeleted) {\\n        _isTokenInfoDeleted(_isTokenDeleted);\\n        _;\\n    }\\n\\n    modifier isValidAdd(address _address) {\\n        _isValidAdd(_address);\\n        _;\\n    }\\n\\n    function initialize(\\n        address _feeJar,\\n        address _router,\\n        uint256 _feePercent,\\n        uint256 _percent\\n    ) external initializer {\\n        feeJar = IFeeJar(_feeJar);\\n        swapRouter = _router;\\n        admin = msg.sender;\\n        feePercent = _feePercent;\\n        percent = _percent;\\n        isARCBEnabled = true;\\n    }\\n\\n    /**\\n     * @notice set SFM router address\\n     * @param _router Address of SFM Router contract\\n     */\\n    function setRouter(address _router) external onlyOwner {\\n        swapRouter = _router;\\n    }\\n\\n    function setAdmin(address _admin) external onlyOwner {\\n        admin = _admin;\\n    }\\n\\n\\n    function setFeePercent(uint256 _feePercent) external onlyOwner {\\n        feePercent = _feePercent;\\n    }\\n\\n    function sePercent(uint256 _percent) external onlyOwner {\\n        percent = _percent;\\n    }\\n\\n    function addFfsWhitelist(address _wl) external onlyOwner {\\n        whitelistFfsFee[_wl] = true;\\n    }\\n\\n    function removeFfsWhitelist(address _wl) external onlyOwner {\\n        whitelistFfsFee[_wl] = false;\\n    }\\n\\n    /**\\n     * @notice set feeJar address\\n     * @param _feeJar Address of FeeJar contract\\n     */\\n    function setFeeJar(address _feeJar) external onlyOwner {\\n        feeJar = IFeeJar(_feeJar);\\n        emit NewFeeJar(_feeJar);\\n    }\\n\\n    function submitLpPriceRange(\\n        address _pair,\\n        uint256 _upl,\\n        uint256 _lpl\\n    ) external onlyOwner {\\n        _submitLpPriceRange(_pair, _upl, _lpl);\\n    }\\n\\n    function resetLpLastPrice(address _pair) external onlyOwner isValidAdd(adaptiveLpPriceRange[_pair].tokenAddress) {\\n        ISafeswapPair(_pair).sync();\\n        adaptiveLpPriceRange[_pair].lastPrice = _getLPPrice(\\n            ISafeswapPair(_pair).token0(),\\n            ISafeswapPair(_pair).token1()\\n        );\\n        emit SubmitLpPriceRange(\\n            _pair,\\n            adaptiveLpPriceRange[_pair].upl,\\n            adaptiveLpPriceRange[_pair].lpl,\\n            adaptiveLpPriceRange[_pair].lastPrice\\n        );\\n    }\\n\\n    function switchARCBActivation() external onlyOwner {\\n        isARCBEnabled = !isARCBEnabled;\\n        emit SetARCBStatus(isARCBEnabled);\\n    }\\n\\n    function switchLpPriceRangeActivation(address _pair)\\n        external\\n        onlyOwner\\n        isValidAdd(adaptiveLpPriceRange[_pair].tokenAddress)\\n    {\\n        adaptiveLpPriceRange[_pair].isEnabled = !adaptiveLpPriceRange[_pair].isEnabled;\\n\\n        emit SetLpPriceRangeStatus(_pair, adaptiveLpPriceRange[_pair].isEnabled);\\n    }\\n\\n    function updateLpPriceRange(\\n        address _pair,\\n        uint256 _upl,\\n        uint256 _lpl\\n    ) external onlyOwner isValidAdd(adaptiveLpPriceRange[_pair].tokenAddress) {\\n        adaptiveLpPriceRange[_pair].lpl = _lpl;\\n        adaptiveLpPriceRange[_pair].upl = _upl;\\n        emit SubmitLpPriceRange(_pair, _upl, _lpl, adaptiveLpPriceRange[_pair].lastPrice);\\n    }\\n\\n    function getLpPriceRangeInfo(address _pair) external view returns (AdaptiveLpPriceRange memory) {\\n        return adaptiveLpPriceRange[_pair];\\n    }\\n\\n    function submitTokenSwapFee(\\n        address _tokenAddress,\\n        TransactionType _transactionType,\\n        SingleSwapFee calldata _singleSwapFee\\n    ) external onlyOwner {\\n        uint256 feePercentage = tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage;\\n        require(\\n            (feePercentage + _singleSwapFee.percentage) <= (percent - feePercent),\\n            \\\"SafeSwapTradeRouter: FeePercentage >100%\\\"\\n        );\\n\\n        if (tokensFeeList[_tokenAddress][_transactionType].tokenInfo.tokenAddress == address(0)) {\\n            if (\\n                !tokensFeeList[_tokenAddress][TransactionType.BUY].tokenInfo.isEnabled &&\\n                !tokensFeeList[_tokenAddress][TransactionType.SELL].tokenInfo.isEnabled\\n            ) {\\n                tokenFeeAddresses.push(_tokenAddress);\\n            }\\n            TokenFee storage _tokenFee = tokensFeeList[_tokenAddress][_transactionType];\\n            _tokenFee.singleSwapFees.push(\\n                SingleSwapFee(\\n                    _singleSwapFee.swapKind,\\n                    _singleSwapFee.assetOut,\\n                    _singleSwapFee.beneficiary,\\n                    _singleSwapFee.percentage,\\n                    _singleSwapFee.isEnabled\\n                )\\n            );\\n            _tokenFee.tokenInfo = TokenInfo(\\n                _transactionType,\\n                _tokenAddress,\\n                (feePercentage + _singleSwapFee.percentage),\\n                true,\\n                false\\n            );\\n        } else {\\n            tokensFeeList[_tokenAddress][_transactionType].singleSwapFees.push(\\n                SingleSwapFee(\\n                    _singleSwapFee.swapKind,\\n                    _singleSwapFee.assetOut,\\n                    _singleSwapFee.beneficiary,\\n                    _singleSwapFee.percentage,\\n                    _singleSwapFee.isEnabled\\n                )\\n            );\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage += _singleSwapFee.percentage;\\n        }\\n        emit SubmitTokenSwapFee(\\n            _tokenAddress,\\n            _transactionType,\\n            feePercentage,\\n            _singleSwapFee.swapKind,\\n            _singleSwapFee.assetOut,\\n            _singleSwapFee.beneficiary,\\n            _singleSwapFee.percentage,\\n            _singleSwapFee.isEnabled\\n        );\\n    }\\n\\n    function updateTokenSwapFee(\\n        address _tokenAddress,\\n        TransactionType _transactionType,\\n        SingleSwapFee calldata _singleSwapFee,\\n        uint256 _index\\n    ) external onlyOwner isValidAdd(tokensFeeList[_tokenAddress][_transactionType].tokenInfo.tokenAddress) {\\n        require(\\n            tokensFeeList[_tokenAddress][_transactionType].singleSwapFees[_index].isEnabled,\\n            \\\"SafeSwapTradeRouter: Token's swap fee not active\\\"\\n        );\\n        require(\\n            _index < tokensFeeList[_tokenAddress][_transactionType].singleSwapFees.length,\\n            \\\"SafeSwapTradeRouter: Invalid index\\\"\\n        );\\n        require(\\n            (tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage +\\n                _singleSwapFee.percentage -\\n                tokensFeeList[_tokenAddress][_transactionType].singleSwapFees[_index].percentage) <=\\n                (percent - feePercent),\\n            \\\"SafeSwapTradeRouter: FeePercentage >100%\\\"\\n        );\\n\\n        tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage -= tokensFeeList[_tokenAddress][\\n            _transactionType\\n        ].singleSwapFees[_index].percentage;\\n        tokensFeeList[_tokenAddress][_transactionType].singleSwapFees[_index] = SingleSwapFee(\\n            _singleSwapFee.swapKind,\\n            _singleSwapFee.assetOut,\\n            _singleSwapFee.beneficiary,\\n            _singleSwapFee.percentage,\\n            _singleSwapFee.isEnabled\\n        );\\n        tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage += _singleSwapFee.percentage;\\n\\n        emit SubmitTokenSwapFee(\\n            _tokenAddress,\\n            _transactionType,\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage,\\n            _singleSwapFee.swapKind,\\n            _singleSwapFee.assetOut,\\n            _singleSwapFee.beneficiary,\\n            _singleSwapFee.percentage,\\n            _singleSwapFee.isEnabled\\n        );\\n    }\\n\\n    function switchTokenDeletion(address _tokenAddress, TransactionType _transactionType)\\n        external\\n        onlyOwner\\n        isValidAdd(tokensFeeList[_tokenAddress][_transactionType].tokenInfo.tokenAddress)\\n    {\\n        tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isDeleted = !tokensFeeList[_tokenAddress][\\n            _transactionType\\n        ].tokenInfo.isDeleted;\\n\\n        tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isEnabled = !tokensFeeList[_tokenAddress][\\n            _transactionType\\n        ].tokenInfo.isEnabled;\\n\\n        emit SetTokenDeletionStatus(\\n            _tokenAddress,\\n            _transactionType,\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isDeleted\\n        );\\n    }\\n\\n    function switchTokenActivation(address _tokenAddress, TransactionType _transactionType)\\n        external\\n        onlyOwner\\n        isTokenInfoDelted(tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isDeleted)\\n    {\\n        tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isEnabled = !tokensFeeList[_tokenAddress][\\n            _transactionType\\n        ].tokenInfo.isEnabled;\\n\\n        emit SetTokenFeeStatus(\\n            _tokenAddress,\\n            _transactionType,\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isEnabled\\n        );\\n    }\\n\\n    function switchSingleSwapActivation(\\n        address _tokenAddress,\\n        TransactionType _transactionType,\\n        uint256 _index\\n    ) external onlyOwner isTokenInfoDelted(tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isDeleted) {\\n        require(\\n            _index < tokensFeeList[_tokenAddress][_transactionType].singleSwapFees.length,\\n            \\\"SafeSwapTradeRouter: Invalid index\\\"\\n        );\\n\\n        if (tokensFeeList[_tokenAddress][_transactionType].singleSwapFees[_index].isEnabled) {\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage -= tokensFeeList[_tokenAddress][\\n                _transactionType\\n            ].singleSwapFees[_index].percentage;\\n        } else {\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage += tokensFeeList[_tokenAddress][\\n                _transactionType\\n            ].singleSwapFees[_index].percentage;\\n        }\\n\\n        tokensFeeList[_tokenAddress][_transactionType].singleSwapFees[_index].isEnabled = !tokensFeeList[_tokenAddress][\\n            _transactionType\\n        ].singleSwapFees[_index].isEnabled;\\n\\n        emit SetTokenSwapFeeStatus(\\n            _tokenAddress,\\n            _transactionType,\\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isEnabled,\\n            _index\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the tokens fee information list.\\n     * @return the tokens fee information list\\n     */\\n    function getTokenFeeAddresses() external view returns (address[] memory) {\\n        return tokenFeeAddresses;\\n    }\\n\\n    /**\\n     * @notice Returns the token swap fee information for a given identifier.\\n     * @return the token fee information\\n     */\\n    function getTokenInfoDetails(address _tokenAddress, TransactionType _transactionType)\\n        external\\n        view\\n        returns (TokenFee memory)\\n    {\\n        return tokensFeeList[_tokenAddress][_transactionType];\\n    }\\n\\n    /**\\n     * @notice Swap tokens for BNB and pay amount of BNB as fee\\n     * @param trade Trade details\\n     */\\n    function swapExactTokensForETHAndFeeAmount(Trade calldata trade) external payable isSwapRangeValid(trade.path) {\\n        uint256[] memory lastLpsPrices = _calcLpsLastPrice(trade.path);\\n\\n        (, uint256 dexFee, uint256 tokenAFee, ) = getFees(trade.path, trade.amountIn, msg.sender);\\n        require(msg.value >= dexFee, \\\"SafeswapRouter: You must send enough BNB to cover fee\\\");\\n\\n        _feeAmountBNB(address(this).balance);\\n\\n        if (tokenAFee > 0) {\\n            _claimTokenFee(trade.path[0], msg.sender, TransactionType.SELL, trade.amountIn, tokenAFee, false);\\n            _swapExactTokensForETH(\\n                _getContractBalance(trade.path[0]),\\n                trade.amountOut,\\n                trade.path,\\n                address(this),\\n                trade.to,\\n                trade.deadline\\n            );\\n        } else {\\n            _swapExactTokensForETH(trade.amountIn, trade.amountOut, trade.path, msg.sender, trade.to, trade.deadline);\\n        }\\n\\n        _updateLastPairsPrice(trade.path, lastLpsPrices);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for BNB and pay amount of BNB as fee\\n     * @param trade Trade details\\n     */\\n    function swapTokensForExactETHAndFeeAmount(Trade calldata trade) external payable isSwapRangeValid(trade.path) {\\n        uint256[] memory lastLpsPrices = _calcLpsLastPrice(trade.path);\\n\\n        (, uint256 dexFee, uint256 tokenAFee, ) = getFees(trade.path, trade.amountIn, msg.sender);\\n        require(msg.value >= dexFee, \\\"SafeswapRouter: You must send enough BNB to cover fee\\\");\\n        _feeAmountBNB(address(this).balance);\\n\\n        if (tokenAFee > 0) {\\n            _claimTokenFee(trade.path[0], msg.sender, TransactionType.SELL, trade.amountIn, tokenAFee, false);\\n            _swapTokensForExactETH(\\n                _getAmountsOut(_getContractBalance(trade.path[0]), trade.path),\\n                _getContractBalance(trade.path[0]),\\n                trade.path,\\n                address(this),\\n                trade.to,\\n                trade.deadline\\n            );\\n        } else {\\n            _swapTokensForExactETH(trade.amountOut, trade.amountIn, trade.path, msg.sender, trade.to, trade.deadline);\\n        }\\n\\n        _updateLastPairsPrice(trade.path, lastLpsPrices);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for tokens and pay % of BNB input as fee\\n     * @param trade Trade details\\n     * @param _feeAmount Fee value\\n     */\\n    function swapExactETHForTokensWithFeeAmount(Trade calldata trade, uint256 _feeAmount)\\n        external\\n        payable\\n        isSwapRangeValid(trade.path)\\n    {\\n        uint256[] memory lastLpsPrices = _calcLpsLastPrice(trade.path);\\n\\n        (, uint256 dexFee, , uint256 tokenBFee) = getFees(trade.path, trade.amountIn, msg.sender);\\n        require(\\n            _feeAmount >= dexFee && (msg.value >= trade.amountIn + dexFee),\\n            \\\"SafeswapRouter: You must send enough BNB to cover fee \\\"\\n        );\\n        _distributeTokenFee(trade.path[trade.path.length - 1], TransactionType.BUY, tokenBFee);\\n        _feeAmountBNB(dexFee);\\n\\n        _swapExactETHForTokens((trade.amountIn - tokenBFee), trade.amountOut, trade.path, trade.to, trade.deadline);\\n        _updateLastPairsPrice(trade.path, lastLpsPrices);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for tokens and pay amount of BNB input as fee\\n     * @param trade Trade details\\n     * @param _feeAmount Fee value\\n     */\\n    function swapETHForExactTokensWithFeeAmount(Trade calldata trade, uint256 _feeAmount)\\n        external\\n        payable\\n        isSwapRangeValid(trade.path)\\n    {\\n        uint256[] memory lastLpsPrices = _calcLpsLastPrice(trade.path);\\n\\n        (, uint256 dexFee, , uint256 tokenBFee) = getFees(trade.path, trade.amountIn, msg.sender);\\n        require(\\n            _feeAmount >= dexFee && (msg.value >= trade.amountIn + dexFee),\\n            \\\"SafeswapRouter: You must send enough BNB to cover fee \\\"\\n        );\\n        _distributeTokenFee(trade.path[trade.path.length - 1], TransactionType.BUY, tokenBFee);\\n        _feeAmountBNB(dexFee);\\n\\n        _swapETHForExactTokens(trade.amountOut, (trade.amountIn - tokenBFee), trade.path, trade.to, trade.deadline);\\n\\n        _updateLastPairsPrice(trade.path, lastLpsPrices);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay BNB amount as fee\\n     * @param trade Trade details\\n     */\\n    function swapExactTokensForTokensWithFeeAmount(Trade calldata trade) external payable isSwapRangeValid(trade.path) {\\n        uint256[] memory lastLpsPrices = _calcLpsLastPrice(trade.path);\\n\\n        (, uint256 dexFee, uint256 tokenAFee, uint256 tokenBFee) = getFees(trade.path, trade.amountIn, msg.sender);\\n        require(msg.value >= dexFee, \\\"SafeswapRouter: You must send enough BNB to cover fee\\\");\\n        _feeAmountBNB(address(this).balance);\\n\\n        if (tokenAFee > 0) {\\n            _claimTokenFee(trade.path[0], msg.sender, TransactionType.SELL, trade.amountIn, tokenAFee, false);\\n        }\\n\\n        if (tokenBFee > 0) {\\n            if (tokenAFee == 0) {\\n                TransferHelper.safeTransferFrom(trade.path[0], msg.sender, address(this), trade.amountIn);\\n                TransferHelper.safeApprove(trade.path[0], address(swapRouter), _getContractBalance(trade.path[0]));\\n            }\\n\\n            _swapExactTokensForTokens(\\n                _getContractBalance(trade.path[0]),\\n                trade.amountOut,\\n                trade.path,\\n                address(this),\\n                address(this),\\n                trade.deadline\\n            );\\n            _claimTokenFee(\\n                trade.path[trade.path.length - 1],\\n                trade.to,\\n                TransactionType.BUY,\\n                trade.amountOut,\\n                tokenBFee,\\n                true\\n            );\\n        } else {\\n            if (tokenAFee > 0) {\\n                _swapExactTokensForTokens(\\n                    _getContractBalance(trade.path[0]),\\n                    trade.amountOut,\\n                    trade.path,\\n                    address(this),\\n                    trade.to,\\n                    trade.deadline\\n                );\\n            } else {\\n                _swapExactTokensForTokens(\\n                    trade.amountIn,\\n                    trade.amountOut,\\n                    trade.path,\\n                    msg.sender,\\n                    trade.to,\\n                    trade.deadline\\n                );\\n            }\\n        }\\n\\n        _updateLastPairsPrice(trade.path, lastLpsPrices);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay BNB amount as fee\\n     * @param trade Trade details\\n     */\\n    function swapTokensForExactTokensWithFeeAmount(Trade calldata trade) external payable isSwapRangeValid(trade.path) {\\n        uint256[] memory lastLpsPrices = _calcLpsLastPrice(trade.path);\\n\\n        (, uint256 dexFee, uint256 tokenAFee, uint256 tokenBFee) = getFees(trade.path, trade.amountIn, msg.sender);\\n        require(msg.value >= dexFee, \\\"SafeswapRouter: You must send enough BNB to cover fee\\\");\\n        _feeAmountBNB(address(this).balance);\\n\\n        if (tokenAFee > 0) {\\n            _claimTokenFee(trade.path[0], msg.sender, TransactionType.SELL, trade.amountIn, tokenAFee, false);\\n        }\\n\\n        if (tokenBFee > 0) {\\n            if (tokenAFee == 0) {\\n                TransferHelper.safeTransferFrom(trade.path[0], msg.sender, address(this), trade.amountIn);\\n                TransferHelper.safeApprove(trade.path[0], address(swapRouter), _getContractBalance(trade.path[0]));\\n            }\\n            _swapTokensForExactTokens(\\n                trade.amountOut,\\n                _getContractBalance(trade.path[0]),\\n                trade.path,\\n                address(this),\\n                address(this),\\n                trade.deadline\\n            );\\n            _claimTokenFee(\\n                trade.path[trade.path.length - 1],\\n                trade.to,\\n                TransactionType.BUY,\\n                trade.amountOut,\\n                tokenBFee,\\n                true\\n            );\\n        } else {\\n            if (tokenAFee > 0) {\\n                _swapTokensForExactTokens(\\n                    trade.amountOut,\\n                    trade.amountIn,\\n                    trade.path,\\n                    msg.sender,\\n                    trade.to,\\n                    trade.deadline\\n                );\\n            } else {\\n                _swapTokensForExactTokens(\\n                    // _getAmountsOut(_getContractBalance(trade.path[0]), trade.path),\\n                    trade.amountOut,\\n                    _getContractBalance(trade.path[0]),\\n                    trade.path,\\n                    address(this),\\n                    trade.to,\\n                    trade.deadline\\n                );\\n            }\\n        }\\n\\n        _updateLastPairsPrice(trade.path, lastLpsPrices);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap BNB for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param to Address to receive tokens\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapExactETHForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapExactETHForTokensSupportingFeeOnTransferTokens{ value: amountIn }(\\n            amountOutMin,\\n            path,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap BNB for tokens\\n     * @param amountOut Amount of BNB out\\n     * @param amountInMax Max amount in\\n     * @param path Path for swap\\n     * @param to Address to receive BNB\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapETHForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapETHForExactTokens{ value: amountInMax }(amountOut, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for BNB\\n     * @param amountOut Amount of BNB out\\n     * @param amountInMax Max amount in\\n     * @param path Path for swap\\n     * @param from address to swap token from\\n     * @param to Address to receive BNB\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapTokensForExactETH(amountOut, amountInMax, path, from, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for BNB\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param from address to swap token from\\n     * @param to Address to receive tokens\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountIn,\\n            amountOutMin,\\n            path,\\n            from,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param from address to swap token from\\n     * @param to Address to receive tokens\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            amountIn,\\n            amountOutMin,\\n            path,\\n            from,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for tokens\\n     * @param amountOut Amount of tokens out\\n     * @param amountInMax Max amount in\\n     * @param path Path for swap\\n     * @param from address to swap token from\\n     * @param to Address to receive tokens\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapTokensForExactTokens(amountOut, amountInMax, path, from, to, deadline);\\n    }\\n\\n    function WETH() internal view returns (address) {\\n        return ISafeSwapRouter(swapRouter).WETH();\\n    }\\n\\n    function getReserves(address pair) public view returns (uint256 reserve0, uint256 reserve1) {\\n        if (pair == address(0)) {\\n            return (0, 0);\\n        }\\n        (reserve0, reserve1) = getReserves(pair, true);\\n    }\\n\\n    function getReserves(address pair, bool getByBalance) private view returns (uint256 reserve0, uint256 reserve1) {\\n        (reserve0, reserve1, ) = ISafeswapPair(pair).getReserves();\\n\\n        if (getByBalance) {\\n            (reserve0, reserve1) = (\\n                _getAddressBalance(ISafeswapPair(pair).token0(), pair),\\n                _getAddressBalance(ISafeswapPair(pair).token1(), pair)\\n            );\\n        }\\n    }\\n\\n    function _getAmountOut(\\n        uint256 _amountIn,\\n        address _tokenA,\\n        address _tokenB,\\n        bool _getByBalance\\n    ) internal view returns (uint256 _amountOut) {\\n        (uint256 reserveInput, uint256 reserveOutput) = getReserves(pairFor(_tokenA, _tokenB), _getByBalance);\\n        (address token0, ) = sortTokens(_tokenA, _tokenB);\\n        (reserveInput, reserveOutput) = _tokenA == token0\\n            ? (reserveInput, reserveOutput)\\n            : (reserveOutput, reserveInput);\\n\\n        try ISafeSwapRouter(swapRouter).getAmountOut(_amountIn, reserveInput, reserveOutput) returns (\\n            uint256 amountOut\\n        ) {\\n            _amountOut = amountOut;\\n        } catch {\\n            _amountOut = 0;\\n        }\\n    }\\n\\n    function _isNativeToken(address _token) internal view returns (bool isNative) {\\n        isNative = _token == WETH();\\n    }\\n\\n    function _getContractBalance(address _token) internal view returns (uint256) {\\n        return IERC20(_token).balanceOf(address(this));\\n    }\\n\\n    function _getAddressBalance(address _token, address _owner) internal view returns (uint256) {\\n        return IERC20(_token).balanceOf(address(_owner));\\n    }\\n\\n    function _mapPath(address _token0, address _token1) internal pure returns (address[] memory _path) {\\n        _path = new address[](2);\\n        _path[0] = _token0;\\n        _path[1] = _token1;\\n    }\\n\\n    function _getTokenDecimals(address _token) internal pure returns (uint256) {\\n        return IERC20(_token).decimals();\\n    }\\n\\n    function _getAmountsOut(uint256 _amountIn, address[] memory _path) internal view returns (uint256 amountOut) {\\n        try ISafeSwapRouter(swapRouter).getAmountsOut(_amountIn, _path) returns (uint256[] memory amounts) {\\n            amountOut = amounts[amounts.length - 1];\\n        } catch {\\n            amountOut = 0;\\n        }\\n    }\\n\\n    function _getLPPrice(address token0, address token1) internal view returns (uint256) {\\n        return\\n            _getAmountsOut(10**(_getTokenDecimals(token0) - LP_PRICE_BASE_AMOUNT), _mapPath(token0, token1)) *\\n            10**LP_PRICE_BASE_AMOUNT;\\n    }\\n\\n    /**\\n     * @notice returns sorted token addresses, used to handle return values from pairs sorted in this order\\n     * @param tokenA Address\\n     * @param tokenB Address\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"SafeswapRouter: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"SafeswapRouter: ZERO_ADDRESS\\\");\\n    }\\n\\n    function pairFor(address _token0, address _token1) internal view returns (address pair) {\\n        pair = ISafeswapFactory(ISafeSwapRouter(swapRouter).factory()).getPair(_token0, _token1);\\n        require(pair != address(0), \\\"SafeswapRouter: Cannot find pair\\\");\\n    }\\n\\n    function getAdaptiveLpPriceRange(address _pair)\\n        internal\\n        returns (\\n            uint256 upl,\\n            uint256 lpl,\\n            uint256 lastPrice\\n        )\\n    {\\n        if (adaptiveLpPriceRange[_pair].tokenAddress == address(0)) {\\n            _submitLpPriceRange(_pair, 150, 50);\\n        }\\n\\n        upl = adaptiveLpPriceRange[_pair].upl;\\n        lpl = adaptiveLpPriceRange[_pair].lpl;\\n        lastPrice = adaptiveLpPriceRange[_pair].lastPrice;\\n    }\\n\\n    function _syncPair(address _tokenA, address _tokenB) internal {\\n        address pair = pairFor(_tokenA, _tokenB);\\n        (uint256 reserveInput, uint256 reserveOutput) = getReserves(pair, false);\\n\\n        (address token0, ) = sortTokens(_tokenA, _tokenB);\\n        (reserveInput, reserveOutput) = _tokenA == token0\\n            ? (reserveInput, reserveOutput)\\n            : (reserveOutput, reserveInput);\\n\\n        if (\\n            _getAddressBalance(_tokenA, pair) - reserveInput > 0 ||\\n            _getAddressBalance(_tokenB, pair) - reserveOutput > 0\\n        ) {\\n            ISafeswapPair(pair).sync();\\n        }\\n    }\\n\\n    function _isLpPriceInRange(address _tokenA, address _tokenB) private returns (bool) {\\n        address pair = pairFor(_tokenA, _tokenB);\\n        (uint256 upl, uint256 lpl, uint256 lastPrice) = getAdaptiveLpPriceRange(pair);\\n\\n        if (adaptiveLpPriceRange[pair].isEnabled) {\\n            (address token0, address token1) = sortTokens(_tokenA, _tokenB);\\n            uint256 decimals = _getTokenDecimals(token0);\\n            decimals = decimals + _getTokenDecimals(token1);\\n            lastPrice = _tokenA == token0 ? lastPrice : 10**decimals / lastPrice;\\n\\n            uint256 amountIn = 10**(_getTokenDecimals(_tokenA) - LP_PRICE_BASE_AMOUNT);\\n            uint256 numerator = amountIn * _getAddressBalance(_tokenB, pair);\\n            uint256 denominator = _getAddressBalance(_tokenA, pair) + amountIn;\\n            uint256 currentPrice = (numerator / denominator) * 10**LP_PRICE_BASE_AMOUNT;\\n\\n            if (currentPrice > ((upl * lastPrice) / 100) || currentPrice < ((lpl * lastPrice) / 100)) return false;\\n        }\\n\\n        _syncPair(_tokenA, _tokenB);\\n\\n        return true;\\n    }\\n\\n    function _isLpsPriceInRange(address[] calldata _path) private returns (bool isInRange) {\\n        if (isARCBEnabled) {\\n            for (uint256 i; i < _path.length - 1; i++) {\\n                // bool isLpPriceInRange = _isLpPriceInRange(_path[i], _path[i + 1]);\\n                if (!_isLpPriceInRange(_path[i], _path[i + 1])) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _calcLpsLastPrice(address[] calldata _path) internal view returns (uint256[] memory amounts) {\\n        amounts = new uint256[](_path.length - 1);\\n        for (uint256 i; i < _path.length - 1; i++) {\\n            amounts[i] = _getLPPrice(_path[i], _path[i + 1]);\\n        }\\n    }\\n\\n    // /**\\n    //  * @notice Get swap fee based on the amounts\\n    //  * @param amountIn Amount in to calculate fee\\n    //  * @param tokenA token1 for swap\\n    //  * @param tokenB token2 for swap\\n    //  * @return _fee the tokens fee amount value\\n    //  */\\n    function getDexSwapFee(\\n        uint256 amountIn,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 _fee) {\\n        uint256 amountOut;\\n\\n        if (!_isNativeToken(tokenA)) {\\n            amountOut = _getAmountOut(amountIn, tokenA, WETH(), true);\\n            if (amountOut == 0) {\\n                amountOut = _getAmountOut(amountIn, tokenA, tokenB, true);\\n                amountOut = _getAmountOut(amountOut, tokenB, WETH(), true);\\n            }\\n\\n            _fee = (amountOut * feePercent) / percent;\\n        }\\n\\n        if (_isNativeToken(tokenA) || amountOut == 0) {\\n            int256 decimals = 18 - int8(IERC20(tokenA).decimals());\\n            if (decimals < 0) {\\n                decimals = decimals * -1;\\n                _fee = ((amountIn * feePercent) / percent) / 10**uint256(decimals);\\n            } else {\\n                _fee = ((amountIn * feePercent) / percent) * 10**uint256(decimals);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get token swap fee for single token\\n     * @param _amount Amount to calculate fee\\n     * @param _transactionType BUY or SELL\\n     * @param _token token addresses\\n     * @param _tokenADecimals decimals for tokenA\\n     * @param _tokenBDecimals decimals for tokenB\\n     * @return _fee token swap fees amount\\n     */\\n    function getTokenSwapFee(\\n        uint256 _amount,\\n        TransactionType _transactionType,\\n        address _token,\\n        uint256 _tokenADecimals,\\n        uint256 _tokenBDecimals\\n    ) internal view returns (uint256 _fee) {\\n        if (\\n            !_isNativeToken(_token) &&\\n            tokensFeeList[_token][_transactionType].tokenInfo.isEnabled &&\\n            tokensFeeList[_token][_transactionType].tokenInfo.feePercentage > 0 &&\\n            !whitelistFfsFee[msg.sender]\\n        ) {\\n            int256 decimals = int256(_tokenADecimals) - int256(_tokenBDecimals);\\n\\n            if (decimals < 0) {\\n                decimals = decimals * -1;\\n                _fee = (((_amount * tokensFeeList[_token][_transactionType].tokenInfo.feePercentage) / percent) /\\n                    10**uint256(decimals));\\n            } else {\\n                _fee =\\n                    ((_amount * tokensFeeList[_token][_transactionType].tokenInfo.feePercentage) / percent) *\\n                    10**uint256(decimals);\\n            }\\n        }\\n    }\\n\\n    function getFees(\\n        address[] calldata _path,\\n        uint256 _amountIn,\\n        address _address\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 totalBNBFee,\\n            uint256 dexFee,\\n            uint256 tokenAFee,\\n            uint256 tokenBFee\\n        )\\n    {\\n        if (whitelistFfsFee[_address]) {\\n            return (0, 0, 0, 0);\\n        }\\n\\n        uint256 length = _path.length - 1;\\n        (address _tokenInput, address _tokenOutput) = (_path[0], _path[length]);\\n\\n        uint256 amountInput = _amountIn;\\n\\n        for (uint256 i; i < length; i++) {\\n            (address input, address output) = (_path[i], _path[i + 1]);\\n\\n            dexFee += getDexSwapFee(amountInput, input, output);\\n\\n            uint256 feeA = getTokenSwapFee(\\n                amountInput,\\n                TransactionType.SELL,\\n                input,\\n                _getTokenDecimals(_tokenInput),\\n                _getTokenDecimals(input)\\n            );\\n\\n            uint256 amountOutput = _getAmountOut(amountInput, input, output, true);\\n\\n            amountInput = amountOutput;\\n\\n            uint256 feeB = getTokenSwapFee(\\n                amountOutput,\\n                TransactionType.BUY,\\n                output,\\n                _getTokenDecimals(_tokenOutput),\\n                _getTokenDecimals(output)\\n            );\\n\\n            if (_isNativeToken(_tokenInput)) {\\n                tokenAFee += feeA;\\n                tokenBFee += _getAmountOut(feeB, output, WETH(), true);\\n            } else {\\n                tokenAFee += feeA;\\n                tokenBFee += feeB;\\n            }\\n        }\\n\\n        if (_isNativeToken(_tokenInput)) {\\n            totalBNBFee = tokenAFee + tokenBFee + dexFee;\\n        } else {\\n            if (_isNativeToken(_tokenOutput)) {\\n                totalBNBFee = _getAmountOut(tokenAFee, _tokenInput, WETH(), true) + tokenBFee + dexFee;\\n            } else {\\n                totalBNBFee =\\n                    _getAmountOut(tokenAFee, _tokenInput, WETH(), true) +\\n                    _getAmountOut(tokenBFee, _tokenOutput, WETH(), true) +\\n                    dexFee;\\n            }\\n        }\\n    }\\n\\n    function _submitLpPriceRange(\\n        address _pair,\\n        uint256 _upl,\\n        uint256 _lpl\\n    ) private isValidAdd(_pair) {\\n        uint256 lastPrice = _getLPPrice(ISafeswapPair(_pair).token0(), ISafeswapPair(_pair).token1());\\n\\n        AdaptiveLpPriceRange storage _adaptiveLpPriceRange = adaptiveLpPriceRange[_pair];\\n        _adaptiveLpPriceRange.lastPrice = lastPrice;\\n        _adaptiveLpPriceRange.tokenAddress = _pair;\\n        _adaptiveLpPriceRange.upl = _upl;\\n        _adaptiveLpPriceRange.lpl = _lpl;\\n        _adaptiveLpPriceRange.isEnabled = true;\\n\\n        emit SubmitLpPriceRange(_pair, _upl, _lpl, lastPrice);\\n    }\\n\\n    function _updateLastPairPrice(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _updatedPrice\\n    ) private {\\n        address pair = pairFor(_tokenA, _tokenB);\\n        (address token0, address token1) = sortTokens(_tokenA, _tokenB);\\n        // uint256 decimals = _getTokenDecimals(token0);\\n        // decimals = decimals + _getTokenDecimals(token1);\\n        _updatedPrice = _tokenA == token0\\n            ? _updatedPrice\\n            : 10**(_getTokenDecimals(token0) + _getTokenDecimals(token1)) / _updatedPrice;\\n        adaptiveLpPriceRange[pair].lastPrice = _updatedPrice;\\n    }\\n\\n    function _updateLastPairsPrice(address[] memory _path, uint256[] memory _lastPrices) private {\\n        for (uint256 i; i < _path.length - 1; i++) {\\n            _updateLastPairPrice(_path[i], _path[i + 1], _lastPrices[i]);\\n        }\\n    }\\n\\n    function _distributeTokenFee(\\n        address _token,\\n        TransactionType _transactionType,\\n        uint256 _totalFeeAmount\\n    ) private {\\n        uint256 feeAmount;\\n        uint256 claimedAmount;\\n\\n        if (tokensFeeList[_token][_transactionType].tokenInfo.isEnabled && _totalFeeAmount > 0) {\\n            uint256 length = tokensFeeList[_token][_transactionType].singleSwapFees.length;\\n\\n            for (uint256 i; i < length; i++) {\\n                if (\\n                    tokensFeeList[_token][_transactionType].singleSwapFees[i].isEnabled &&\\n                    tokensFeeList[_token][_transactionType].singleSwapFees[i].percentage > 0\\n                ) {\\n                    address beneficiary = tokensFeeList[_token][_transactionType].singleSwapFees[i].beneficiary;\\n                    address assetOut = tokensFeeList[_token][_transactionType].singleSwapFees[i].assetOut;\\n                    if (i == (length - 1)) {\\n                        feeAmount = _totalFeeAmount - claimedAmount;\\n                    } else {\\n                        uint256 swapKindPercentage = (tokensFeeList[_token][_transactionType]\\n                            .singleSwapFees[i]\\n                            .percentage * percent) / tokensFeeList[_token][_transactionType].tokenInfo.feePercentage;\\n\\n                        feeAmount = ((_totalFeeAmount * swapKindPercentage) / percent);\\n                        claimedAmount = claimedAmount + feeAmount;\\n                    }\\n\\n                    if (tokensFeeList[_token][_transactionType].singleSwapFees[i].swapKind == SwapKind.SEND_ONLY) {\\n                        TransferHelper.safeTransferETH(beneficiary, feeAmount);\\n                    } else {\\n                        _swapExactETHForTokens(\\n                            feeAmount,\\n                            0,\\n                            _mapPath(WETH(), assetOut),\\n                            beneficiary,\\n                            block.timestamp + 20\\n                        );\\n                    }\\n\\n                    emit TokenFeeSwapped(beneficiary, _token, assetOut, feeAmount);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _claimTokenFee(\\n        address _token,\\n        address _address,\\n        TransactionType _transactionType,\\n        uint256 _amountIn,\\n        uint256 _totalFeeAmount,\\n        bool _transferBalance\\n    ) private {\\n        if (tokensFeeList[_token][_transactionType].tokenInfo.isEnabled && _totalFeeAmount > 0) {\\n            if (!_transferBalance) {\\n                TransferHelper.safeTransferFrom(_token, _address, address(this), _amountIn);\\n            }\\n\\n            _feeWithTokens(_totalFeeAmount, _token, false);\\n\\n            _distributeTokenFee(_token, _transactionType, address(this).balance);\\n\\n            if (_transferBalance) {\\n                _transferContractBalance(_token, _address);\\n            } else {\\n                TransferHelper.safeApprove(_token, address(swapRouter), _getContractBalance(_token));\\n            }\\n        }\\n    }\\n\\n    function _transferContractBalance(address _token, address _to) internal {\\n        TransferHelper.safeTransfer(_token, payable(_to), _getContractBalance(_token));\\n    }\\n\\n    /**\\n     * @notice Fee specific amount of BNB\\n     * @param feeAmount Amount to fee\\n     */\\n    function _feeAmountBNB(uint256 feeAmount) internal {\\n        if (feeAmount > 0) {\\n            feeJar.fee{ value: feeAmount }();\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert a token balance into BNB and then fee\\n     * @param _fee Amount to swap\\n     * @param _payInToken token address would be used to pay with\\n     * @param _claimFee indicate to transfer fee or not\\n     */\\n    function _feeWithTokens(\\n        uint256 _fee,\\n        address _payInToken,\\n        bool _claimFee\\n    ) internal {\\n        TransferHelper.safeApprove(_payInToken, address(swapRouter), _fee);\\n\\n        _swapExactTokensForETH(_fee, 0, _mapPath(_payInToken, WETH()), address(this), address(this), block.timestamp);\\n        if (_claimFee) {\\n            _feeAmountBNB(address(this).balance);\\n        }\\n    }\\n}\",\"keccak256\":\"0x922699a9c8fb64ce5903ec2ab477690db48b2836178165d2fd0fb8194beb7548\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeJar.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IFeeJar {\\n    function fee() external payable;\\n}\\n\",\"keccak256\":\"0x976e76c8dcb84f2651736b1f0a9fb5349dbeb15e98dc1c7599250254094ce48b\",\"license\":\"MIT\"},\"contracts/interfaces/ISafeSwapRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\nimport \\\"./ISafeswapRouter01.sol\\\";\\n\\ninterface ISafeSwapRouter is ISafeswapRouter01 {\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x63ecfa60091944e8395808ee156cea973829410d05026a590bc339241c86c0b6\",\"license\":\"MIT\"},\"contracts/interfaces/ISafeswapRouter01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface ISafeswapRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external view returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external view returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xb366e1a3bdf247df2fa758e261f40b892ffa76873a22f279047eedf79dea3d9a\"},\"contracts/libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.11;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            _initializing || _isConstructor() || !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc2a0f06b1a46db8d1476fb6c1c3bfe31935e17fe4f525869a6b54bb821788e80\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615f3780620000216000396000f3fe60806040526004361061019f5760003560e01c8062874030146101a85780630ea9c040146101d357806312f788a4146101e657806318e75a5b146102065780631db33ab9146102335780633744d9d4146102535780633b7766da146102735780633e99c1e4146102935780634535e34c146102c85780634c0a5df1146102fb5780635d90f9ec1461033b5780635ffde08f1461035b5780636b7b71021461036e5780636fbdb68c1461038e578063704b6c02146103a357806370ba1113146103c357806370eee31d146103e757806372d0498114610407578063740f993f1461041a5780637ce3489b146104445780637fd6f15c1461046457806381bdf4f21461047a5780638402c2881461049a5780638a879cab146105025780639166aecd146105155780639b8a9b6814610528578063a351408714610548578063bca31f981461055b578063c0d786551461057b578063c31c9c071461059b578063d0bfbe97146105bb578063d0f1aed7146105db578063d76d59fc146105fb578063eb990c591461062b578063f2e50a1e1461064b578063f851a4401461066b57005b366101a657005b005b3480156101b457600080fd5b506101bd61068b565b6040516101ca9190615243565b60405180910390f35b6101a66101e136600461526e565b6106ed565b3480156101f257600080fd5b506101a66102013660046152d3565b610907565b34801561021257600080fd5b50610226610221366004615322565b610f74565b6040516101ca9190615391565b34801561023f57600080fd5b506101a661024e366004615322565b61115e565b34801561025f57600080fd5b506101a661026e36600461546e565b611313565b34801561027f57600080fd5b506101a661028e3660046154ac565b6117bf565b34801561029f57600080fd5b506102b36102ae3660046154f2565b611e43565b604080519283526020830191909152016101ca565b3480156102d457600080fd5b506000546102ee906201000090046001600160a01b031681565b6040516101ca919061550f565b34801561030757600080fd5b5061031b610316366004615523565b611e74565b6040805194855260208501939093529183015260608201526080016101ca565b34801561034757600080fd5b506101a66103563660046154f2565b6120eb565b6101a661036936600461526e565b612186565b34801561037a57600080fd5b506101a66103893660046154f2565b612449565b34801561039a57600080fd5b506101a66125e8565b3480156103af57600080fd5b506101a66103be3660046154f2565b61263d565b3480156103cf57600080fd5b506103d960035481565b6040519081526020016101ca565b3480156103f357600080fd5b506101a66104023660046155b0565b612667565b6101a66104153660046155e5565b61267f565b34801561042657600080fd5b506009546104349060ff1681565b60405190151581526020016101ca565b34801561045057600080fd5b506101a661045f366004615629565b6127a2565b34801561047057600080fd5b506103d960045481565b34801561048657600080fd5b506101a66104953660046154f2565b6127af565b3480156104a657600080fd5b506104ba6104b53660046154f2565b612809565b6040516101ca919081516001600160a01b0316815260208083015190820152604080830151908201526060808301519082015260809182015115159181019190915260a00190565b6101a661051036600461526e565b6128a6565b6101a661052336600461526e565b6129e3565b34801561053457600080fd5b506101a6610543366004615629565b612b32565b6101a66105563660046155e5565b612b3f565b34801561056757600080fd5b506101a66105763660046154f2565b612c3e565b34801561058757600080fd5b506101a66105963660046154f2565b612c6a565b3480156105a757600080fd5b506001546102ee906001600160a01b031681565b3480156105c757600080fd5b506101a66105d63660046154f2565b612c94565b3480156105e757600080fd5b506101a66105f63660046155b0565b612cbd565b34801561060757600080fd5b506104346106163660046154f2565b60056020526000908152604090205460ff1681565b34801561063757600080fd5b506101a6610646366004615642565b612d38565b34801561065757600080fd5b506101a6610666366004615322565b612e5b565b34801561067757600080fd5b506002546102ee906001600160a01b031681565b606060078054806020026020016040519081016040528092919081815260200182805480156106e357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106c5575b5050505050905090565b6106fa6040820182615688565b61070482826130de565b600061071b6107166040860186615688565b61314e565b90506000806107386107306040880188615688565b883533611e74565b509250925050813410156107675760405162461bcd60e51b815260040161075e906156d1565b60405180910390fd5b61077047613244565b801561085b576107b86107866040880188615688565b600081811061079757610797615714565b90506020020160208101906107ac91906154f2565b336000893585826132b1565b6108566107f66107cb6040890189615688565b60008181106107dc576107dc615714565b90506020020160208101906107f191906154f2565b613369565b602088013561080860408a018a615688565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525030925061084c91505060808c0160608d016154f2565b8b608001356133d9565b6108b6565b6108b68635602088013561087260408a018a615688565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525033925061084c91505060808c0160608d016154f2565b6108ff6108c66040880188615688565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525087925061344d915050565b505050505050565b61090f6134d9565b6001600160a01b03841660009081526006602052604081209084600181111561093a5761093a615357565b600181111561094b5761094b615357565b815260208101919091526040016000205461010090046001600160a01b031661097381613535565b6001600160a01b03851660009081526006602052604081209085600181111561099e5761099e615357565b60018111156109af576109af615357565b815260200190815260200160002060030182815481106109d1576109d1615714565b600091825260209091206003600490920201015460ff16610a4d5760405162461bcd60e51b815260206004820152603060248201527f53616665537761705472616465526f757465723a20546f6b656e27732073776160448201526f7020666565206e6f742061637469766560801b606482015260840161075e565b6001600160a01b038516600090815260066020526040812090856001811115610a7857610a78615357565b6001811115610a8957610a89615357565b81526020810191909152604001600020600301548210610abb5760405162461bcd60e51b815260040161075e9061572a565b600454600354610acb9190615782565b6001600160a01b038616600090815260066020526040812090866001811115610af657610af6615357565b6001811115610b0757610b07615357565b81526020019081526020016000206003018381548110610b2957610b29615714565b906000526020600020906004020160020154846060013560066000896001600160a01b03166001600160a01b031681526020019081526020016000206000886001811115610b7957610b79615357565b6001811115610b8a57610b8a615357565b815260200190815260200160002060000160010154610ba99190615799565b610bb39190615782565b1115610bd15760405162461bcd60e51b815260040161075e906157b1565b6001600160a01b038516600090815260066020526040812090856001811115610bfc57610bfc615357565b6001811115610c0d57610c0d615357565b81526020019081526020016000206003018281548110610c2f57610c2f615714565b90600052602060002090600402016002015460066000876001600160a01b03166001600160a01b031681526020019081526020016000206000866001811115610c7a57610c7a615357565b6001811115610c8b57610c8b615357565b81526020019081526020016000206000016001016000828254610cae9190615782565b90915550506040805160a0810190915280610ccc60208601866157f9565b6002811115610cdd57610cdd615357565b8152602001846020016020810190610cf591906154f2565b6001600160a01b03168152602001610d1360608601604087016154f2565b6001600160a01b0316815260608501356020820152604001610d3b60a0860160808701615828565b151590526001600160a01b038616600090815260066020526040812090866001811115610d6a57610d6a615357565b6001811115610d7b57610d7b615357565b81526020019081526020016000206003018381548110610d9d57610d9d615714565b6000918252602090912082516004909202018054909190829060ff19166001836002811115610dce57610dce615357565b02179055506020828101518254610100600160a81b0319166101006001600160a01b0392831602178355604080850151600180860180546001600160a01b0319169285169290921790915560608087015160028701556080909601516003909501805460ff1916951515959095179094559089166000908152600690925281209286013592918790811115610e6557610e65615357565b6001811115610e7657610e76615357565b81526020019081526020016000206000016001016000828254610e999190615799565b90915550610eaf905060608401604085016154f2565b6001600160a01b0316610ec860408501602086016154f2565b6001600160a01b03878116600081815260066020526040812093909216929091600080516020615e82833981519152918991826001811115610f0c57610f0c615357565b6001811115610f1d57610f1d615357565b81526020808201929092526040016000206001015490610f3f908a018a6157f9565b60608a0135610f5460a08c0160808d01615828565b604051610f65959493929190615845565b60405180910390a45050505050565b6040805160e081018252600091810182815260608083018490526080830184905260a0830184905260c0830193909352815260208101919091526001600160a01b038316600090815260066020526040812090836001811115610fd957610fd9615357565b6001811115610fea57610fea615357565b815260208101919091526040908101600020815160e081018352815490928391908201908390829060ff16600181111561102657611026615357565b600181111561103757611037615357565b815281546001600160a01b036101009182900416602080840191909152600184015460408085019190915260029094015460ff80821615156060860152929004909116151560809092019190915291835260038401805482518185028101850190935280835293830193919290919060009084015b8282101561114d576000848152602090206040805160a08101909152600484029091018054829060ff1660028111156110e7576110e7615357565b60028111156110f8576110f8615357565b815281546001600160a01b03610100909104811660208084019190915260018085015490921660408401526002840154606084015260039093015460ff161515608090920191909152918352920191016110ac565b505050508152505090505b92915050565b6111666134d9565b6001600160a01b03821660009081526006602052604081209082600181111561119157611191615357565b60018111156111a2576111a2615357565b8152602081019190915260400160002060020154610100900460ff166111c78161359d565b6001600160a01b0383166000908152600660205260408120908360018111156111f2576111f2615357565b600181111561120357611203615357565b815260208082019290925260409081016000908120600201546001600160a01b0387168252600690935290812060ff90921615919084600181111561124a5761124a615357565b600181111561125b5761125b615357565b815260208082019290925260409081016000908120600201805460ff1916941515949094179093556001600160a01b0386168084526006909252822090917f95437ba9f2848cd22a891a779e6179145fcce51375c56a427807e653c77b945f9185918260018111156112cf576112cf615357565b60018111156112e0576112e0615357565b815260208101919091526040908101600020600201549051611306929160ff169061587e565b60405180910390a2505050565b61131b6134d9565b6001600160a01b03831660009081526006602052604081209083600181111561134657611346615357565b600181111561135757611357615357565b8152602081019190915260400160002060020154610100900460ff1661137c8161359d565b6001600160a01b0384166000908152600660205260408120908460018111156113a7576113a7615357565b60018111156113b8576113b8615357565b815260208101919091526040016000206003015482106113ea5760405162461bcd60e51b815260040161075e9061572a565b6001600160a01b03841660009081526006602052604081209084600181111561141557611415615357565b600181111561142657611426615357565b8152602001908152602001600020600301828154811061144857611448615714565b600091825260209091206003600490920201015460ff161561154c576001600160a01b03841660009081526006602052604081209084600181111561148f5761148f615357565b60018111156114a0576114a0615357565b815260200190815260200160002060030182815481106114c2576114c2615714565b90600052602060002090600402016002015460066000866001600160a01b03166001600160a01b03168152602001908152602001600020600085600181111561150d5761150d615357565b600181111561151e5761151e615357565b815260200190815260200160002060000160010160008282546115419190615782565b9091555061162f9050565b6001600160a01b03841660009081526006602052604081209084600181111561157757611577615357565b600181111561158857611588615357565b815260200190815260200160002060030182815481106115aa576115aa615714565b90600052602060002090600402016002015460066000866001600160a01b03166001600160a01b0316815260200190815260200160002060008560018111156115f5576115f5615357565b600181111561160657611606615357565b815260200190815260200160002060000160010160008282546116299190615799565b90915550505b6001600160a01b03841660009081526006602052604081209084600181111561165a5761165a615357565b600181111561166b5761166b615357565b8152602001908152602001600020600301828154811061168d5761168d615714565b60009182526020808320600360049093020191909101546001600160a01b038716835260069091526040822060ff90911615918560018111156116d2576116d2615357565b60018111156116e3576116e3615357565b8152602001908152602001600020600301838154811061170557611705615714565b60009182526020808320600492909202909101600301805460ff1916931515939093179092556001600160a01b0386168082526006909252604081208492917f196ff3554753d125f87be48683fa3afa6021b058731ab355eea0dbfd5e99b04691879182600181111561177a5761177a615357565b600181111561178b5761178b615357565b8152602081019190915260409081016000206002015490516117b1929160ff169061587e565b60405180910390a350505050565b6117c76134d9565b6001600160a01b0383166000908152600660205260408120818460018111156117f2576117f2615357565b600181111561180357611803615357565b815260200190815260200160002060000160010154905060045460035461182a9190615782565b611838606084013583615799565b11156118565760405162461bcd60e51b815260040161075e906157b1565b6001600160a01b03841660009081526006602052604081208185600181111561188157611881615357565b600181111561189257611892615357565b815260208101919091526040016000205461010090046001600160a01b03161415611bcf576001600160a01b03841660009081526006602090815260408083206001845290915290206002015460ff1615801561191657506001600160a01b038416600090815260066020908152604080832083805290915290206002015460ff16155b1561196757600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b0386161790555b6001600160a01b03841660009081526006602052604081208185600181111561199257611992615357565b60018111156119a3576119a3615357565b81526020019081526020016000209050806003016040518060a001604052808560000160208101906119d591906157f9565b60028111156119e6576119e6615357565b81526020018560200160208101906119fe91906154f2565b6001600160a01b03168152602001611a1c60608701604088016154f2565b6001600160a01b0316815260608601356020820152604001611a4460a0870160808801615828565b15159052815460018181018455600093845260209093208251600490920201805492939092839160ff1990911690836002811115611a8457611a84615357565b021790555060208201518154610100600160a81b0319166101006001600160a01b0392831602178255604080840151600180850180546001600160a01b0319169290941691909117909255606084015160028401556080909301516003909201805460ff191692151592909217909155815160a0810190925281908690811115611b1057611b10615357565b81526001600160a01b0387166020820152604001611b32606086013585615799565b81526001602082018190526000604090920191909152815183548492839160ff1916908381811115611b6657611b66615357565b021790555060208201518154610100600160a81b0319166101006001600160a01b0390921682021782556040830151600183015560608301516002909201805460809094015161ffff1990941692151561ff001916929092179215150291909117905550611dba565b6001600160a01b038416600090815260066020526040812090846001811115611bfa57611bfa615357565b6001811115611c0b57611c0b615357565b81526020019081526020016000206003016040518060a00160405280846000016020810190611c3a91906157f9565b6002811115611c4b57611c4b615357565b8152602001846020016020810190611c6391906154f2565b6001600160a01b03168152602001611c8160608601604087016154f2565b6001600160a01b0316815260608501356020820152604001611ca960a0860160808701615828565b15159052815460018181018455600093845260209093208251600490920201805492939092839160ff1990911690836002811115611ce957611ce9615357565b02179055506020828101518254610100600160a81b0319166101006001600160a01b0392831602178355604080850151600180860180546001600160a01b0319169285169290921790915560608087015160028701556080909601516003909501805460ff1916951515959095179094559088166000908152600690925281209285013592918690811115611d8057611d80615357565b6001811115611d9157611d91615357565b81526020019081526020016000206000016001016000828254611db49190615799565b90915550505b611dca60608301604084016154f2565b6001600160a01b0316611de360408401602085016154f2565b6001600160a01b03908116908616600080516020615e828339815191528685611e0f60208901896157f9565b6060890135611e2460a08b0160808c01615828565b604051611e35959493929190615845565b60405180910390a450505050565b6000806001600160a01b038316611e5f57506000928392509050565b611e6a8360016135fe565b9094909350915050565b6001600160a01b03811660009081526005602052604081205481908190819060ff1615611eac575060009250829150819050806120e0565b6000611eb9600189615782565b90506000808a8a6000818110611ed157611ed1615714565b9050602002016020810190611ee691906154f2565b8b8b85818110611ef857611ef8615714565b9050602002016020810190611f0d91906154f2565b90925090508860005b84811015612057576000808e8e84818110611f3357611f33615714565b9050602002016020810190611f4891906154f2565b8f8f611f55866001615799565b818110611f6457611f64615714565b9050602002016020810190611f7991906154f2565b91509150611f8884838361375d565b611f92908b615799565b99506000611fb485600085611fa68b6138d1565b611faf886138d1565b61393e565b90506000611fc58685856001613b52565b90508095506000611fe582600186611fdc8c6138d1565b611faf896138d1565b9050611ff089613c32565b1561202657611fff838d615799565b9b50612015818561200e613c57565b6001613b52565b61201f908c615799565b9a5061203f565b612030838d615799565b9b5061203c818c615799565b9a505b5050505050808061204f9061589b565b915050611f16565b5061206183613c32565b1561208257866120718688615799565b61207b9190615799565b97506120db565b61208b82613c32565b156120a957868561209f888661200e613c57565b6120719190615799565b866120b7868461200e613c57565b6120c4888661200e613c57565b6120ce9190615799565b6120d89190615799565b97505b505050505b945094509450949050565b6120f36134d9565b6001600160a01b038082166000908152600860205260409020541661211781613535565b6001600160a01b03821660008181526008602052604090819020600401805460ff19811660ff9182161590811790925591517f8061fe6fb3a75098cc73fd05601be350dcafdb5bf12ba660fa055dbbf719d09c9261217a92161515815260200190565b60405180910390a25050565b6121936040820182615688565b61219d82826130de565b60006121af6107166040860186615688565b9050600080806121cd6121c56040890189615688565b893533611e74565b93509350935050823410156121f45760405162461bcd60e51b815260040161075e906156d1565b6121fd47613244565b8115612245576122456122136040890189615688565b600081811061222457612224615714565b905060200201602081019061223991906154f2565b3360008a3586826132b1565b801561238957816122e65761228f6122606040890189615688565b600081811061227157612271615714565b905060200201602081019061228691906154f2565b33308a35613cca565b6122e661229f6040890189615688565b60008181106122b0576122b0615714565b90506020020160208101906122c591906154f2565b6001546001600160a01b03166122e16107cb60408c018c615688565b613e05565b61231760208801356122fe6107cb60408b018b615688565b61230b60408b018b615688565b30308d60800135613f34565b6123846123276040890189615688565b600161233660408c018c615688565b612341929150615782565b81811061235057612350615714565b905060200201602081019061236591906154f2565b61237560808a0160608b016154f2565b60018a602001358560016132b1565b6123f7565b81156123c157612384602088013588356123a660408b018b615688565b336123b760808e0160608f016154f2565b8d60800135613f34565b6123f760208801356123d96107cb60408b018b615688565b6123e660408b018b615688565b306123b760808e0160608f016154f2565b6124406124076040890189615688565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525088925061344d915050565b50505050505050565b6124516134d9565b6001600160a01b038082166000908152600860205260409020541661247581613535565b816001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156124b057600080fd5b505af11580156124c4573d6000803e3d6000fd5b50505050612594826001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252d91906158b6565b836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561256b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258f91906158b6565b613fc1565b6001600160a01b038316600081815260086020908152604091829020600181018590556003810154600290910154925194855293919291600080516020615ec2833981519152910160405180910390a45050565b6125f06134d9565b6009805460ff8082161560ff1990921682179092556040519116151581527f1af25497212a4befd5c7af8d815c7f905f1aa0722d7f881bdd0d29b14e971def9060200160405180910390a1565b6126456134d9565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61266f6134d9565b61267a838383614012565b505050565b61268c6040830183615688565b61269682826130de565b60006126a86107166040870187615688565b90506000806126bd6121c56040890189615688565b9350509250508186101580156126dd57506126d9828835615799565b3410155b6126f95760405162461bcd60e51b815260040161075e906158d3565b61274f6127096040890189615688565b600161271860408c018c615688565b612723929150615782565b81811061273257612732615714565b905060200201602081019061274791906154f2565b600183614147565b61275882613244565b612792602088013561276b838a35615782565b61277860408b018b615688565b61278860808d0160608e016154f2565b8c60800135614652565b6124406108c66040890189615688565b6127aa6134d9565b600455565b6127b76134d9565b6000805462010000600160b01b031916620100006001600160a01b03841690810291909117825560405190917f9fbc3107cd5de0b63e7e8ee125c41156ece8511d0030e7d3e7b9174d6b9cf2c391a250565b6128466040518060a0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000151581525090565b506001600160a01b03908116600090815260086020908152604091829020825160a08101845281549094168452600181015491840191909152600281015491830191909152600381015460608301526004015460ff161515608082015290565b6128b36040820182615688565b6128bd82826130de565b60006128cf6107166040860186615688565b90506000806128e46107306040880188615688565b5092509250508134101561290a5760405162461bcd60e51b815260040161075e906156d1565b61291347613244565b80156129bb576129296107866040880188615688565b61085661298361293f6107cb60408a018a615688565b61294c60408a018a615688565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506146d392505050565b6129936107cb60408a018a615688565b6129a060408a018a615688565b306129b160808d0160608e016154f2565b8c60800135614780565b6108b6602087013587356129d260408a018a615688565b336129b160808d0160608e016154f2565b6129f06040820182615688565b6129fa82826130de565b6000612a0c6107166040860186615688565b905060008080612a226121c56040890189615688565b9350935093505082341015612a495760405162461bcd60e51b815260040161075e906156d1565b612a5247613244565b8115612a6857612a686122136040890189615688565b8015612ac45781612a9357612a836122606040890189615688565b612a9361229f6040890189615688565b612317612aa66107cb60408a018a615688565b6020890135612ab860408b018b615688565b30308d608001356147bc565b8115612b0a57612384612add6107cb60408a018a615688565b6020890135612aef60408b018b615688565b30612b0060808e0160608f016154f2565b8d608001356147bc565b6123f787356020890135612b2160408b018b615688565b33612b0060808e0160608f016154f2565b612b3a6134d9565b600355565b612b4c6040830183615688565b612b5682826130de565b6000612b686107166040870187615688565b9050600080612b7d6121c56040890189615688565b935050925050818610158015612b9d5750612b99828835615799565b3410155b612bb95760405162461bcd60e51b815260040161075e906158d3565b612bc96127096040890189615688565b612bd282613244565b612792612be0828935615782565b6020890135612bf260408b018b615688565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612c349250505060808c0160608d016154f2565b8b60800135614833565b612c466134d9565b6001600160a01b03166000908152600560205260409020805460ff19166001179055565b612c726134d9565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b612c9c6134d9565b6001600160a01b03166000908152600560205260409020805460ff19169055565b612cc56134d9565b6001600160a01b0380841660009081526008602052604090205416612ce981613535565b6001600160a01b0384166000818152600860209081526040918290206003810186905560028101879055600101549151918252849286929091600080516020615ec28339815191529101611e35565b600054610100900460ff1680612d4d5750303b155b80612d5b575060005460ff16155b612dbe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161075e565b600054610100900460ff16158015612de0576000805461ffff19166101011790555b600080546001600160a01b03808816620100000262010000600160b01b031990921691909117909155600180549186166001600160a01b0319928316178155600280549092163317909155600484905560038390556009805460ff191690911790558015612e54576000805461ff00191690555b5050505050565b612e636134d9565b6001600160a01b038216600090815260066020526040812090826001811115612e8e57612e8e615357565b6001811115612e9f57612e9f615357565b815260208101919091526040016000205461010090046001600160a01b0316612ec781613535565b6001600160a01b038316600090815260066020526040812090836001811115612ef257612ef2615357565b6001811115612f0357612f03615357565b815260200190815260200160002060000160020160019054906101000a900460ff161560066000856001600160a01b03166001600160a01b031681526020019081526020016000206000846001811115612f5f57612f5f615357565b6001811115612f7057612f70615357565b81526020808201929092526040908101600090812060020180549415156101000261ff0019909516949094179093556001600160a01b03861683526006909152812090836001811115612fc557612fc5615357565b6001811115612fd657612fd6615357565b815260208082019290925260409081016000908120600201546001600160a01b0387168252600690935290812060ff90921615919084600181111561301d5761301d615357565b600181111561302e5761302e615357565b815260208082019290925260409081016000908120600201805460ff1916941515949094179093556001600160a01b0386168084526006909252822090917f43116470e1e462f8da735d92f836a07475cde94449b1cd54c7145aedfcecfde79185918260018111156130a2576130a2615357565b60018111156130b3576130b3615357565b8152602081019190915260409081016000206002015490516113069291610100900460ff169061587e565b6130e88282614884565b61314a5760405162461bcd60e51b815260206004820152602d60248201527f5361666573776170526f757465723a205472616e73616374696f6e2072656a6560448201526c31ba32b210313c9020a92196a160991b606482015260840161075e565b5050565b606061315b600183615782565b6001600160401b0381111561317257613172615917565b60405190808252806020026020018201604052801561319b578160200160208202803683370190505b50905060005b6131ac600184615782565b81101561323d5761320e8484838181106131c8576131c8615714565b90506020020160208101906131dd91906154f2565b85856131ea856001615799565b8181106131f9576131f9615714565b905060200201602081019061258f91906154f2565b82828151811061322057613220615714565b6020908102919091010152806132358161589b565b9150506131a1565b5092915050565b80156132ae57600060029054906101000a90046001600160a01b03166001600160a01b031663ddca3f43826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561329a57600080fd5b505af11580156108ff573d6000803e3d6000fd5b50565b6001600160a01b0386166000908152600660205260408120908560018111156132dc576132dc615357565b60018111156132ed576132ed615357565b815260208101919091526040016000206002015460ff1680156133105750600082115b156108ff57806133265761332686863086613cca565b61333282876000614932565b61333d868547614147565b80156133525761334d8686614978565b6108ff565b6001546108ff9087906001600160a01b03166122e1825b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061339890309060040161550f565b602060405180830381865afa1580156133b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611158919061592d565b600154604051632955261160e11b81526001600160a01b03909116906352aa4c229061341390899089908990899089908990600401615946565b600060405180830381600087803b15801561342d57600080fd5b505af1158015613441573d6000803e3d6000fd5b50505050505050505050565b60005b6001835161345e9190615782565b81101561267a576134c783828151811061347a5761347a615714565b6020026020010151848360016134909190615799565b815181106134a0576134a0615714565b60200260200101518484815181106134ba576134ba615714565b602002602001015161498b565b806134d18161589b565b915050613450565b6002546001600160a01b031633146135335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161075e565b565b6001600160a01b0381166132ae5760405162461bcd60e51b815260206004820152602960248201527f53616665537761705472616465526f757465723a20546f6b656e20646f6573206044820152681b9bdd08195e1a5cdd60ba1b606482015260840161075e565b80156132ae5760405162461bcd60e51b815260206004820152602a60248201527f53616665537761705472616465526f757465723a20546f6b656e20616c726561604482015269191e4819195b195d195960b21b606482015260840161075e565b600080836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561363f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366391906159a1565b506001600160701b0391821693501690508215613756576136e5846001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136df91906158b6565b85614a23565b613750856001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061374a91906158b6565b86614a23565b90925090505b9250929050565b60008061376984613c32565b6137bd5761377a858561200e613c57565b9050806137a05761378e8585856001613b52565b905061379d818461200e613c57565b90505b6003546004546137b090836159f1565b6137ba9190615a10565b91505b6137c684613c32565b806137cf575080155b156138c9576000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138389190615a32565b613843906012615a55565b60000b905060008112156138955761385d81600019615a96565b905061386a81600a615bff565b60035460045461387a90896159f1565b6138849190615a10565b61388e9190615a10565b92506138c7565b6138a081600a615bff565b6003546004546138b090896159f1565b6138ba9190615a10565b6138c491906159f1565b92505b505b509392505050565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139359190615a32565b60ff1692915050565b600061394984613c32565b1580156139a557506001600160a01b03841660009081526006602052604081209086600181111561397c5761397c615357565b600181111561398d5761398d615357565b815260208101919091526040016000206002015460ff165b80156139ff57506001600160a01b0384166000908152600660205260408120818760018111156139d7576139d7615357565b60018111156139e8576139e8615357565b815260200190815260200160002060000160010154115b8015613a1b57503360009081526005602052604090205460ff16155b15613b49576000613a2c8385615c0b565b90506000811215613ac857613a4381600019615a96565b9050613a5081600a615bff565b6003546001600160a01b038716600090815260066020526040812090896001811115613a7e57613a7e615357565b6001811115613a8f57613a8f615357565b8152602081019190915260400160002060010154613aad908a6159f1565b613ab79190615a10565b613ac19190615a10565b9150613b47565b613ad381600a615bff565b6003546001600160a01b038716600090815260066020526040812090896001811115613b0157613b01615357565b6001811115613b1257613b12615357565b8152602081019190915260400160002060010154613b30908a6159f1565b613b3a9190615a10565b613b4491906159f1565b91505b505b95945050505050565b6000806000613b6a613b648787614a93565b856135fe565b915091506000613b7a8787614bcd565b509050806001600160a01b0316876001600160a01b031614613b9d578183613ba0565b82825b600154604051630153543560e21b8152600481018c905260248101849052604481018390529295509093506001600160a01b03169063054d50d490606401602060405180830381865afa925050508015613c17575060408051601f3d908101601f19168201909252613c149181019061592d565b60015b613c245760009350613c27565b93505b505050949350505050565b6000613c3c613c57565b6001600160a01b0316826001600160a01b0316149050919050565b600154604080516315ab88c960e31b815290516000926001600160a01b03169163ad5c46489160048083019260209291908290030181865afa158015613ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cc591906158b6565b905090565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691613d2e9190615c4a565b6000604051808303816000865af19150503d8060008114613d6b576040519150601f19603f3d011682016040523d82523d6000602084013e613d70565b606091505b5091509150818015613d9a575080511580613d9a575080806020019051810190613d9a9190615c85565b6108ff5760405162461bcd60e51b815260206004820152603660248201527f53616665537761705472616465526f757465723a3a7472616e7366657246726f6044820152751b4e881d1c985b9cd9995c919c9bdb4819985a5b195960521b606482015260840161075e565b600080846001600160a01b031663095ea7b38585604051602401613e2a929190615ca2565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051613e639190615c4a565b6000604051808303816000865af19150503d8060008114613ea0576040519150601f19603f3d011682016040523d82523d6000602084013e613ea5565b606091505b5091509150818015613ecf575080511580613ecf575080806020019051810190613ecf9190615c85565b612e545760405162461bcd60e51b815260206004820152603060248201527f53616665537761705472616465526f757465723a3a73616665417070726f766560448201526f0e88185c1c1c9bdd994819985a5b195960821b606482015260840161075e565b60015460405163083722b560e01b81526001600160a01b039091169063083722b590613f70908a908a908a908a908a908a908a90600401615cf9565b6000604051808303816000875af1158015613f8f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613fb79190810190615d3f565b5050505050505050565b6000613fcf6006600a615bff565b6140016006613fdd866138d1565b613fe79190615782565b613ff290600a615bff565b613ffc8686614cbb565b6146d3565b61400b91906159f1565b9392505050565b8261401c81613535565b60006140c1856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561405f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061408391906158b6565b866001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561256b573d6000803e3d6000fd5b6001600160a01b03861660008181526008602052604090819020600180820185905581546001600160a01b03191684178255600282018990556003820188905560048201805460ff1916909117905590519293509185918791600080516020615ec2833981519152906141379087815260200190565b60405180910390a4505050505050565b6001600160a01b038316600090815260066020526040812081908185600181111561417457614174615357565b600181111561418557614185615357565b815260208101919091526040016000206002015460ff1680156141a85750600083115b15612e54576001600160a01b0385166000908152600660205260408120818660018111156141d8576141d8615357565b60018111156141e9576141e9615357565b815260200190815260200160002060030180549050905060005b81811015612440576001600160a01b03871660009081526006602052604081209087600181111561423657614236615357565b600181111561424757614247615357565b8152602001908152602001600020600301818154811061426957614269615714565b600091825260209091206003600490920201015460ff1680156142f957506001600160a01b0387166000908152600660205260408120818860018111156142b2576142b2615357565b60018111156142c3576142c3615357565b815260200190815260200160002060030182815481106142e5576142e5615714565b906000526020600020906004020160020154115b15614640576001600160a01b03871660009081526006602052604081208188600181111561432957614329615357565b600181111561433a5761433a615357565b8152602001908152602001600020600301828154811061435c5761435c615714565b6000918252602080832060016004909302018201546001600160a01b038c81168552600690925260408420911693509082908a9081111561439f5761439f615357565b60018111156143b0576143b0615357565b815260200190815260200160002060030183815481106143d2576143d2615714565b600091825260209091206004909102015461010090046001600160a01b031690506143fe600185615782565b8314156144165761440f8588615782565b9550614526565b6001600160a01b0389166000908152600660205260408120818a600181111561444157614441615357565b600181111561445257614452615357565b815260200190815260200160002060000160010154600354600660008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c60018111156144a3576144a3615357565b60018111156144b4576144b4615357565b815260200190815260200160002060030186815481106144d6576144d6615714565b9060005260206000209060040201600201546144f291906159f1565b6144fc9190615a10565b60035490915061450c828a6159f1565b6145169190615a10565b96506145228787615799565b9550505b6001600160a01b0389166000908152600660205260408120818a600181111561455157614551615357565b600181111561456257614562615357565b8152602001908152602001600020600301848154811061458457614584615714565b600091825260209091206004909102015460ff1660028111156145a9576145a9615357565b14156145be576145b98287614d49565b6145e6565b6145e68660006145d56145cf613c57565b85614cbb565b856145e1426014615799565b614833565b806001600160a01b0316896001600160a01b0316836001600160a01b03167f2ee8b4373db2e5efd8f38a651db96135641602894fc6fef7cb54bc02b78cde3e8960405161463591815260200190565b60405180910390a450505b8061464a8161589b565b915050614203565b60015460405163fb3bdb4160e01b81526001600160a01b039091169063fb3bdb4190879061468c908a908990899089908990600401615dfc565b60006040518083038185885af11580156146aa573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526124409190810190615d3f565b60015460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f906147069086908690600401615e33565b600060405180830381865afa92505050801561474457506040513d6000823e601f3d908101601f191682016040526147419190810190615d3f565b60015b61475057506000611158565b806001825161475f9190615782565b8151811061476f5761476f615714565b602002602001015191505092915050565b6001546040516304723bfd60e31b81526001600160a01b0390911690632391dfe890613f70908a908a908a908a908a908a908a90600401615cf9565b60015460405163561c49dd60e11b81526001600160a01b039091169063ac3893ba906147f8908a908a908a908a908a908a908a90600401615cf9565b600060405180830381600087803b15801561481257600080fd5b505af1158015614826573d6000803e3d6000fd5b5050505050505050505050565b60015460405163b6f9de9560e01b81526001600160a01b039091169063b6f9de9590879061486b908890889088908890600401615e4c565b6000604051808303818588803b15801561342d57600080fd5b60095460009060ff16156149295760005b6148a0600184615782565b811015614927576149078484838181106148bc576148bc615714565b90506020020160208101906148d191906154f2565b85856148de856001615799565b8181106148ed576148ed615714565b905060200201602081019061490291906154f2565b614e16565b614915576000915050611158565b8061491f8161589b565b915050614895565b505b50600192915050565b60015461494a9083906001600160a01b031685613e05565b6149698360006149618561495c613c57565b614cbb565b3030426133d9565b801561267a5761267a47613244565b61314a828261498685613369565b614fb2565b60006149978484614a93565b90506000806149a68686614bcd565b91509150816001600160a01b0316866001600160a01b0316146149fa57836149cd826138d1565b6149d6846138d1565b6149e09190615799565b6149eb90600a615bff565b6149f59190615a10565b6149fc565b835b6001600160a01b039093166000908152600860205260409020600101929092555050505050565b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190614a5290859060040161550f565b602060405180830381865afa158015614a6f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061400b919061592d565b6001546040805163c45a015560e01b815290516000926001600160a01b03169163c45a01559160048083019260209291908290030181865afa158015614add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b0191906158b6565b60405163e6a4390560e01b81526001600160a01b0385811660048301528481166024830152919091169063e6a4390590604401602060405180830381865afa158015614b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b7591906158b6565b90506001600160a01b0381166111585760405162461bcd60e51b815260206004820181905260248201527f5361666573776170526f757465723a2043616e6e6f742066696e642070616972604482015260640161075e565b600080826001600160a01b0316846001600160a01b03161415614c3e5760405162461bcd60e51b815260206004820152602360248201527f5361666573776170526f757465723a204944454e544943414c5f41444452455360448201526253455360e81b606482015260840161075e565b826001600160a01b0316846001600160a01b031610614c5e578284614c61565b83835b90925090506001600160a01b0382166137565760405162461bcd60e51b815260206004820152601c60248201527b5361666573776170526f757465723a205a45524f5f4144445245535360201b604482015260640161075e565b60408051600280825260608083018452926020830190803683370190505090508281600081518110614cef57614cef615714565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600181518110614d2357614d23615714565b60200260200101906001600160a01b031690816001600160a01b03168152505092915050565b604080516000808252602082019092526001600160a01b038416908390604051614d739190615c4a565b60006040518083038185875af1925050503d8060008114614db0576040519150601f19603f3d011682016040523d82523d6000602084013e614db5565b606091505b505090508061267a5760405162461bcd60e51b81526020600482015260396024820152600080516020615ee28339815191526044820152781c9155120e88115512081d1c985b9cd9995c8819985a5b1959603a1b606482015260840161075e565b600080614e238484614a93565b90506000806000614e33846150d1565b6001600160a01b038716600090815260086020526040902060040154929550909350915060ff1615614f9b57600080614e6c8989614bcd565b915091506000614e7b836138d1565b9050614e86826138d1565b614e909082615799565b9050826001600160a01b03168a6001600160a01b031614614ec65783614eb782600a615bff565b614ec19190615a10565b614ec8565b835b935060006006614ed78c6138d1565b614ee19190615782565b614eec90600a615bff565b90506000614efa8b8a614a23565b614f0490836159f1565b9050600082614f138e8c614a23565b614f1d9190615799565b90506000614f2d6006600a615bff565b614f378385615a10565b614f4191906159f1565b90506064614f4f898c6159f1565b614f599190615a10565b811180614f7a57506064614f6d898b6159f1565b614f779190615a10565b81105b15614f935760009b505050505050505050505050611158565b505050505050505b614fa58787615131565b5060019695505050505050565b600080846001600160a01b031663a9059cbb8585604051602401614fd7929190615ca2565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516150109190615c4a565b6000604051808303816000865af19150503d806000811461504d576040519150601f19603f3d011682016040523d82523d6000602084013e615052565b606091505b509150915081801561507c57508051158061507c57508080602001905181019061507c9190615c85565b612e545760405162461bcd60e51b81526020600482015260326024820152600080516020615ee28339815191526044820152711c8e881d1c985b9cd9995c8819985a5b195960721b606482015260840161075e565b6001600160a01b0381811660009081526008602052604081205490918291829116615103576151038460966032614012565b5050506001600160a01b03166000908152600860205260409020600281015460038201546001909201549092565b600061513d8383614a93565b905060008061514d8360006135fe565b91509150600061515d8686614bcd565b509050806001600160a01b0316866001600160a01b031614615180578183615183565b82825b90935091506000836151958887614a23565b61519f9190615782565b11806151bf57506000826151b38787614a23565b6151bd9190615782565b115b156108ff57836001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561342d57600080fd5b600081518084526020808501945080840160005b838110156152385781516001600160a01b031687529582019590820190600101615213565b509495945050505050565b60208152600061400b60208301846151ff565b600060a0828403121561526857600080fd5b50919050565b60006020828403121561528057600080fd5b81356001600160401b0381111561529657600080fd5b6152a284828501615256565b949350505050565b6001600160a01b03811681146132ae57600080fd5b8035600281106152ce57600080fd5b919050565b60008060008061010085870312156152ea57600080fd5b84356152f5816152aa565b9350615303602086016152bf565b92506153128660408701615256565b9396929550929360e00135925050565b6000806040838503121561533557600080fd5b8235615340816152aa565b915061534e602084016152bf565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b6002811061537d5761537d615357565b9052565b6003811061537d5761537d615357565b6000602080835260e0830184516153ab838601825161536d565b808301516001600160a01b03908116604087810191909152808301516060808901919091528084015115156080808a019190915293840151151560a0898101919091528987015160c0808b015280519687905287019560009591949291906101008b01905b8088101561545e578851615425838251615381565b808b01518616838c0152868101518616878401528481015185840152830151151583830152978901976001979097019690860190615410565b509b9a5050505050505050505050565b60008060006060848603121561548357600080fd5b833561548e816152aa565b925061549c602085016152bf565b9150604084013590509250925092565b600080600060e084860312156154c157600080fd5b83356154cc816152aa565b92506154da602085016152bf565b91506154e98560408601615256565b90509250925092565b60006020828403121561550457600080fd5b813561400b816152aa565b6001600160a01b0391909116815260200190565b6000806000806060858703121561553957600080fd5b84356001600160401b038082111561555057600080fd5b818701915087601f83011261556457600080fd5b81358181111561557357600080fd5b8860208260051b850101111561558857600080fd5b60209283019650945050850135915060408501356155a5816152aa565b939692955090935050565b6000806000606084860312156155c557600080fd5b83356155d0816152aa565b95602085013595506040909401359392505050565b600080604083850312156155f857600080fd5b82356001600160401b0381111561560e57600080fd5b61561a85828601615256565b95602094909401359450505050565b60006020828403121561563b57600080fd5b5035919050565b6000806000806080858703121561565857600080fd5b8435615663816152aa565b93506020850135615673816152aa565b93969395505050506040820135916060013590565b6000808335601e1984360301811261569f57600080fd5b8301803591506001600160401b038211156156b957600080fd5b6020019150600581901b360382131561375657600080fd5b6020808252603590820152600080516020615ea28339815191526040820152746f75676820424e4220746f20636f7665722066656560581b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60208082526022908201527f53616665537761705472616465526f757465723a20496e76616c696420696e646040820152610caf60f31b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000828210156157945761579461576c565b500390565b600082198211156157ac576157ac61576c565b500190565b60208082526028908201527f53616665537761705472616465526f757465723a2046656550657263656e74616040820152676765203e3130302560c01b606082015260800190565b60006020828403121561580b57600080fd5b81356003811061400b57600080fd5b80151581146132ae57600080fd5b60006020828403121561583a57600080fd5b813561400b8161581a565b60a08101615853828861536d565b8560208301526158666040830186615381565b83606083015282151560808301529695505050505050565b6040810161588c828561536d565b82151560208301529392505050565b60006000198214156158af576158af61576c565b5060010190565b6000602082840312156158c857600080fd5b815161400b816152aa565b6020808252603690820152600080516020615ea2833981519152604082015275037bab3b410212721103a379031b7bb32b9103332b2960551b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561593f57600080fd5b5051919050565b86815285602082015260c06040820152600061596560c08301876151ff565b6001600160a01b03958616606084015293909416608082015260a00152949350505050565b80516001600160701b03811681146152ce57600080fd5b6000806000606084860312156159b657600080fd5b6159bf8461598a565b92506159cd6020850161598a565b9150604084015163ffffffff811681146159e657600080fd5b809150509250925092565b6000816000190483118215151615615a0b57615a0b61576c565b500290565b600082615a2d57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215615a4457600080fd5b815160ff8116811461400b57600080fd5b600081810b83820b8281128015607f19830184121615615a7757615a7761576c565b81607f018313811615615a8c57615a8c61576c565b5090039392505050565b60006001600160ff1b0381841382841380821686840486111615615abc57615abc61576c565b600160ff1b6000871282811687830589121615615adb57615adb61576c565b60008712925087820587128484161615615af757615af761576c565b87850587128184161615615b0d57615b0d61576c565b505050929093029392505050565b600181815b80851115615b56578160001904821115615b3c57615b3c61576c565b80851615615b4957918102915b93841c9390800290615b20565b509250929050565b600082615b6d57506001611158565b81615b7a57506000611158565b8160018114615b905760028114615b9a57615bb6565b6001915050611158565b60ff841115615bab57615bab61576c565b50506001821b611158565b5060208310610133831016604e8410600b8410161715615bd9575081810a611158565b615be38383615b1b565b8060001904821115615bf757615bf761576c565b029392505050565b600061400b8383615b5e565b60008083128015600160ff1b850184121615615c2957615c2961576c565b6001600160ff1b0384018313811615615c4457615c4461576c565b50500390565b6000825160005b81811015615c6b5760208186018101518583015201615c51565b81811115615c7a576000828501525b509190910192915050565b600060208284031215615c9757600080fd5b815161400b8161581a565b6001600160a01b03929092168252602082015260400190565b8183526000602080850194508260005b85811015615238578135615cde816152aa565b6001600160a01b031687529582019590820190600101615ccb565b87815286602082015260c060408201526000615d1960c083018789615cbb565b6001600160a01b03958616606084015293909416608082015260a0015295945050505050565b60006020808385031215615d5257600080fd5b82516001600160401b0380821115615d6957600080fd5b818501915085601f830112615d7d57600080fd5b815181811115615d8f57615d8f615917565b8060051b604051601f19603f83011681018181108582111715615db457615db4615917565b604052918252848201925083810185019188831115615dd257600080fd5b938501935b82851015615df057845184529385019392850192615dd7565b98975050505050505050565b858152608060208201526000615e16608083018688615cbb565b6001600160a01b0394909416604083015250606001529392505050565b8281526040602082015260006152a260408301846151ff565b848152608060208201526000615e6560808301866151ff565b6001600160a01b0394909416604083015250606001529291505056fe13a5198c06dda8adb82629a4b7833e14feece24a869103d32d93ba2ed24b6b935361666573776170526f757465723a20596f75206d7573742073656e6420656efab38f79c058d8e2be02f2b221e88c72ead19be47cfbaac8efa2f142f6f1a8c653616665537761705472616465526f757465723a3a736166655472616e736665a2646970667358221220d5299c885c2677e33ee83ed426f0c7c213d13b529b97c6d38c170b2b6614997d64736f6c634300080b0033",
  "deployedBytecode": "0x60806040526004361061019f5760003560e01c8062874030146101a85780630ea9c040146101d357806312f788a4146101e657806318e75a5b146102065780631db33ab9146102335780633744d9d4146102535780633b7766da146102735780633e99c1e4146102935780634535e34c146102c85780634c0a5df1146102fb5780635d90f9ec1461033b5780635ffde08f1461035b5780636b7b71021461036e5780636fbdb68c1461038e578063704b6c02146103a357806370ba1113146103c357806370eee31d146103e757806372d0498114610407578063740f993f1461041a5780637ce3489b146104445780637fd6f15c1461046457806381bdf4f21461047a5780638402c2881461049a5780638a879cab146105025780639166aecd146105155780639b8a9b6814610528578063a351408714610548578063bca31f981461055b578063c0d786551461057b578063c31c9c071461059b578063d0bfbe97146105bb578063d0f1aed7146105db578063d76d59fc146105fb578063eb990c591461062b578063f2e50a1e1461064b578063f851a4401461066b57005b366101a657005b005b3480156101b457600080fd5b506101bd61068b565b6040516101ca9190615243565b60405180910390f35b6101a66101e136600461526e565b6106ed565b3480156101f257600080fd5b506101a66102013660046152d3565b610907565b34801561021257600080fd5b50610226610221366004615322565b610f74565b6040516101ca9190615391565b34801561023f57600080fd5b506101a661024e366004615322565b61115e565b34801561025f57600080fd5b506101a661026e36600461546e565b611313565b34801561027f57600080fd5b506101a661028e3660046154ac565b6117bf565b34801561029f57600080fd5b506102b36102ae3660046154f2565b611e43565b604080519283526020830191909152016101ca565b3480156102d457600080fd5b506000546102ee906201000090046001600160a01b031681565b6040516101ca919061550f565b34801561030757600080fd5b5061031b610316366004615523565b611e74565b6040805194855260208501939093529183015260608201526080016101ca565b34801561034757600080fd5b506101a66103563660046154f2565b6120eb565b6101a661036936600461526e565b612186565b34801561037a57600080fd5b506101a66103893660046154f2565b612449565b34801561039a57600080fd5b506101a66125e8565b3480156103af57600080fd5b506101a66103be3660046154f2565b61263d565b3480156103cf57600080fd5b506103d960035481565b6040519081526020016101ca565b3480156103f357600080fd5b506101a66104023660046155b0565b612667565b6101a66104153660046155e5565b61267f565b34801561042657600080fd5b506009546104349060ff1681565b60405190151581526020016101ca565b34801561045057600080fd5b506101a661045f366004615629565b6127a2565b34801561047057600080fd5b506103d960045481565b34801561048657600080fd5b506101a66104953660046154f2565b6127af565b3480156104a657600080fd5b506104ba6104b53660046154f2565b612809565b6040516101ca919081516001600160a01b0316815260208083015190820152604080830151908201526060808301519082015260809182015115159181019190915260a00190565b6101a661051036600461526e565b6128a6565b6101a661052336600461526e565b6129e3565b34801561053457600080fd5b506101a6610543366004615629565b612b32565b6101a66105563660046155e5565b612b3f565b34801561056757600080fd5b506101a66105763660046154f2565b612c3e565b34801561058757600080fd5b506101a66105963660046154f2565b612c6a565b3480156105a757600080fd5b506001546102ee906001600160a01b031681565b3480156105c757600080fd5b506101a66105d63660046154f2565b612c94565b3480156105e757600080fd5b506101a66105f63660046155b0565b612cbd565b34801561060757600080fd5b506104346106163660046154f2565b60056020526000908152604090205460ff1681565b34801561063757600080fd5b506101a6610646366004615642565b612d38565b34801561065757600080fd5b506101a6610666366004615322565b612e5b565b34801561067757600080fd5b506002546102ee906001600160a01b031681565b606060078054806020026020016040519081016040528092919081815260200182805480156106e357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106c5575b5050505050905090565b6106fa6040820182615688565b61070482826130de565b600061071b6107166040860186615688565b61314e565b90506000806107386107306040880188615688565b883533611e74565b509250925050813410156107675760405162461bcd60e51b815260040161075e906156d1565b60405180910390fd5b61077047613244565b801561085b576107b86107866040880188615688565b600081811061079757610797615714565b90506020020160208101906107ac91906154f2565b336000893585826132b1565b6108566107f66107cb6040890189615688565b60008181106107dc576107dc615714565b90506020020160208101906107f191906154f2565b613369565b602088013561080860408a018a615688565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525030925061084c91505060808c0160608d016154f2565b8b608001356133d9565b6108b6565b6108b68635602088013561087260408a018a615688565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525033925061084c91505060808c0160608d016154f2565b6108ff6108c66040880188615688565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525087925061344d915050565b505050505050565b61090f6134d9565b6001600160a01b03841660009081526006602052604081209084600181111561093a5761093a615357565b600181111561094b5761094b615357565b815260208101919091526040016000205461010090046001600160a01b031661097381613535565b6001600160a01b03851660009081526006602052604081209085600181111561099e5761099e615357565b60018111156109af576109af615357565b815260200190815260200160002060030182815481106109d1576109d1615714565b600091825260209091206003600490920201015460ff16610a4d5760405162461bcd60e51b815260206004820152603060248201527f53616665537761705472616465526f757465723a20546f6b656e27732073776160448201526f7020666565206e6f742061637469766560801b606482015260840161075e565b6001600160a01b038516600090815260066020526040812090856001811115610a7857610a78615357565b6001811115610a8957610a89615357565b81526020810191909152604001600020600301548210610abb5760405162461bcd60e51b815260040161075e9061572a565b600454600354610acb9190615782565b6001600160a01b038616600090815260066020526040812090866001811115610af657610af6615357565b6001811115610b0757610b07615357565b81526020019081526020016000206003018381548110610b2957610b29615714565b906000526020600020906004020160020154846060013560066000896001600160a01b03166001600160a01b031681526020019081526020016000206000886001811115610b7957610b79615357565b6001811115610b8a57610b8a615357565b815260200190815260200160002060000160010154610ba99190615799565b610bb39190615782565b1115610bd15760405162461bcd60e51b815260040161075e906157b1565b6001600160a01b038516600090815260066020526040812090856001811115610bfc57610bfc615357565b6001811115610c0d57610c0d615357565b81526020019081526020016000206003018281548110610c2f57610c2f615714565b90600052602060002090600402016002015460066000876001600160a01b03166001600160a01b031681526020019081526020016000206000866001811115610c7a57610c7a615357565b6001811115610c8b57610c8b615357565b81526020019081526020016000206000016001016000828254610cae9190615782565b90915550506040805160a0810190915280610ccc60208601866157f9565b6002811115610cdd57610cdd615357565b8152602001846020016020810190610cf591906154f2565b6001600160a01b03168152602001610d1360608601604087016154f2565b6001600160a01b0316815260608501356020820152604001610d3b60a0860160808701615828565b151590526001600160a01b038616600090815260066020526040812090866001811115610d6a57610d6a615357565b6001811115610d7b57610d7b615357565b81526020019081526020016000206003018381548110610d9d57610d9d615714565b6000918252602090912082516004909202018054909190829060ff19166001836002811115610dce57610dce615357565b02179055506020828101518254610100600160a81b0319166101006001600160a01b0392831602178355604080850151600180860180546001600160a01b0319169285169290921790915560608087015160028701556080909601516003909501805460ff1916951515959095179094559089166000908152600690925281209286013592918790811115610e6557610e65615357565b6001811115610e7657610e76615357565b81526020019081526020016000206000016001016000828254610e999190615799565b90915550610eaf905060608401604085016154f2565b6001600160a01b0316610ec860408501602086016154f2565b6001600160a01b03878116600081815260066020526040812093909216929091600080516020615e82833981519152918991826001811115610f0c57610f0c615357565b6001811115610f1d57610f1d615357565b81526020808201929092526040016000206001015490610f3f908a018a6157f9565b60608a0135610f5460a08c0160808d01615828565b604051610f65959493929190615845565b60405180910390a45050505050565b6040805160e081018252600091810182815260608083018490526080830184905260a0830184905260c0830193909352815260208101919091526001600160a01b038316600090815260066020526040812090836001811115610fd957610fd9615357565b6001811115610fea57610fea615357565b815260208101919091526040908101600020815160e081018352815490928391908201908390829060ff16600181111561102657611026615357565b600181111561103757611037615357565b815281546001600160a01b036101009182900416602080840191909152600184015460408085019190915260029094015460ff80821615156060860152929004909116151560809092019190915291835260038401805482518185028101850190935280835293830193919290919060009084015b8282101561114d576000848152602090206040805160a08101909152600484029091018054829060ff1660028111156110e7576110e7615357565b60028111156110f8576110f8615357565b815281546001600160a01b03610100909104811660208084019190915260018085015490921660408401526002840154606084015260039093015460ff161515608090920191909152918352920191016110ac565b505050508152505090505b92915050565b6111666134d9565b6001600160a01b03821660009081526006602052604081209082600181111561119157611191615357565b60018111156111a2576111a2615357565b8152602081019190915260400160002060020154610100900460ff166111c78161359d565b6001600160a01b0383166000908152600660205260408120908360018111156111f2576111f2615357565b600181111561120357611203615357565b815260208082019290925260409081016000908120600201546001600160a01b0387168252600690935290812060ff90921615919084600181111561124a5761124a615357565b600181111561125b5761125b615357565b815260208082019290925260409081016000908120600201805460ff1916941515949094179093556001600160a01b0386168084526006909252822090917f95437ba9f2848cd22a891a779e6179145fcce51375c56a427807e653c77b945f9185918260018111156112cf576112cf615357565b60018111156112e0576112e0615357565b815260208101919091526040908101600020600201549051611306929160ff169061587e565b60405180910390a2505050565b61131b6134d9565b6001600160a01b03831660009081526006602052604081209083600181111561134657611346615357565b600181111561135757611357615357565b8152602081019190915260400160002060020154610100900460ff1661137c8161359d565b6001600160a01b0384166000908152600660205260408120908460018111156113a7576113a7615357565b60018111156113b8576113b8615357565b815260208101919091526040016000206003015482106113ea5760405162461bcd60e51b815260040161075e9061572a565b6001600160a01b03841660009081526006602052604081209084600181111561141557611415615357565b600181111561142657611426615357565b8152602001908152602001600020600301828154811061144857611448615714565b600091825260209091206003600490920201015460ff161561154c576001600160a01b03841660009081526006602052604081209084600181111561148f5761148f615357565b60018111156114a0576114a0615357565b815260200190815260200160002060030182815481106114c2576114c2615714565b90600052602060002090600402016002015460066000866001600160a01b03166001600160a01b03168152602001908152602001600020600085600181111561150d5761150d615357565b600181111561151e5761151e615357565b815260200190815260200160002060000160010160008282546115419190615782565b9091555061162f9050565b6001600160a01b03841660009081526006602052604081209084600181111561157757611577615357565b600181111561158857611588615357565b815260200190815260200160002060030182815481106115aa576115aa615714565b90600052602060002090600402016002015460066000866001600160a01b03166001600160a01b0316815260200190815260200160002060008560018111156115f5576115f5615357565b600181111561160657611606615357565b815260200190815260200160002060000160010160008282546116299190615799565b90915550505b6001600160a01b03841660009081526006602052604081209084600181111561165a5761165a615357565b600181111561166b5761166b615357565b8152602001908152602001600020600301828154811061168d5761168d615714565b60009182526020808320600360049093020191909101546001600160a01b038716835260069091526040822060ff90911615918560018111156116d2576116d2615357565b60018111156116e3576116e3615357565b8152602001908152602001600020600301838154811061170557611705615714565b60009182526020808320600492909202909101600301805460ff1916931515939093179092556001600160a01b0386168082526006909252604081208492917f196ff3554753d125f87be48683fa3afa6021b058731ab355eea0dbfd5e99b04691879182600181111561177a5761177a615357565b600181111561178b5761178b615357565b8152602081019190915260409081016000206002015490516117b1929160ff169061587e565b60405180910390a350505050565b6117c76134d9565b6001600160a01b0383166000908152600660205260408120818460018111156117f2576117f2615357565b600181111561180357611803615357565b815260200190815260200160002060000160010154905060045460035461182a9190615782565b611838606084013583615799565b11156118565760405162461bcd60e51b815260040161075e906157b1565b6001600160a01b03841660009081526006602052604081208185600181111561188157611881615357565b600181111561189257611892615357565b815260208101919091526040016000205461010090046001600160a01b03161415611bcf576001600160a01b03841660009081526006602090815260408083206001845290915290206002015460ff1615801561191657506001600160a01b038416600090815260066020908152604080832083805290915290206002015460ff16155b1561196757600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b0386161790555b6001600160a01b03841660009081526006602052604081208185600181111561199257611992615357565b60018111156119a3576119a3615357565b81526020019081526020016000209050806003016040518060a001604052808560000160208101906119d591906157f9565b60028111156119e6576119e6615357565b81526020018560200160208101906119fe91906154f2565b6001600160a01b03168152602001611a1c60608701604088016154f2565b6001600160a01b0316815260608601356020820152604001611a4460a0870160808801615828565b15159052815460018181018455600093845260209093208251600490920201805492939092839160ff1990911690836002811115611a8457611a84615357565b021790555060208201518154610100600160a81b0319166101006001600160a01b0392831602178255604080840151600180850180546001600160a01b0319169290941691909117909255606084015160028401556080909301516003909201805460ff191692151592909217909155815160a0810190925281908690811115611b1057611b10615357565b81526001600160a01b0387166020820152604001611b32606086013585615799565b81526001602082018190526000604090920191909152815183548492839160ff1916908381811115611b6657611b66615357565b021790555060208201518154610100600160a81b0319166101006001600160a01b0390921682021782556040830151600183015560608301516002909201805460809094015161ffff1990941692151561ff001916929092179215150291909117905550611dba565b6001600160a01b038416600090815260066020526040812090846001811115611bfa57611bfa615357565b6001811115611c0b57611c0b615357565b81526020019081526020016000206003016040518060a00160405280846000016020810190611c3a91906157f9565b6002811115611c4b57611c4b615357565b8152602001846020016020810190611c6391906154f2565b6001600160a01b03168152602001611c8160608601604087016154f2565b6001600160a01b0316815260608501356020820152604001611ca960a0860160808701615828565b15159052815460018181018455600093845260209093208251600490920201805492939092839160ff1990911690836002811115611ce957611ce9615357565b02179055506020828101518254610100600160a81b0319166101006001600160a01b0392831602178355604080850151600180860180546001600160a01b0319169285169290921790915560608087015160028701556080909601516003909501805460ff1916951515959095179094559088166000908152600690925281209285013592918690811115611d8057611d80615357565b6001811115611d9157611d91615357565b81526020019081526020016000206000016001016000828254611db49190615799565b90915550505b611dca60608301604084016154f2565b6001600160a01b0316611de360408401602085016154f2565b6001600160a01b03908116908616600080516020615e828339815191528685611e0f60208901896157f9565b6060890135611e2460a08b0160808c01615828565b604051611e35959493929190615845565b60405180910390a450505050565b6000806001600160a01b038316611e5f57506000928392509050565b611e6a8360016135fe565b9094909350915050565b6001600160a01b03811660009081526005602052604081205481908190819060ff1615611eac575060009250829150819050806120e0565b6000611eb9600189615782565b90506000808a8a6000818110611ed157611ed1615714565b9050602002016020810190611ee691906154f2565b8b8b85818110611ef857611ef8615714565b9050602002016020810190611f0d91906154f2565b90925090508860005b84811015612057576000808e8e84818110611f3357611f33615714565b9050602002016020810190611f4891906154f2565b8f8f611f55866001615799565b818110611f6457611f64615714565b9050602002016020810190611f7991906154f2565b91509150611f8884838361375d565b611f92908b615799565b99506000611fb485600085611fa68b6138d1565b611faf886138d1565b61393e565b90506000611fc58685856001613b52565b90508095506000611fe582600186611fdc8c6138d1565b611faf896138d1565b9050611ff089613c32565b1561202657611fff838d615799565b9b50612015818561200e613c57565b6001613b52565b61201f908c615799565b9a5061203f565b612030838d615799565b9b5061203c818c615799565b9a505b5050505050808061204f9061589b565b915050611f16565b5061206183613c32565b1561208257866120718688615799565b61207b9190615799565b97506120db565b61208b82613c32565b156120a957868561209f888661200e613c57565b6120719190615799565b866120b7868461200e613c57565b6120c4888661200e613c57565b6120ce9190615799565b6120d89190615799565b97505b505050505b945094509450949050565b6120f36134d9565b6001600160a01b038082166000908152600860205260409020541661211781613535565b6001600160a01b03821660008181526008602052604090819020600401805460ff19811660ff9182161590811790925591517f8061fe6fb3a75098cc73fd05601be350dcafdb5bf12ba660fa055dbbf719d09c9261217a92161515815260200190565b60405180910390a25050565b6121936040820182615688565b61219d82826130de565b60006121af6107166040860186615688565b9050600080806121cd6121c56040890189615688565b893533611e74565b93509350935050823410156121f45760405162461bcd60e51b815260040161075e906156d1565b6121fd47613244565b8115612245576122456122136040890189615688565b600081811061222457612224615714565b905060200201602081019061223991906154f2565b3360008a3586826132b1565b801561238957816122e65761228f6122606040890189615688565b600081811061227157612271615714565b905060200201602081019061228691906154f2565b33308a35613cca565b6122e661229f6040890189615688565b60008181106122b0576122b0615714565b90506020020160208101906122c591906154f2565b6001546001600160a01b03166122e16107cb60408c018c615688565b613e05565b61231760208801356122fe6107cb60408b018b615688565b61230b60408b018b615688565b30308d60800135613f34565b6123846123276040890189615688565b600161233660408c018c615688565b612341929150615782565b81811061235057612350615714565b905060200201602081019061236591906154f2565b61237560808a0160608b016154f2565b60018a602001358560016132b1565b6123f7565b81156123c157612384602088013588356123a660408b018b615688565b336123b760808e0160608f016154f2565b8d60800135613f34565b6123f760208801356123d96107cb60408b018b615688565b6123e660408b018b615688565b306123b760808e0160608f016154f2565b6124406124076040890189615688565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525088925061344d915050565b50505050505050565b6124516134d9565b6001600160a01b038082166000908152600860205260409020541661247581613535565b816001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156124b057600080fd5b505af11580156124c4573d6000803e3d6000fd5b50505050612594826001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252d91906158b6565b836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561256b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258f91906158b6565b613fc1565b6001600160a01b038316600081815260086020908152604091829020600181018590556003810154600290910154925194855293919291600080516020615ec2833981519152910160405180910390a45050565b6125f06134d9565b6009805460ff8082161560ff1990921682179092556040519116151581527f1af25497212a4befd5c7af8d815c7f905f1aa0722d7f881bdd0d29b14e971def9060200160405180910390a1565b6126456134d9565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61266f6134d9565b61267a838383614012565b505050565b61268c6040830183615688565b61269682826130de565b60006126a86107166040870187615688565b90506000806126bd6121c56040890189615688565b9350509250508186101580156126dd57506126d9828835615799565b3410155b6126f95760405162461bcd60e51b815260040161075e906158d3565b61274f6127096040890189615688565b600161271860408c018c615688565b612723929150615782565b81811061273257612732615714565b905060200201602081019061274791906154f2565b600183614147565b61275882613244565b612792602088013561276b838a35615782565b61277860408b018b615688565b61278860808d0160608e016154f2565b8c60800135614652565b6124406108c66040890189615688565b6127aa6134d9565b600455565b6127b76134d9565b6000805462010000600160b01b031916620100006001600160a01b03841690810291909117825560405190917f9fbc3107cd5de0b63e7e8ee125c41156ece8511d0030e7d3e7b9174d6b9cf2c391a250565b6128466040518060a0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000151581525090565b506001600160a01b03908116600090815260086020908152604091829020825160a08101845281549094168452600181015491840191909152600281015491830191909152600381015460608301526004015460ff161515608082015290565b6128b36040820182615688565b6128bd82826130de565b60006128cf6107166040860186615688565b90506000806128e46107306040880188615688565b5092509250508134101561290a5760405162461bcd60e51b815260040161075e906156d1565b61291347613244565b80156129bb576129296107866040880188615688565b61085661298361293f6107cb60408a018a615688565b61294c60408a018a615688565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506146d392505050565b6129936107cb60408a018a615688565b6129a060408a018a615688565b306129b160808d0160608e016154f2565b8c60800135614780565b6108b6602087013587356129d260408a018a615688565b336129b160808d0160608e016154f2565b6129f06040820182615688565b6129fa82826130de565b6000612a0c6107166040860186615688565b905060008080612a226121c56040890189615688565b9350935093505082341015612a495760405162461bcd60e51b815260040161075e906156d1565b612a5247613244565b8115612a6857612a686122136040890189615688565b8015612ac45781612a9357612a836122606040890189615688565b612a9361229f6040890189615688565b612317612aa66107cb60408a018a615688565b6020890135612ab860408b018b615688565b30308d608001356147bc565b8115612b0a57612384612add6107cb60408a018a615688565b6020890135612aef60408b018b615688565b30612b0060808e0160608f016154f2565b8d608001356147bc565b6123f787356020890135612b2160408b018b615688565b33612b0060808e0160608f016154f2565b612b3a6134d9565b600355565b612b4c6040830183615688565b612b5682826130de565b6000612b686107166040870187615688565b9050600080612b7d6121c56040890189615688565b935050925050818610158015612b9d5750612b99828835615799565b3410155b612bb95760405162461bcd60e51b815260040161075e906158d3565b612bc96127096040890189615688565b612bd282613244565b612792612be0828935615782565b6020890135612bf260408b018b615688565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612c349250505060808c0160608d016154f2565b8b60800135614833565b612c466134d9565b6001600160a01b03166000908152600560205260409020805460ff19166001179055565b612c726134d9565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b612c9c6134d9565b6001600160a01b03166000908152600560205260409020805460ff19169055565b612cc56134d9565b6001600160a01b0380841660009081526008602052604090205416612ce981613535565b6001600160a01b0384166000818152600860209081526040918290206003810186905560028101879055600101549151918252849286929091600080516020615ec28339815191529101611e35565b600054610100900460ff1680612d4d5750303b155b80612d5b575060005460ff16155b612dbe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161075e565b600054610100900460ff16158015612de0576000805461ffff19166101011790555b600080546001600160a01b03808816620100000262010000600160b01b031990921691909117909155600180549186166001600160a01b0319928316178155600280549092163317909155600484905560038390556009805460ff191690911790558015612e54576000805461ff00191690555b5050505050565b612e636134d9565b6001600160a01b038216600090815260066020526040812090826001811115612e8e57612e8e615357565b6001811115612e9f57612e9f615357565b815260208101919091526040016000205461010090046001600160a01b0316612ec781613535565b6001600160a01b038316600090815260066020526040812090836001811115612ef257612ef2615357565b6001811115612f0357612f03615357565b815260200190815260200160002060000160020160019054906101000a900460ff161560066000856001600160a01b03166001600160a01b031681526020019081526020016000206000846001811115612f5f57612f5f615357565b6001811115612f7057612f70615357565b81526020808201929092526040908101600090812060020180549415156101000261ff0019909516949094179093556001600160a01b03861683526006909152812090836001811115612fc557612fc5615357565b6001811115612fd657612fd6615357565b815260208082019290925260409081016000908120600201546001600160a01b0387168252600690935290812060ff90921615919084600181111561301d5761301d615357565b600181111561302e5761302e615357565b815260208082019290925260409081016000908120600201805460ff1916941515949094179093556001600160a01b0386168084526006909252822090917f43116470e1e462f8da735d92f836a07475cde94449b1cd54c7145aedfcecfde79185918260018111156130a2576130a2615357565b60018111156130b3576130b3615357565b8152602081019190915260409081016000206002015490516113069291610100900460ff169061587e565b6130e88282614884565b61314a5760405162461bcd60e51b815260206004820152602d60248201527f5361666573776170526f757465723a205472616e73616374696f6e2072656a6560448201526c31ba32b210313c9020a92196a160991b606482015260840161075e565b5050565b606061315b600183615782565b6001600160401b0381111561317257613172615917565b60405190808252806020026020018201604052801561319b578160200160208202803683370190505b50905060005b6131ac600184615782565b81101561323d5761320e8484838181106131c8576131c8615714565b90506020020160208101906131dd91906154f2565b85856131ea856001615799565b8181106131f9576131f9615714565b905060200201602081019061258f91906154f2565b82828151811061322057613220615714565b6020908102919091010152806132358161589b565b9150506131a1565b5092915050565b80156132ae57600060029054906101000a90046001600160a01b03166001600160a01b031663ddca3f43826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561329a57600080fd5b505af11580156108ff573d6000803e3d6000fd5b50565b6001600160a01b0386166000908152600660205260408120908560018111156132dc576132dc615357565b60018111156132ed576132ed615357565b815260208101919091526040016000206002015460ff1680156133105750600082115b156108ff57806133265761332686863086613cca565b61333282876000614932565b61333d868547614147565b80156133525761334d8686614978565b6108ff565b6001546108ff9087906001600160a01b03166122e1825b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061339890309060040161550f565b602060405180830381865afa1580156133b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611158919061592d565b600154604051632955261160e11b81526001600160a01b03909116906352aa4c229061341390899089908990899089908990600401615946565b600060405180830381600087803b15801561342d57600080fd5b505af1158015613441573d6000803e3d6000fd5b50505050505050505050565b60005b6001835161345e9190615782565b81101561267a576134c783828151811061347a5761347a615714565b6020026020010151848360016134909190615799565b815181106134a0576134a0615714565b60200260200101518484815181106134ba576134ba615714565b602002602001015161498b565b806134d18161589b565b915050613450565b6002546001600160a01b031633146135335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161075e565b565b6001600160a01b0381166132ae5760405162461bcd60e51b815260206004820152602960248201527f53616665537761705472616465526f757465723a20546f6b656e20646f6573206044820152681b9bdd08195e1a5cdd60ba1b606482015260840161075e565b80156132ae5760405162461bcd60e51b815260206004820152602a60248201527f53616665537761705472616465526f757465723a20546f6b656e20616c726561604482015269191e4819195b195d195960b21b606482015260840161075e565b600080836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561363f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366391906159a1565b506001600160701b0391821693501690508215613756576136e5846001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136df91906158b6565b85614a23565b613750856001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061374a91906158b6565b86614a23565b90925090505b9250929050565b60008061376984613c32565b6137bd5761377a858561200e613c57565b9050806137a05761378e8585856001613b52565b905061379d818461200e613c57565b90505b6003546004546137b090836159f1565b6137ba9190615a10565b91505b6137c684613c32565b806137cf575080155b156138c9576000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138389190615a32565b613843906012615a55565b60000b905060008112156138955761385d81600019615a96565b905061386a81600a615bff565b60035460045461387a90896159f1565b6138849190615a10565b61388e9190615a10565b92506138c7565b6138a081600a615bff565b6003546004546138b090896159f1565b6138ba9190615a10565b6138c491906159f1565b92505b505b509392505050565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139359190615a32565b60ff1692915050565b600061394984613c32565b1580156139a557506001600160a01b03841660009081526006602052604081209086600181111561397c5761397c615357565b600181111561398d5761398d615357565b815260208101919091526040016000206002015460ff165b80156139ff57506001600160a01b0384166000908152600660205260408120818760018111156139d7576139d7615357565b60018111156139e8576139e8615357565b815260200190815260200160002060000160010154115b8015613a1b57503360009081526005602052604090205460ff16155b15613b49576000613a2c8385615c0b565b90506000811215613ac857613a4381600019615a96565b9050613a5081600a615bff565b6003546001600160a01b038716600090815260066020526040812090896001811115613a7e57613a7e615357565b6001811115613a8f57613a8f615357565b8152602081019190915260400160002060010154613aad908a6159f1565b613ab79190615a10565b613ac19190615a10565b9150613b47565b613ad381600a615bff565b6003546001600160a01b038716600090815260066020526040812090896001811115613b0157613b01615357565b6001811115613b1257613b12615357565b8152602081019190915260400160002060010154613b30908a6159f1565b613b3a9190615a10565b613b4491906159f1565b91505b505b95945050505050565b6000806000613b6a613b648787614a93565b856135fe565b915091506000613b7a8787614bcd565b509050806001600160a01b0316876001600160a01b031614613b9d578183613ba0565b82825b600154604051630153543560e21b8152600481018c905260248101849052604481018390529295509093506001600160a01b03169063054d50d490606401602060405180830381865afa925050508015613c17575060408051601f3d908101601f19168201909252613c149181019061592d565b60015b613c245760009350613c27565b93505b505050949350505050565b6000613c3c613c57565b6001600160a01b0316826001600160a01b0316149050919050565b600154604080516315ab88c960e31b815290516000926001600160a01b03169163ad5c46489160048083019260209291908290030181865afa158015613ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cc591906158b6565b905090565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691613d2e9190615c4a565b6000604051808303816000865af19150503d8060008114613d6b576040519150601f19603f3d011682016040523d82523d6000602084013e613d70565b606091505b5091509150818015613d9a575080511580613d9a575080806020019051810190613d9a9190615c85565b6108ff5760405162461bcd60e51b815260206004820152603660248201527f53616665537761705472616465526f757465723a3a7472616e7366657246726f6044820152751b4e881d1c985b9cd9995c919c9bdb4819985a5b195960521b606482015260840161075e565b600080846001600160a01b031663095ea7b38585604051602401613e2a929190615ca2565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051613e639190615c4a565b6000604051808303816000865af19150503d8060008114613ea0576040519150601f19603f3d011682016040523d82523d6000602084013e613ea5565b606091505b5091509150818015613ecf575080511580613ecf575080806020019051810190613ecf9190615c85565b612e545760405162461bcd60e51b815260206004820152603060248201527f53616665537761705472616465526f757465723a3a73616665417070726f766560448201526f0e88185c1c1c9bdd994819985a5b195960821b606482015260840161075e565b60015460405163083722b560e01b81526001600160a01b039091169063083722b590613f70908a908a908a908a908a908a908a90600401615cf9565b6000604051808303816000875af1158015613f8f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613fb79190810190615d3f565b5050505050505050565b6000613fcf6006600a615bff565b6140016006613fdd866138d1565b613fe79190615782565b613ff290600a615bff565b613ffc8686614cbb565b6146d3565b61400b91906159f1565b9392505050565b8261401c81613535565b60006140c1856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561405f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061408391906158b6565b866001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561256b573d6000803e3d6000fd5b6001600160a01b03861660008181526008602052604090819020600180820185905581546001600160a01b03191684178255600282018990556003820188905560048201805460ff1916909117905590519293509185918791600080516020615ec2833981519152906141379087815260200190565b60405180910390a4505050505050565b6001600160a01b038316600090815260066020526040812081908185600181111561417457614174615357565b600181111561418557614185615357565b815260208101919091526040016000206002015460ff1680156141a85750600083115b15612e54576001600160a01b0385166000908152600660205260408120818660018111156141d8576141d8615357565b60018111156141e9576141e9615357565b815260200190815260200160002060030180549050905060005b81811015612440576001600160a01b03871660009081526006602052604081209087600181111561423657614236615357565b600181111561424757614247615357565b8152602001908152602001600020600301818154811061426957614269615714565b600091825260209091206003600490920201015460ff1680156142f957506001600160a01b0387166000908152600660205260408120818860018111156142b2576142b2615357565b60018111156142c3576142c3615357565b815260200190815260200160002060030182815481106142e5576142e5615714565b906000526020600020906004020160020154115b15614640576001600160a01b03871660009081526006602052604081208188600181111561432957614329615357565b600181111561433a5761433a615357565b8152602001908152602001600020600301828154811061435c5761435c615714565b6000918252602080832060016004909302018201546001600160a01b038c81168552600690925260408420911693509082908a9081111561439f5761439f615357565b60018111156143b0576143b0615357565b815260200190815260200160002060030183815481106143d2576143d2615714565b600091825260209091206004909102015461010090046001600160a01b031690506143fe600185615782565b8314156144165761440f8588615782565b9550614526565b6001600160a01b0389166000908152600660205260408120818a600181111561444157614441615357565b600181111561445257614452615357565b815260200190815260200160002060000160010154600354600660008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c60018111156144a3576144a3615357565b60018111156144b4576144b4615357565b815260200190815260200160002060030186815481106144d6576144d6615714565b9060005260206000209060040201600201546144f291906159f1565b6144fc9190615a10565b60035490915061450c828a6159f1565b6145169190615a10565b96506145228787615799565b9550505b6001600160a01b0389166000908152600660205260408120818a600181111561455157614551615357565b600181111561456257614562615357565b8152602001908152602001600020600301848154811061458457614584615714565b600091825260209091206004909102015460ff1660028111156145a9576145a9615357565b14156145be576145b98287614d49565b6145e6565b6145e68660006145d56145cf613c57565b85614cbb565b856145e1426014615799565b614833565b806001600160a01b0316896001600160a01b0316836001600160a01b03167f2ee8b4373db2e5efd8f38a651db96135641602894fc6fef7cb54bc02b78cde3e8960405161463591815260200190565b60405180910390a450505b8061464a8161589b565b915050614203565b60015460405163fb3bdb4160e01b81526001600160a01b039091169063fb3bdb4190879061468c908a908990899089908990600401615dfc565b60006040518083038185885af11580156146aa573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526124409190810190615d3f565b60015460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f906147069086908690600401615e33565b600060405180830381865afa92505050801561474457506040513d6000823e601f3d908101601f191682016040526147419190810190615d3f565b60015b61475057506000611158565b806001825161475f9190615782565b8151811061476f5761476f615714565b602002602001015191505092915050565b6001546040516304723bfd60e31b81526001600160a01b0390911690632391dfe890613f70908a908a908a908a908a908a908a90600401615cf9565b60015460405163561c49dd60e11b81526001600160a01b039091169063ac3893ba906147f8908a908a908a908a908a908a908a90600401615cf9565b600060405180830381600087803b15801561481257600080fd5b505af1158015614826573d6000803e3d6000fd5b5050505050505050505050565b60015460405163b6f9de9560e01b81526001600160a01b039091169063b6f9de9590879061486b908890889088908890600401615e4c565b6000604051808303818588803b15801561342d57600080fd5b60095460009060ff16156149295760005b6148a0600184615782565b811015614927576149078484838181106148bc576148bc615714565b90506020020160208101906148d191906154f2565b85856148de856001615799565b8181106148ed576148ed615714565b905060200201602081019061490291906154f2565b614e16565b614915576000915050611158565b8061491f8161589b565b915050614895565b505b50600192915050565b60015461494a9083906001600160a01b031685613e05565b6149698360006149618561495c613c57565b614cbb565b3030426133d9565b801561267a5761267a47613244565b61314a828261498685613369565b614fb2565b60006149978484614a93565b90506000806149a68686614bcd565b91509150816001600160a01b0316866001600160a01b0316146149fa57836149cd826138d1565b6149d6846138d1565b6149e09190615799565b6149eb90600a615bff565b6149f59190615a10565b6149fc565b835b6001600160a01b039093166000908152600860205260409020600101929092555050505050565b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190614a5290859060040161550f565b602060405180830381865afa158015614a6f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061400b919061592d565b6001546040805163c45a015560e01b815290516000926001600160a01b03169163c45a01559160048083019260209291908290030181865afa158015614add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b0191906158b6565b60405163e6a4390560e01b81526001600160a01b0385811660048301528481166024830152919091169063e6a4390590604401602060405180830381865afa158015614b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b7591906158b6565b90506001600160a01b0381166111585760405162461bcd60e51b815260206004820181905260248201527f5361666573776170526f757465723a2043616e6e6f742066696e642070616972604482015260640161075e565b600080826001600160a01b0316846001600160a01b03161415614c3e5760405162461bcd60e51b815260206004820152602360248201527f5361666573776170526f757465723a204944454e544943414c5f41444452455360448201526253455360e81b606482015260840161075e565b826001600160a01b0316846001600160a01b031610614c5e578284614c61565b83835b90925090506001600160a01b0382166137565760405162461bcd60e51b815260206004820152601c60248201527b5361666573776170526f757465723a205a45524f5f4144445245535360201b604482015260640161075e565b60408051600280825260608083018452926020830190803683370190505090508281600081518110614cef57614cef615714565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600181518110614d2357614d23615714565b60200260200101906001600160a01b031690816001600160a01b03168152505092915050565b604080516000808252602082019092526001600160a01b038416908390604051614d739190615c4a565b60006040518083038185875af1925050503d8060008114614db0576040519150601f19603f3d011682016040523d82523d6000602084013e614db5565b606091505b505090508061267a5760405162461bcd60e51b81526020600482015260396024820152600080516020615ee28339815191526044820152781c9155120e88115512081d1c985b9cd9995c8819985a5b1959603a1b606482015260840161075e565b600080614e238484614a93565b90506000806000614e33846150d1565b6001600160a01b038716600090815260086020526040902060040154929550909350915060ff1615614f9b57600080614e6c8989614bcd565b915091506000614e7b836138d1565b9050614e86826138d1565b614e909082615799565b9050826001600160a01b03168a6001600160a01b031614614ec65783614eb782600a615bff565b614ec19190615a10565b614ec8565b835b935060006006614ed78c6138d1565b614ee19190615782565b614eec90600a615bff565b90506000614efa8b8a614a23565b614f0490836159f1565b9050600082614f138e8c614a23565b614f1d9190615799565b90506000614f2d6006600a615bff565b614f378385615a10565b614f4191906159f1565b90506064614f4f898c6159f1565b614f599190615a10565b811180614f7a57506064614f6d898b6159f1565b614f779190615a10565b81105b15614f935760009b505050505050505050505050611158565b505050505050505b614fa58787615131565b5060019695505050505050565b600080846001600160a01b031663a9059cbb8585604051602401614fd7929190615ca2565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516150109190615c4a565b6000604051808303816000865af19150503d806000811461504d576040519150601f19603f3d011682016040523d82523d6000602084013e615052565b606091505b509150915081801561507c57508051158061507c57508080602001905181019061507c9190615c85565b612e545760405162461bcd60e51b81526020600482015260326024820152600080516020615ee28339815191526044820152711c8e881d1c985b9cd9995c8819985a5b195960721b606482015260840161075e565b6001600160a01b0381811660009081526008602052604081205490918291829116615103576151038460966032614012565b5050506001600160a01b03166000908152600860205260409020600281015460038201546001909201549092565b600061513d8383614a93565b905060008061514d8360006135fe565b91509150600061515d8686614bcd565b509050806001600160a01b0316866001600160a01b031614615180578183615183565b82825b90935091506000836151958887614a23565b61519f9190615782565b11806151bf57506000826151b38787614a23565b6151bd9190615782565b115b156108ff57836001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561342d57600080fd5b600081518084526020808501945080840160005b838110156152385781516001600160a01b031687529582019590820190600101615213565b509495945050505050565b60208152600061400b60208301846151ff565b600060a0828403121561526857600080fd5b50919050565b60006020828403121561528057600080fd5b81356001600160401b0381111561529657600080fd5b6152a284828501615256565b949350505050565b6001600160a01b03811681146132ae57600080fd5b8035600281106152ce57600080fd5b919050565b60008060008061010085870312156152ea57600080fd5b84356152f5816152aa565b9350615303602086016152bf565b92506153128660408701615256565b9396929550929360e00135925050565b6000806040838503121561533557600080fd5b8235615340816152aa565b915061534e602084016152bf565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b6002811061537d5761537d615357565b9052565b6003811061537d5761537d615357565b6000602080835260e0830184516153ab838601825161536d565b808301516001600160a01b03908116604087810191909152808301516060808901919091528084015115156080808a019190915293840151151560a0898101919091528987015160c0808b015280519687905287019560009591949291906101008b01905b8088101561545e578851615425838251615381565b808b01518616838c0152868101518616878401528481015185840152830151151583830152978901976001979097019690860190615410565b509b9a5050505050505050505050565b60008060006060848603121561548357600080fd5b833561548e816152aa565b925061549c602085016152bf565b9150604084013590509250925092565b600080600060e084860312156154c157600080fd5b83356154cc816152aa565b92506154da602085016152bf565b91506154e98560408601615256565b90509250925092565b60006020828403121561550457600080fd5b813561400b816152aa565b6001600160a01b0391909116815260200190565b6000806000806060858703121561553957600080fd5b84356001600160401b038082111561555057600080fd5b818701915087601f83011261556457600080fd5b81358181111561557357600080fd5b8860208260051b850101111561558857600080fd5b60209283019650945050850135915060408501356155a5816152aa565b939692955090935050565b6000806000606084860312156155c557600080fd5b83356155d0816152aa565b95602085013595506040909401359392505050565b600080604083850312156155f857600080fd5b82356001600160401b0381111561560e57600080fd5b61561a85828601615256565b95602094909401359450505050565b60006020828403121561563b57600080fd5b5035919050565b6000806000806080858703121561565857600080fd5b8435615663816152aa565b93506020850135615673816152aa565b93969395505050506040820135916060013590565b6000808335601e1984360301811261569f57600080fd5b8301803591506001600160401b038211156156b957600080fd5b6020019150600581901b360382131561375657600080fd5b6020808252603590820152600080516020615ea28339815191526040820152746f75676820424e4220746f20636f7665722066656560581b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60208082526022908201527f53616665537761705472616465526f757465723a20496e76616c696420696e646040820152610caf60f31b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000828210156157945761579461576c565b500390565b600082198211156157ac576157ac61576c565b500190565b60208082526028908201527f53616665537761705472616465526f757465723a2046656550657263656e74616040820152676765203e3130302560c01b606082015260800190565b60006020828403121561580b57600080fd5b81356003811061400b57600080fd5b80151581146132ae57600080fd5b60006020828403121561583a57600080fd5b813561400b8161581a565b60a08101615853828861536d565b8560208301526158666040830186615381565b83606083015282151560808301529695505050505050565b6040810161588c828561536d565b82151560208301529392505050565b60006000198214156158af576158af61576c565b5060010190565b6000602082840312156158c857600080fd5b815161400b816152aa565b6020808252603690820152600080516020615ea2833981519152604082015275037bab3b410212721103a379031b7bb32b9103332b2960551b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561593f57600080fd5b5051919050565b86815285602082015260c06040820152600061596560c08301876151ff565b6001600160a01b03958616606084015293909416608082015260a00152949350505050565b80516001600160701b03811681146152ce57600080fd5b6000806000606084860312156159b657600080fd5b6159bf8461598a565b92506159cd6020850161598a565b9150604084015163ffffffff811681146159e657600080fd5b809150509250925092565b6000816000190483118215151615615a0b57615a0b61576c565b500290565b600082615a2d57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215615a4457600080fd5b815160ff8116811461400b57600080fd5b600081810b83820b8281128015607f19830184121615615a7757615a7761576c565b81607f018313811615615a8c57615a8c61576c565b5090039392505050565b60006001600160ff1b0381841382841380821686840486111615615abc57615abc61576c565b600160ff1b6000871282811687830589121615615adb57615adb61576c565b60008712925087820587128484161615615af757615af761576c565b87850587128184161615615b0d57615b0d61576c565b505050929093029392505050565b600181815b80851115615b56578160001904821115615b3c57615b3c61576c565b80851615615b4957918102915b93841c9390800290615b20565b509250929050565b600082615b6d57506001611158565b81615b7a57506000611158565b8160018114615b905760028114615b9a57615bb6565b6001915050611158565b60ff841115615bab57615bab61576c565b50506001821b611158565b5060208310610133831016604e8410600b8410161715615bd9575081810a611158565b615be38383615b1b565b8060001904821115615bf757615bf761576c565b029392505050565b600061400b8383615b5e565b60008083128015600160ff1b850184121615615c2957615c2961576c565b6001600160ff1b0384018313811615615c4457615c4461576c565b50500390565b6000825160005b81811015615c6b5760208186018101518583015201615c51565b81811115615c7a576000828501525b509190910192915050565b600060208284031215615c9757600080fd5b815161400b8161581a565b6001600160a01b03929092168252602082015260400190565b8183526000602080850194508260005b85811015615238578135615cde816152aa565b6001600160a01b031687529582019590820190600101615ccb565b87815286602082015260c060408201526000615d1960c083018789615cbb565b6001600160a01b03958616606084015293909416608082015260a0015295945050505050565b60006020808385031215615d5257600080fd5b82516001600160401b0380821115615d6957600080fd5b818501915085601f830112615d7d57600080fd5b815181811115615d8f57615d8f615917565b8060051b604051601f19603f83011681018181108582111715615db457615db4615917565b604052918252848201925083810185019188831115615dd257600080fd5b938501935b82851015615df057845184529385019392850192615dd7565b98975050505050505050565b858152608060208201526000615e16608083018688615cbb565b6001600160a01b0394909416604083015250606001529392505050565b8281526040602082015260006152a260408301846151ff565b848152608060208201526000615e6560808301866151ff565b6001600160a01b0394909416604083015250606001529291505056fe13a5198c06dda8adb82629a4b7833e14feece24a869103d32d93ba2ed24b6b935361666573776170526f757465723a20596f75206d7573742073656e6420656efab38f79c058d8e2be02f2b221e88c72ead19be47cfbaac8efa2f142f6f1a8c653616665537761705472616465526f757465723a3a736166655472616e736665a2646970667358221220d5299c885c2677e33ee83ed426f0c7c213d13b529b97c6d38c170b2b6614997d64736f6c634300080b0033",
  "devdoc": {
    "details": "Allows SFM Router-compliant trades to be paid via bsc",
    "kind": "dev",
    "methods": {
      "getTokenFeeAddresses()": {
        "returns": {
          "_0": "the tokens fee information list"
        }
      },
      "getTokenInfoDetails(address,uint8)": {
        "returns": {
          "_0": "the token fee information"
        }
      },
      "setFeeJar(address)": {
        "params": {
          "_feeJar": "Address of FeeJar contract"
        }
      },
      "setRouter(address)": {
        "params": {
          "_router": "Address of SFM Router contract"
        }
      },
      "swapETHForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)": {
        "params": {
          "_feeAmount": "Fee value",
          "trade": "Trade details"
        }
      },
      "swapExactETHForTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)": {
        "params": {
          "_feeAmount": "Fee value",
          "trade": "Trade details"
        }
      },
      "swapExactTokensForETHAndFeeAmount((uint256,uint256,address[],address,uint256))": {
        "params": {
          "trade": "Trade details"
        }
      },
      "swapExactTokensForTokensWithFeeAmount((uint256,uint256,address[],address,uint256))": {
        "params": {
          "trade": "Trade details"
        }
      },
      "swapTokensForExactETHAndFeeAmount((uint256,uint256,address[],address,uint256))": {
        "params": {
          "trade": "Trade details"
        }
      },
      "swapTokensForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256))": {
        "params": {
          "trade": "Trade details"
        }
      }
    },
    "title": "SafeSwapTradeRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "feeJar()": {
        "notice": "FeepJar proxy"
      },
      "getTokenFeeAddresses()": {
        "notice": "Returns the tokens fee information list."
      },
      "getTokenInfoDetails(address,uint8)": {
        "notice": "Returns the token swap fee information for a given identifier."
      },
      "setFeeJar(address)": {
        "notice": "set feeJar address"
      },
      "setRouter(address)": {
        "notice": "set SFM router address"
      },
      "swapETHForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)": {
        "notice": "Swap BNB for tokens and pay amount of BNB input as fee"
      },
      "swapExactETHForTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)": {
        "notice": "Swap BNB for tokens and pay % of BNB input as fee"
      },
      "swapExactTokensForETHAndFeeAmount((uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for BNB and pay amount of BNB as fee"
      },
      "swapExactTokensForTokensWithFeeAmount((uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for tokens and pay BNB amount as fee"
      },
      "swapTokensForExactETHAndFeeAmount((uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for BNB and pay amount of BNB as fee"
      },
      "swapTokensForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for tokens and pay BNB amount as fee"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9710,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9713,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 225,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "feeJar",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IFeeJar)9337"
      },
      {
        "astId": 227,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "swapRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 229,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 231,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "percent",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 233,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "feePercent",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 237,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "whitelistFfsFee",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 245,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "tokensFeeList",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_enum(TransactionType)394,t_struct(TokenFee)361_storage))"
      },
      {
        "astId": 248,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "tokenFeeAddresses",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 253,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "adaptiveLpPriceRange",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(AdaptiveLpPriceRange)384_storage)"
      },
      {
        "astId": 255,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "isARCBEnabled",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SingleSwapFee)406_storage)dyn_storage": {
        "base": "t_struct(SingleSwapFee)406_storage",
        "encoding": "dynamic_array",
        "label": "struct SafeSwapTradeRouter.SingleSwapFee[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFeeJar)9337": {
        "encoding": "inplace",
        "label": "contract IFeeJar",
        "numberOfBytes": "20"
      },
      "t_enum(SwapKind)388": {
        "encoding": "inplace",
        "label": "enum SafeSwapTradeRouter.SwapKind",
        "numberOfBytes": "1"
      },
      "t_enum(TransactionType)394": {
        "encoding": "inplace",
        "label": "enum SafeSwapTradeRouter.TransactionType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_enum(TransactionType)394,t_struct(TokenFee)361_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum SafeSwapTradeRouter.TransactionType => struct SafeSwapTradeRouter.TokenFee))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TransactionType)394,t_struct(TokenFee)361_storage)"
      },
      "t_mapping(t_address,t_struct(AdaptiveLpPriceRange)384_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SafeSwapTradeRouter.AdaptiveLpPriceRange)",
        "numberOfBytes": "32",
        "value": "t_struct(AdaptiveLpPriceRange)384_storage"
      },
      "t_mapping(t_enum(TransactionType)394,t_struct(TokenFee)361_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TransactionType)394",
        "label": "mapping(enum SafeSwapTradeRouter.TransactionType => struct SafeSwapTradeRouter.TokenFee)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenFee)361_storage"
      },
      "t_struct(AdaptiveLpPriceRange)384_storage": {
        "encoding": "inplace",
        "label": "struct SafeSwapTradeRouter.AdaptiveLpPriceRange",
        "members": [
          {
            "astId": 375,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 377,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "lastPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 379,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "upl",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 381,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "lpl",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 383,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "isEnabled",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(SingleSwapFee)406_storage": {
        "encoding": "inplace",
        "label": "struct SafeSwapTradeRouter.SingleSwapFee",
        "members": [
          {
            "astId": 397,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "swapKind",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(SwapKind)388"
          },
          {
            "astId": 399,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "assetOut",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 401,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "beneficiary",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 403,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "percentage",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 405,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "isEnabled",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenFee)361_storage": {
        "encoding": "inplace",
        "label": "struct SafeSwapTradeRouter.TokenFee",
        "members": [
          {
            "astId": 356,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "tokenInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(TokenInfo)373_storage"
          },
          {
            "astId": 360,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "singleSwapFees",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(SingleSwapFee)406_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenInfo)373_storage": {
        "encoding": "inplace",
        "label": "struct SafeSwapTradeRouter.TokenInfo",
        "members": [
          {
            "astId": 364,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "transactionType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(TransactionType)394"
          },
          {
            "astId": 366,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "tokenAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 368,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "feePercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 370,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "isEnabled",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 372,
            "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
            "label": "isDeleted",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}