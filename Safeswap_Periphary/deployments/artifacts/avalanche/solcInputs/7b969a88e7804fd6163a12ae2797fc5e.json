{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/ISafeSwapRouter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\nimport \"./ISafeswapRouter01.sol\";\n\ninterface ISafeSwapRouter is ISafeswapRouter01 {\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/ISafeswapRouter01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface ISafeswapRouter01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external view returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external view returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/SafeSwapTradeRouter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"./interfaces/ISafeSwapRouter.sol\";\nimport \"./interfaces/IFeeJar.sol\";\nimport \"./libraries/Initializable.sol\";\n\ninterface IERC20 {\n    function balanceOf(address owner) external view returns (uint256);\n\n    function decimals() external pure returns (uint8);\n}\n\ninterface ISafeswapFactory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n\ninterface ISafeswapPair {\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function sync() external;\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112,\n            uint112,\n            uint32\n        );\n}\n\nlibrary TransferHelper {\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{ value: value }(new bytes(0));\n        require(success, \"SafeSwapTradeRouter::safeTransferETH: ETH transfer failed\");\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"SafeSwapTradeRouter::safeTransfer: transfer failed\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"SafeSwapTradeRouter::transferFrom: transferFrom failed\"\n        );\n    }\n\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"SafeSwapTradeRouter::safeApprove: approve failed\"\n        );\n    }\n}\n\n/**\n * @title SafeSwapTradeRouter\n * @dev Allows SFM Router-compliant trades to be paid via bsc\n */\ncontract SafeSwapTradeRouter is Initializable {\n    /// @notice Receive function to allow contract to accept BNB\n    receive() external payable {}\n\n    /// @notice Fallback function in case receive function is not matched\n    fallback() external payable {}\n\n    /// @notice FeepJar proxy\n    IFeeJar public feeJar;\n    address public swapRouter;\n    address public admin;\n    uint256 public percent;\n    uint256 public feePercent;\n    mapping(address => bool) public whitelistFfsFee;\n\n    mapping(address => mapping(TransactionType => TokenFee)) private tokensFeeList;\n    address[] private tokenFeeAddresses;\n\n    mapping(address => AdaptiveLpPriceRange) private adaptiveLpPriceRange;\n    bool public isARCBEnabled;\n\n    uint256 private constant LP_PRICE_BASE_AMOUNT = 6;\n\n    event NewFeeJar(address indexed _feeJar);\n    event SetTokenFeeStatus(address indexed _tokenAddress, TransactionType _transactionType, bool _isEnabled);\n    event SetTokenDeletionStatus(address indexed _tokenAddress, TransactionType _transactionType, bool _status);\n    event SubmitLpPriceRange(address indexed _pair, uint256 indexed _upl, uint256 indexed _lpl, uint256 _lastPrice);\n    event SetLpPriceRangeStatus(address indexed _pair, bool _isEnabled);\n    event SetARCBStatus(bool _isARCBEnabled);\n    event SetTokenSwapFeeStatus(\n        address indexed _tokenAddress,\n        TransactionType _transactionType,\n        bool _isEnabled,\n        uint256 indexed _index\n    );\n    event SubmitTokenSwapFee(\n        address indexed _tokenAddress,\n        TransactionType _transactionType,\n        uint256 _tokenFeePercentage,\n        SwapKind _swapKind,\n        address indexed _assetOut,\n        address indexed _beneficiary,\n        uint256 swapFeePercentage,\n        bool isEnabled\n    );\n    event TokenFeeSwapped(\n        address indexed _beneficiary,\n        address indexed _assetIn,\n        address indexed _assetOut,\n        uint256 _feeAmount\n    );\n\n    /// @notice Trade details\n    struct Trade {\n        uint256 amountIn;\n        uint256 amountOut;\n        address[] path;\n        address payable to;\n        uint256 deadline;\n    }\n\n    /// @notice TMI details\n    struct TokenFee {\n        TokenInfo tokenInfo;\n        SingleSwapFee[] singleSwapFees;\n    }\n\n    struct TokenInfo {\n        TransactionType transactionType;\n        address tokenAddress;\n        uint256 feePercentage;\n        bool isEnabled;\n        bool isDeleted;\n    }\n\n    /// @notice adaptive Lp Price Range details\n    struct AdaptiveLpPriceRange {\n        address tokenAddress;\n        uint256 lastPrice;\n        uint256 upl;\n        uint256 lpl;\n        bool isEnabled;\n    }\n\n    enum SwapKind {\n        SEND_ONLY,\n        SWAP_AND_SEND,\n        SWAP_AND_BURN\n    }\n\n    enum FeeKind {\n        TOKEN_FEE,\n        PORTAL_FEE\n    }\n\n    enum TransactionType {\n        SELL,\n        BUY\n    }\n\n    /// @notice FM details\n    struct SingleSwapFee {\n        SwapKind swapKind;\n        address assetOut;\n        address beneficiary;\n        uint256 percentage;\n        bool isEnabled;\n    }\n\n    function _onlyOwner() private view {\n        require(admin == msg.sender, \"Ownable: caller is not the owner\");\n    }\n\n    function _isSwapRangeValid(address[] calldata _path) private {\n        require(_isLpsPriceInRange(_path), \"SafeswapRouter: Transaction rejected by ARC-B\");\n    }\n\n    function _isTokenInfoDeleted(bool _isTokenDeleted) private pure {\n        require(_isTokenDeleted == false, \"SafeSwapTradeRouter: Token already deleted\");\n    }\n\n    function _isValidAdd(address _address) private pure {\n        require(_address != address(0), \"SafeSwapTradeRouter: Token does not exist\");\n    }\n\n    modifier onlyOwner() {\n        _onlyOwner();\n        _;\n    }\n\n    modifier isSwapRangeValid(address[] calldata _path) {\n        _isSwapRangeValid(_path);\n        _;\n    }\n\n    modifier isTokenInfoDelted(bool _isTokenDeleted) {\n        _isTokenInfoDeleted(_isTokenDeleted);\n        _;\n    }\n\n    modifier isValidAdd(address _address) {\n        _isValidAdd(_address);\n        _;\n    }\n\n    function initialize(\n        address _feeJar,\n        address _router,\n        uint256 _feePercent,\n        uint256 _percent\n    ) external initializer {\n        feeJar = IFeeJar(_feeJar);\n        swapRouter = _router;\n        admin = msg.sender;\n        feePercent = _feePercent;\n        percent = _percent;\n        isARCBEnabled = true;\n    }\n\n    /**\n     * @notice set SFM router address\n     * @param _router Address of SFM Router contract\n     */\n    function setRouter(address _router) external onlyOwner {\n        swapRouter = _router;\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        admin = _admin;\n    }\n\n\n    function setFeePercent(uint256 _feePercent) external onlyOwner {\n        feePercent = _feePercent;\n    }\n\n    function sePercent(uint256 _percent) external onlyOwner {\n        percent = _percent;\n    }\n\n    function addFfsWhitelist(address _wl) external onlyOwner {\n        whitelistFfsFee[_wl] = true;\n    }\n\n    function removeFfsWhitelist(address _wl) external onlyOwner {\n        whitelistFfsFee[_wl] = false;\n    }\n\n    /**\n     * @notice set feeJar address\n     * @param _feeJar Address of FeeJar contract\n     */\n    function setFeeJar(address _feeJar) external onlyOwner {\n        feeJar = IFeeJar(_feeJar);\n        emit NewFeeJar(_feeJar);\n    }\n\n    function submitLpPriceRange(\n        address _pair,\n        uint256 _upl,\n        uint256 _lpl\n    ) external onlyOwner {\n        _submitLpPriceRange(_pair, _upl, _lpl);\n    }\n\n    function resetLpLastPrice(address _pair) external onlyOwner isValidAdd(adaptiveLpPriceRange[_pair].tokenAddress) {\n        ISafeswapPair(_pair).sync();\n        adaptiveLpPriceRange[_pair].lastPrice = _getLPPrice(\n            ISafeswapPair(_pair).token0(),\n            ISafeswapPair(_pair).token1()\n        );\n        emit SubmitLpPriceRange(\n            _pair,\n            adaptiveLpPriceRange[_pair].upl,\n            adaptiveLpPriceRange[_pair].lpl,\n            adaptiveLpPriceRange[_pair].lastPrice\n        );\n    }\n\n    function switchARCBActivation() external onlyOwner {\n        isARCBEnabled = !isARCBEnabled;\n        emit SetARCBStatus(isARCBEnabled);\n    }\n\n    function switchLpPriceRangeActivation(address _pair)\n        external\n        onlyOwner\n        isValidAdd(adaptiveLpPriceRange[_pair].tokenAddress)\n    {\n        adaptiveLpPriceRange[_pair].isEnabled = !adaptiveLpPriceRange[_pair].isEnabled;\n\n        emit SetLpPriceRangeStatus(_pair, adaptiveLpPriceRange[_pair].isEnabled);\n    }\n\n    function updateLpPriceRange(\n        address _pair,\n        uint256 _upl,\n        uint256 _lpl\n    ) external onlyOwner isValidAdd(adaptiveLpPriceRange[_pair].tokenAddress) {\n        adaptiveLpPriceRange[_pair].lpl = _lpl;\n        adaptiveLpPriceRange[_pair].upl = _upl;\n        emit SubmitLpPriceRange(_pair, _upl, _lpl, adaptiveLpPriceRange[_pair].lastPrice);\n    }\n\n    function getLpPriceRangeInfo(address _pair) external view returns (AdaptiveLpPriceRange memory) {\n        return adaptiveLpPriceRange[_pair];\n    }\n\n    function submitTokenSwapFee(\n        address _tokenAddress,\n        TransactionType _transactionType,\n        SingleSwapFee calldata _singleSwapFee\n    ) external onlyOwner {\n        uint256 feePercentage = tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage;\n        require(\n            (feePercentage + _singleSwapFee.percentage) <= (percent - feePercent),\n            \"SafeSwapTradeRouter: FeePercentage >100%\"\n        );\n\n        if (tokensFeeList[_tokenAddress][_transactionType].tokenInfo.tokenAddress == address(0)) {\n            if (\n                !tokensFeeList[_tokenAddress][TransactionType.BUY].tokenInfo.isEnabled &&\n                !tokensFeeList[_tokenAddress][TransactionType.SELL].tokenInfo.isEnabled\n            ) {\n                tokenFeeAddresses.push(_tokenAddress);\n            }\n            TokenFee storage _tokenFee = tokensFeeList[_tokenAddress][_transactionType];\n            _tokenFee.singleSwapFees.push(\n                SingleSwapFee(\n                    _singleSwapFee.swapKind,\n                    _singleSwapFee.assetOut,\n                    _singleSwapFee.beneficiary,\n                    _singleSwapFee.percentage,\n                    _singleSwapFee.isEnabled\n                )\n            );\n            _tokenFee.tokenInfo = TokenInfo(\n                _transactionType,\n                _tokenAddress,\n                (feePercentage + _singleSwapFee.percentage),\n                true,\n                false\n            );\n        } else {\n            tokensFeeList[_tokenAddress][_transactionType].singleSwapFees.push(\n                SingleSwapFee(\n                    _singleSwapFee.swapKind,\n                    _singleSwapFee.assetOut,\n                    _singleSwapFee.beneficiary,\n                    _singleSwapFee.percentage,\n                    _singleSwapFee.isEnabled\n                )\n            );\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage += _singleSwapFee.percentage;\n        }\n        emit SubmitTokenSwapFee(\n            _tokenAddress,\n            _transactionType,\n            feePercentage,\n            _singleSwapFee.swapKind,\n            _singleSwapFee.assetOut,\n            _singleSwapFee.beneficiary,\n            _singleSwapFee.percentage,\n            _singleSwapFee.isEnabled\n        );\n    }\n\n    function updateTokenSwapFee(\n        address _tokenAddress,\n        TransactionType _transactionType,\n        SingleSwapFee calldata _singleSwapFee,\n        uint256 _index\n    ) external onlyOwner isValidAdd(tokensFeeList[_tokenAddress][_transactionType].tokenInfo.tokenAddress) {\n        require(\n            tokensFeeList[_tokenAddress][_transactionType].singleSwapFees[_index].isEnabled,\n            \"SafeSwapTradeRouter: Token's swap fee not active\"\n        );\n        require(\n            _index < tokensFeeList[_tokenAddress][_transactionType].singleSwapFees.length,\n            \"SafeSwapTradeRouter: Invalid index\"\n        );\n        require(\n            (tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage +\n                _singleSwapFee.percentage -\n                tokensFeeList[_tokenAddress][_transactionType].singleSwapFees[_index].percentage) <=\n                (percent - feePercent),\n            \"SafeSwapTradeRouter: FeePercentage >100%\"\n        );\n\n        tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage -= tokensFeeList[_tokenAddress][\n            _transactionType\n        ].singleSwapFees[_index].percentage;\n        tokensFeeList[_tokenAddress][_transactionType].singleSwapFees[_index] = SingleSwapFee(\n            _singleSwapFee.swapKind,\n            _singleSwapFee.assetOut,\n            _singleSwapFee.beneficiary,\n            _singleSwapFee.percentage,\n            _singleSwapFee.isEnabled\n        );\n        tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage += _singleSwapFee.percentage;\n\n        emit SubmitTokenSwapFee(\n            _tokenAddress,\n            _transactionType,\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage,\n            _singleSwapFee.swapKind,\n            _singleSwapFee.assetOut,\n            _singleSwapFee.beneficiary,\n            _singleSwapFee.percentage,\n            _singleSwapFee.isEnabled\n        );\n    }\n\n    function switchTokenDeletion(address _tokenAddress, TransactionType _transactionType)\n        external\n        onlyOwner\n        isValidAdd(tokensFeeList[_tokenAddress][_transactionType].tokenInfo.tokenAddress)\n    {\n        tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isDeleted = !tokensFeeList[_tokenAddress][\n            _transactionType\n        ].tokenInfo.isDeleted;\n\n        tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isEnabled = !tokensFeeList[_tokenAddress][\n            _transactionType\n        ].tokenInfo.isEnabled;\n\n        emit SetTokenDeletionStatus(\n            _tokenAddress,\n            _transactionType,\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isDeleted\n        );\n    }\n\n    function switchTokenActivation(address _tokenAddress, TransactionType _transactionType)\n        external\n        onlyOwner\n        isTokenInfoDelted(tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isDeleted)\n    {\n        tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isEnabled = !tokensFeeList[_tokenAddress][\n            _transactionType\n        ].tokenInfo.isEnabled;\n\n        emit SetTokenFeeStatus(\n            _tokenAddress,\n            _transactionType,\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isEnabled\n        );\n    }\n\n    function switchSingleSwapActivation(\n        address _tokenAddress,\n        TransactionType _transactionType,\n        uint256 _index\n    ) external onlyOwner isTokenInfoDelted(tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isDeleted) {\n        require(\n            _index < tokensFeeList[_tokenAddress][_transactionType].singleSwapFees.length,\n            \"SafeSwapTradeRouter: Invalid index\"\n        );\n\n        if (tokensFeeList[_tokenAddress][_transactionType].singleSwapFees[_index].isEnabled) {\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage -= tokensFeeList[_tokenAddress][\n                _transactionType\n            ].singleSwapFees[_index].percentage;\n        } else {\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.feePercentage += tokensFeeList[_tokenAddress][\n                _transactionType\n            ].singleSwapFees[_index].percentage;\n        }\n\n        tokensFeeList[_tokenAddress][_transactionType].singleSwapFees[_index].isEnabled = !tokensFeeList[_tokenAddress][\n            _transactionType\n        ].singleSwapFees[_index].isEnabled;\n\n        emit SetTokenSwapFeeStatus(\n            _tokenAddress,\n            _transactionType,\n            tokensFeeList[_tokenAddress][_transactionType].tokenInfo.isEnabled,\n            _index\n        );\n    }\n\n    /**\n     * @notice Returns the tokens fee information list.\n     * @return the tokens fee information list\n     */\n    function getTokenFeeAddresses() external view returns (address[] memory) {\n        return tokenFeeAddresses;\n    }\n\n    /**\n     * @notice Returns the token swap fee information for a given identifier.\n     * @return the token fee information\n     */\n    function getTokenInfoDetails(address _tokenAddress, TransactionType _transactionType)\n        external\n        view\n        returns (TokenFee memory)\n    {\n        return tokensFeeList[_tokenAddress][_transactionType];\n    }\n\n    /**\n     * @notice Swap tokens for BNB and pay amount of BNB as fee\n     * @param trade Trade details\n     */\n    function swapExactTokensForETHAndFeeAmount(Trade calldata trade) external payable isSwapRangeValid(trade.path) {\n        uint256[] memory lastLpsPrices = _calcLpsLastPrice(trade.path);\n\n        (, uint256 dexFee, uint256 tokenAFee, ) = getFees(trade.path, trade.amountIn, msg.sender);\n        require(msg.value >= dexFee, \"SafeswapRouter: You must send enough BNB to cover fee\");\n\n        _feeAmountBNB(address(this).balance);\n\n        if (tokenAFee > 0) {\n            _claimTokenFee(trade.path[0], msg.sender, TransactionType.SELL, trade.amountIn, tokenAFee, false);\n            _swapExactTokensForETH(\n                _getContractBalance(trade.path[0]),\n                trade.amountOut,\n                trade.path,\n                address(this),\n                trade.to,\n                trade.deadline\n            );\n        } else {\n            _swapExactTokensForETH(trade.amountIn, trade.amountOut, trade.path, msg.sender, trade.to, trade.deadline);\n        }\n\n        _updateLastPairsPrice(trade.path, lastLpsPrices);\n    }\n\n    /**\n     * @notice Swap tokens for BNB and pay amount of BNB as fee\n     * @param trade Trade details\n     */\n    function swapTokensForExactETHAndFeeAmount(Trade calldata trade) external payable isSwapRangeValid(trade.path) {\n        uint256[] memory lastLpsPrices = _calcLpsLastPrice(trade.path);\n\n        (, uint256 dexFee, uint256 tokenAFee, ) = getFees(trade.path, trade.amountIn, msg.sender);\n        require(msg.value >= dexFee, \"SafeswapRouter: You must send enough BNB to cover fee\");\n        _feeAmountBNB(address(this).balance);\n\n        if (tokenAFee > 0) {\n            _claimTokenFee(trade.path[0], msg.sender, TransactionType.SELL, trade.amountIn, tokenAFee, false);\n            _swapTokensForExactETH(\n                _getAmountsOut(_getContractBalance(trade.path[0]), trade.path),\n                _getContractBalance(trade.path[0]),\n                trade.path,\n                address(this),\n                trade.to,\n                trade.deadline\n            );\n        } else {\n            _swapTokensForExactETH(trade.amountOut, trade.amountIn, trade.path, msg.sender, trade.to, trade.deadline);\n        }\n\n        _updateLastPairsPrice(trade.path, lastLpsPrices);\n    }\n\n    /**\n     * @notice Swap BNB for tokens and pay % of BNB input as fee\n     * @param trade Trade details\n     * @param _feeAmount Fee value\n     */\n    function swapExactETHForTokensWithFeeAmount(Trade calldata trade, uint256 _feeAmount)\n        external\n        payable\n        isSwapRangeValid(trade.path)\n    {\n        uint256[] memory lastLpsPrices = _calcLpsLastPrice(trade.path);\n\n        (, uint256 dexFee, , uint256 tokenBFee) = getFees(trade.path, trade.amountIn, msg.sender);\n        require(\n            _feeAmount >= dexFee && (msg.value >= trade.amountIn + dexFee),\n            \"SafeswapRouter: You must send enough BNB to cover fee \"\n        );\n        _distributeTokenFee(trade.path[trade.path.length - 1], TransactionType.BUY, tokenBFee);\n        _feeAmountBNB(dexFee);\n\n        _swapExactETHForTokens((trade.amountIn - tokenBFee), trade.amountOut, trade.path, trade.to, trade.deadline);\n        _updateLastPairsPrice(trade.path, lastLpsPrices);\n    }\n\n    /**\n     * @notice Swap BNB for tokens and pay amount of BNB input as fee\n     * @param trade Trade details\n     * @param _feeAmount Fee value\n     */\n    function swapETHForExactTokensWithFeeAmount(Trade calldata trade, uint256 _feeAmount)\n        external\n        payable\n        isSwapRangeValid(trade.path)\n    {\n        uint256[] memory lastLpsPrices = _calcLpsLastPrice(trade.path);\n\n        (, uint256 dexFee, , uint256 tokenBFee) = getFees(trade.path, trade.amountIn, msg.sender);\n        require(\n            _feeAmount >= dexFee && (msg.value >= trade.amountIn + dexFee),\n            \"SafeswapRouter: You must send enough BNB to cover fee \"\n        );\n        _distributeTokenFee(trade.path[trade.path.length - 1], TransactionType.BUY, tokenBFee);\n        _feeAmountBNB(dexFee);\n\n        _swapETHForExactTokens(trade.amountOut, (trade.amountIn - tokenBFee), trade.path, trade.to, trade.deadline);\n\n        _updateLastPairsPrice(trade.path, lastLpsPrices);\n    }\n\n    /**\n     * @notice Swap tokens for tokens and pay BNB amount as fee\n     * @param trade Trade details\n     */\n    function swapExactTokensForTokensWithFeeAmount(Trade calldata trade) external payable isSwapRangeValid(trade.path) {\n        uint256[] memory lastLpsPrices = _calcLpsLastPrice(trade.path);\n\n        (, uint256 dexFee, uint256 tokenAFee, uint256 tokenBFee) = getFees(trade.path, trade.amountIn, msg.sender);\n        require(msg.value >= dexFee, \"SafeswapRouter: You must send enough BNB to cover fee\");\n        _feeAmountBNB(address(this).balance);\n\n        if (tokenAFee > 0) {\n            _claimTokenFee(trade.path[0], msg.sender, TransactionType.SELL, trade.amountIn, tokenAFee, false);\n        }\n\n        if (tokenBFee > 0) {\n            if (tokenAFee == 0) {\n                TransferHelper.safeTransferFrom(trade.path[0], msg.sender, address(this), trade.amountIn);\n                TransferHelper.safeApprove(trade.path[0], address(swapRouter), _getContractBalance(trade.path[0]));\n            }\n\n            _swapExactTokensForTokens(\n                _getContractBalance(trade.path[0]),\n                trade.amountOut,\n                trade.path,\n                address(this),\n                address(this),\n                trade.deadline\n            );\n            _claimTokenFee(\n                trade.path[trade.path.length - 1],\n                trade.to,\n                TransactionType.BUY,\n                trade.amountOut,\n                tokenBFee,\n                true\n            );\n        } else {\n            if (tokenAFee > 0) {\n                _swapExactTokensForTokens(\n                    _getContractBalance(trade.path[0]),\n                    trade.amountOut,\n                    trade.path,\n                    address(this),\n                    trade.to,\n                    trade.deadline\n                );\n            } else {\n                _swapExactTokensForTokens(\n                    trade.amountIn,\n                    trade.amountOut,\n                    trade.path,\n                    msg.sender,\n                    trade.to,\n                    trade.deadline\n                );\n            }\n        }\n\n        _updateLastPairsPrice(trade.path, lastLpsPrices);\n    }\n\n    /**\n     * @notice Swap tokens for tokens and pay BNB amount as fee\n     * @param trade Trade details\n     */\n    function swapTokensForExactTokensWithFeeAmount(Trade calldata trade) external payable isSwapRangeValid(trade.path) {\n        uint256[] memory lastLpsPrices = _calcLpsLastPrice(trade.path);\n\n        (, uint256 dexFee, uint256 tokenAFee, uint256 tokenBFee) = getFees(trade.path, trade.amountIn, msg.sender);\n        require(msg.value >= dexFee, \"SafeswapRouter: You must send enough BNB to cover fee\");\n        _feeAmountBNB(address(this).balance);\n\n        if (tokenAFee > 0) {\n            _claimTokenFee(trade.path[0], msg.sender, TransactionType.SELL, trade.amountIn, tokenAFee, false);\n        }\n\n        if (tokenBFee > 0) {\n            if (tokenAFee == 0) {\n                TransferHelper.safeTransferFrom(trade.path[0], msg.sender, address(this), trade.amountIn);\n                TransferHelper.safeApprove(trade.path[0], address(swapRouter), _getContractBalance(trade.path[0]));\n            }\n            _swapTokensForExactTokens(\n                trade.amountOut,\n                _getContractBalance(trade.path[0]),\n                trade.path,\n                address(this),\n                address(this),\n                trade.deadline\n            );\n            _claimTokenFee(\n                trade.path[trade.path.length - 1],\n                trade.to,\n                TransactionType.BUY,\n                trade.amountOut,\n                tokenBFee,\n                true\n            );\n        } else {\n            if (tokenAFee > 0) {\n                _swapTokensForExactTokens(\n                    trade.amountOut,\n                    trade.amountIn,\n                    trade.path,\n                    msg.sender,\n                    trade.to,\n                    trade.deadline\n                );\n            } else {\n                _swapTokensForExactTokens(\n                    // _getAmountsOut(_getContractBalance(trade.path[0]), trade.path),\n                    trade.amountOut,\n                    _getContractBalance(trade.path[0]),\n                    trade.path,\n                    address(this),\n                    trade.to,\n                    trade.deadline\n                );\n            }\n        }\n\n        _updateLastPairsPrice(trade.path, lastLpsPrices);\n    }\n\n    /**\n     * @notice Internal implementation of swap BNB for tokens\n     * @param amountIn Amount to swap\n     * @param amountOutMin Minimum amount out\n     * @param path Path for swap\n     * @param to Address to receive tokens\n     * @param deadline Block timestamp deadline for trade\n     */\n    function _swapExactETHForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal {\n        ISafeSwapRouter(swapRouter).swapExactETHForTokensSupportingFeeOnTransferTokens{ value: amountIn }(\n            amountOutMin,\n            path,\n            to,\n            deadline\n        );\n    }\n\n    /**\n     * @notice Internal implementation of swap BNB for tokens\n     * @param amountOut Amount of BNB out\n     * @param amountInMax Max amount in\n     * @param path Path for swap\n     * @param to Address to receive BNB\n     * @param deadline Block timestamp deadline for trade\n     */\n    function _swapETHForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) internal {\n        ISafeSwapRouter(swapRouter).swapETHForExactTokens{ value: amountInMax }(amountOut, path, to, deadline);\n    }\n\n    /**\n     * @notice Internal implementation of swap tokens for BNB\n     * @param amountOut Amount of BNB out\n     * @param amountInMax Max amount in\n     * @param path Path for swap\n     * @param from address to swap token from\n     * @param to Address to receive BNB\n     * @param deadline Block timestamp deadline for trade\n     */\n    function _swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) internal {\n        ISafeSwapRouter(swapRouter).swapTokensForExactETH(amountOut, amountInMax, path, from, to, deadline);\n    }\n\n    /**\n     * @notice Internal implementation of swap tokens for BNB\n     * @param amountIn Amount to swap\n     * @param amountOutMin Minimum amount out\n     * @param path Path for swap\n     * @param from address to swap token from\n     * @param to Address to receive tokens\n     * @param deadline Block timestamp deadline for trade\n     */\n    function _swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address from,\n        address to,\n        uint256 deadline\n    ) internal {\n        ISafeSwapRouter(swapRouter).swapExactTokensForETHSupportingFeeOnTransferTokens(\n            amountIn,\n            amountOutMin,\n            path,\n            from,\n            to,\n            deadline\n        );\n    }\n\n    /**\n     * @notice Internal implementation of swap tokens for tokens\n     * @param amountIn Amount to swap\n     * @param amountOutMin Minimum amount out\n     * @param path Path for swap\n     * @param from address to swap token from\n     * @param to Address to receive tokens\n     * @param deadline Block timestamp deadline for trade\n     */\n    function _swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) internal {\n        ISafeSwapRouter(swapRouter).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            amountIn,\n            amountOutMin,\n            path,\n            from,\n            to,\n            deadline\n        );\n    }\n\n    /**\n     * @notice Internal implementation of swap tokens for tokens\n     * @param amountOut Amount of tokens out\n     * @param amountInMax Max amount in\n     * @param path Path for swap\n     * @param from address to swap token from\n     * @param to Address to receive tokens\n     * @param deadline Block timestamp deadline for trade\n     */\n    function _swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) internal {\n        ISafeSwapRouter(swapRouter).swapTokensForExactTokens(amountOut, amountInMax, path, from, to, deadline);\n    }\n\n    function WETH() internal view returns (address) {\n        return ISafeSwapRouter(swapRouter).WETH();\n    }\n\n    function getReserves(address pair) public view returns (uint256 reserve0, uint256 reserve1) {\n        if (pair == address(0)) {\n            return (0, 0);\n        }\n        (reserve0, reserve1) = getReserves(pair, true);\n    }\n\n    function getReserves(address pair, bool getByBalance) private view returns (uint256 reserve0, uint256 reserve1) {\n        (reserve0, reserve1, ) = ISafeswapPair(pair).getReserves();\n\n        if (getByBalance) {\n            (reserve0, reserve1) = (\n                _getAddressBalance(ISafeswapPair(pair).token0(), pair),\n                _getAddressBalance(ISafeswapPair(pair).token1(), pair)\n            );\n        }\n    }\n\n    function _getAmountOut(\n        uint256 _amountIn,\n        address _tokenA,\n        address _tokenB,\n        bool _getByBalance\n    ) internal view returns (uint256 _amountOut) {\n        (uint256 reserveInput, uint256 reserveOutput) = getReserves(pairFor(_tokenA, _tokenB), _getByBalance);\n        (address token0, ) = sortTokens(_tokenA, _tokenB);\n        (reserveInput, reserveOutput) = _tokenA == token0\n            ? (reserveInput, reserveOutput)\n            : (reserveOutput, reserveInput);\n\n        try ISafeSwapRouter(swapRouter).getAmountOut(_amountIn, reserveInput, reserveOutput) returns (\n            uint256 amountOut\n        ) {\n            _amountOut = amountOut;\n        } catch {\n            _amountOut = 0;\n        }\n    }\n\n    function _isNativeToken(address _token) internal view returns (bool isNative) {\n        isNative = _token == WETH();\n    }\n\n    function _getContractBalance(address _token) internal view returns (uint256) {\n        return IERC20(_token).balanceOf(address(this));\n    }\n\n    function _getAddressBalance(address _token, address _owner) internal view returns (uint256) {\n        return IERC20(_token).balanceOf(address(_owner));\n    }\n\n    function _mapPath(address _token0, address _token1) internal pure returns (address[] memory _path) {\n        _path = new address[](2);\n        _path[0] = _token0;\n        _path[1] = _token1;\n    }\n\n    function _getTokenDecimals(address _token) internal pure returns (uint256) {\n        return IERC20(_token).decimals();\n    }\n\n    function _getAmountsOut(uint256 _amountIn, address[] memory _path) internal view returns (uint256 amountOut) {\n        try ISafeSwapRouter(swapRouter).getAmountsOut(_amountIn, _path) returns (uint256[] memory amounts) {\n            amountOut = amounts[amounts.length - 1];\n        } catch {\n            amountOut = 0;\n        }\n    }\n\n    function _getLPPrice(address token0, address token1) internal view returns (uint256) {\n        return\n            _getAmountsOut(10**(_getTokenDecimals(token0) - LP_PRICE_BASE_AMOUNT), _mapPath(token0, token1)) *\n            10**LP_PRICE_BASE_AMOUNT;\n    }\n\n    /**\n     * @notice returns sorted token addresses, used to handle return values from pairs sorted in this order\n     * @param tokenA Address\n     * @param tokenB Address\n     */\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"SafeswapRouter: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), \"SafeswapRouter: ZERO_ADDRESS\");\n    }\n\n    function pairFor(address _token0, address _token1) internal view returns (address pair) {\n        pair = ISafeswapFactory(ISafeSwapRouter(swapRouter).factory()).getPair(_token0, _token1);\n        require(pair != address(0), \"SafeswapRouter: Cannot find pair\");\n    }\n\n    function getAdaptiveLpPriceRange(address _pair)\n        internal\n        returns (\n            uint256 upl,\n            uint256 lpl,\n            uint256 lastPrice\n        )\n    {\n        if (adaptiveLpPriceRange[_pair].tokenAddress == address(0)) {\n            _submitLpPriceRange(_pair, 150, 50);\n        }\n\n        upl = adaptiveLpPriceRange[_pair].upl;\n        lpl = adaptiveLpPriceRange[_pair].lpl;\n        lastPrice = adaptiveLpPriceRange[_pair].lastPrice;\n    }\n\n    function _syncPair(address _tokenA, address _tokenB) internal {\n        address pair = pairFor(_tokenA, _tokenB);\n        (uint256 reserveInput, uint256 reserveOutput) = getReserves(pair, false);\n\n        (address token0, ) = sortTokens(_tokenA, _tokenB);\n        (reserveInput, reserveOutput) = _tokenA == token0\n            ? (reserveInput, reserveOutput)\n            : (reserveOutput, reserveInput);\n\n        if (\n            _getAddressBalance(_tokenA, pair) - reserveInput > 0 ||\n            _getAddressBalance(_tokenB, pair) - reserveOutput > 0\n        ) {\n            ISafeswapPair(pair).sync();\n        }\n    }\n\n    function _isLpPriceInRange(address _tokenA, address _tokenB) private returns (bool) {\n        address pair = pairFor(_tokenA, _tokenB);\n        (uint256 upl, uint256 lpl, uint256 lastPrice) = getAdaptiveLpPriceRange(pair);\n\n        if (adaptiveLpPriceRange[pair].isEnabled) {\n            (address token0, address token1) = sortTokens(_tokenA, _tokenB);\n            uint256 decimals = _getTokenDecimals(token0);\n            decimals = decimals + _getTokenDecimals(token1);\n            lastPrice = _tokenA == token0 ? lastPrice : 10**decimals / lastPrice;\n\n            uint256 amountIn = 10**(_getTokenDecimals(_tokenA) - LP_PRICE_BASE_AMOUNT);\n            uint256 numerator = amountIn * _getAddressBalance(_tokenB, pair);\n            uint256 denominator = _getAddressBalance(_tokenA, pair) + amountIn;\n            uint256 currentPrice = (numerator / denominator) * 10**LP_PRICE_BASE_AMOUNT;\n\n            if (currentPrice > ((upl * lastPrice) / 100) || currentPrice < ((lpl * lastPrice) / 100)) return false;\n        }\n\n        _syncPair(_tokenA, _tokenB);\n\n        return true;\n    }\n\n    function _isLpsPriceInRange(address[] calldata _path) private returns (bool isInRange) {\n        if (isARCBEnabled) {\n            for (uint256 i; i < _path.length - 1; i++) {\n                // bool isLpPriceInRange = _isLpPriceInRange(_path[i], _path[i + 1]);\n                if (!_isLpPriceInRange(_path[i], _path[i + 1])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    function _calcLpsLastPrice(address[] calldata _path) internal view returns (uint256[] memory amounts) {\n        amounts = new uint256[](_path.length - 1);\n        for (uint256 i; i < _path.length - 1; i++) {\n            amounts[i] = _getLPPrice(_path[i], _path[i + 1]);\n        }\n    }\n\n    // /**\n    //  * @notice Get swap fee based on the amounts\n    //  * @param amountIn Amount in to calculate fee\n    //  * @param tokenA token1 for swap\n    //  * @param tokenB token2 for swap\n    //  * @return _fee the tokens fee amount value\n    //  */\n    function getDexSwapFee(\n        uint256 amountIn,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 _fee) {\n        uint256 amountOut;\n\n        if (!_isNativeToken(tokenA)) {\n            amountOut = _getAmountOut(amountIn, tokenA, WETH(), true);\n            if (amountOut == 0) {\n                amountOut = _getAmountOut(amountIn, tokenA, tokenB, true);\n                amountOut = _getAmountOut(amountOut, tokenB, WETH(), true);\n            }\n\n            _fee = (amountOut * feePercent) / percent;\n        }\n\n        if (_isNativeToken(tokenA) || amountOut == 0) {\n            int256 decimals = 18 - int8(IERC20(tokenA).decimals());\n            if (decimals < 0) {\n                decimals = decimals * -1;\n                _fee = ((amountIn * feePercent) / percent) / 10**uint256(decimals);\n            } else {\n                _fee = ((amountIn * feePercent) / percent) * 10**uint256(decimals);\n            }\n        }\n    }\n\n    /**\n     * @notice Get token swap fee for single token\n     * @param _amount Amount to calculate fee\n     * @param _transactionType BUY or SELL\n     * @param _token token addresses\n     * @param _tokenADecimals decimals for tokenA\n     * @param _tokenBDecimals decimals for tokenB\n     * @return _fee token swap fees amount\n     */\n    function getTokenSwapFee(\n        uint256 _amount,\n        TransactionType _transactionType,\n        address _token,\n        uint256 _tokenADecimals,\n        uint256 _tokenBDecimals\n    ) internal view returns (uint256 _fee) {\n        if (\n            !_isNativeToken(_token) &&\n            tokensFeeList[_token][_transactionType].tokenInfo.isEnabled &&\n            tokensFeeList[_token][_transactionType].tokenInfo.feePercentage > 0 &&\n            !whitelistFfsFee[msg.sender]\n        ) {\n            int256 decimals = int256(_tokenADecimals) - int256(_tokenBDecimals);\n\n            if (decimals < 0) {\n                decimals = decimals * -1;\n                _fee = (((_amount * tokensFeeList[_token][_transactionType].tokenInfo.feePercentage) / percent) /\n                    10**uint256(decimals));\n            } else {\n                _fee =\n                    ((_amount * tokensFeeList[_token][_transactionType].tokenInfo.feePercentage) / percent) *\n                    10**uint256(decimals);\n            }\n        }\n    }\n\n    function getFees(\n        address[] calldata _path,\n        uint256 _amountIn,\n        address _address\n    )\n        public\n        view\n        returns (\n            uint256 totalBNBFee,\n            uint256 dexFee,\n            uint256 tokenAFee,\n            uint256 tokenBFee\n        )\n    {\n        if (whitelistFfsFee[_address]) {\n            return (0, 0, 0, 0);\n        }\n\n        uint256 length = _path.length - 1;\n        (address _tokenInput, address _tokenOutput) = (_path[0], _path[length]);\n\n        uint256 amountInput = _amountIn;\n\n        for (uint256 i; i < length; i++) {\n            (address input, address output) = (_path[i], _path[i + 1]);\n\n            dexFee += getDexSwapFee(amountInput, input, output);\n\n            uint256 feeA = getTokenSwapFee(\n                amountInput,\n                TransactionType.SELL,\n                input,\n                _getTokenDecimals(_tokenInput),\n                _getTokenDecimals(input)\n            );\n\n            uint256 amountOutput = _getAmountOut(amountInput, input, output, true);\n\n            amountInput = amountOutput;\n\n            uint256 feeB = getTokenSwapFee(\n                amountOutput,\n                TransactionType.BUY,\n                output,\n                _getTokenDecimals(_tokenOutput),\n                _getTokenDecimals(output)\n            );\n\n            if (_isNativeToken(_tokenInput)) {\n                tokenAFee += feeA;\n                tokenBFee += _getAmountOut(feeB, output, WETH(), true);\n            } else {\n                tokenAFee += feeA;\n                tokenBFee += feeB;\n            }\n        }\n\n        if (_isNativeToken(_tokenInput)) {\n            totalBNBFee = tokenAFee + tokenBFee + dexFee;\n        } else {\n            if (_isNativeToken(_tokenOutput)) {\n                totalBNBFee = _getAmountOut(tokenAFee, _tokenInput, WETH(), true) + tokenBFee + dexFee;\n            } else {\n                totalBNBFee =\n                    _getAmountOut(tokenAFee, _tokenInput, WETH(), true) +\n                    _getAmountOut(tokenBFee, _tokenOutput, WETH(), true) +\n                    dexFee;\n            }\n        }\n    }\n\n    function _submitLpPriceRange(\n        address _pair,\n        uint256 _upl,\n        uint256 _lpl\n    ) private isValidAdd(_pair) {\n        uint256 lastPrice = _getLPPrice(ISafeswapPair(_pair).token0(), ISafeswapPair(_pair).token1());\n\n        AdaptiveLpPriceRange storage _adaptiveLpPriceRange = adaptiveLpPriceRange[_pair];\n        _adaptiveLpPriceRange.lastPrice = lastPrice;\n        _adaptiveLpPriceRange.tokenAddress = _pair;\n        _adaptiveLpPriceRange.upl = _upl;\n        _adaptiveLpPriceRange.lpl = _lpl;\n        _adaptiveLpPriceRange.isEnabled = true;\n\n        emit SubmitLpPriceRange(_pair, _upl, _lpl, lastPrice);\n    }\n\n    function _updateLastPairPrice(\n        address _tokenA,\n        address _tokenB,\n        uint256 _updatedPrice\n    ) private {\n        address pair = pairFor(_tokenA, _tokenB);\n        (address token0, address token1) = sortTokens(_tokenA, _tokenB);\n        // uint256 decimals = _getTokenDecimals(token0);\n        // decimals = decimals + _getTokenDecimals(token1);\n        _updatedPrice = _tokenA == token0\n            ? _updatedPrice\n            : 10**(_getTokenDecimals(token0) + _getTokenDecimals(token1)) / _updatedPrice;\n        adaptiveLpPriceRange[pair].lastPrice = _updatedPrice;\n    }\n\n    function _updateLastPairsPrice(address[] memory _path, uint256[] memory _lastPrices) private {\n        for (uint256 i; i < _path.length - 1; i++) {\n            _updateLastPairPrice(_path[i], _path[i + 1], _lastPrices[i]);\n        }\n    }\n\n    function _distributeTokenFee(\n        address _token,\n        TransactionType _transactionType,\n        uint256 _totalFeeAmount\n    ) private {\n        uint256 feeAmount;\n        uint256 claimedAmount;\n\n        if (tokensFeeList[_token][_transactionType].tokenInfo.isEnabled && _totalFeeAmount > 0) {\n            uint256 length = tokensFeeList[_token][_transactionType].singleSwapFees.length;\n\n            for (uint256 i; i < length; i++) {\n                if (\n                    tokensFeeList[_token][_transactionType].singleSwapFees[i].isEnabled &&\n                    tokensFeeList[_token][_transactionType].singleSwapFees[i].percentage > 0\n                ) {\n                    address beneficiary = tokensFeeList[_token][_transactionType].singleSwapFees[i].beneficiary;\n                    address assetOut = tokensFeeList[_token][_transactionType].singleSwapFees[i].assetOut;\n                    if (i == (length - 1)) {\n                        feeAmount = _totalFeeAmount - claimedAmount;\n                    } else {\n                        uint256 swapKindPercentage = (tokensFeeList[_token][_transactionType]\n                            .singleSwapFees[i]\n                            .percentage * percent) / tokensFeeList[_token][_transactionType].tokenInfo.feePercentage;\n\n                        feeAmount = ((_totalFeeAmount * swapKindPercentage) / percent);\n                        claimedAmount = claimedAmount + feeAmount;\n                    }\n\n                    if (tokensFeeList[_token][_transactionType].singleSwapFees[i].swapKind == SwapKind.SEND_ONLY) {\n                        TransferHelper.safeTransferETH(beneficiary, feeAmount);\n                    } else {\n                        _swapExactETHForTokens(\n                            feeAmount,\n                            0,\n                            _mapPath(WETH(), assetOut),\n                            beneficiary,\n                            block.timestamp + 20\n                        );\n                    }\n\n                    emit TokenFeeSwapped(beneficiary, _token, assetOut, feeAmount);\n                }\n            }\n        }\n    }\n\n    function _claimTokenFee(\n        address _token,\n        address _address,\n        TransactionType _transactionType,\n        uint256 _amountIn,\n        uint256 _totalFeeAmount,\n        bool _transferBalance\n    ) private {\n        if (tokensFeeList[_token][_transactionType].tokenInfo.isEnabled && _totalFeeAmount > 0) {\n            if (!_transferBalance) {\n                TransferHelper.safeTransferFrom(_token, _address, address(this), _amountIn);\n            }\n\n            _feeWithTokens(_totalFeeAmount, _token, false);\n\n            _distributeTokenFee(_token, _transactionType, address(this).balance);\n\n            if (_transferBalance) {\n                _transferContractBalance(_token, _address);\n            } else {\n                TransferHelper.safeApprove(_token, address(swapRouter), _getContractBalance(_token));\n            }\n        }\n    }\n\n    function _transferContractBalance(address _token, address _to) internal {\n        TransferHelper.safeTransfer(_token, payable(_to), _getContractBalance(_token));\n    }\n\n    /**\n     * @notice Fee specific amount of BNB\n     * @param feeAmount Amount to fee\n     */\n    function _feeAmountBNB(uint256 feeAmount) internal {\n        if (feeAmount > 0) {\n            feeJar.fee{ value: feeAmount }();\n        }\n    }\n\n    /**\n     * @notice Convert a token balance into BNB and then fee\n     * @param _fee Amount to swap\n     * @param _payInToken token address would be used to pay with\n     * @param _claimFee indicate to transfer fee or not\n     */\n    function _feeWithTokens(\n        uint256 _fee,\n        address _payInToken,\n        bool _claimFee\n    ) internal {\n        TransferHelper.safeApprove(_payInToken, address(swapRouter), _fee);\n\n        _swapExactTokensForETH(_fee, 0, _mapPath(_payInToken, WETH()), address(this), address(this), block.timestamp);\n        if (_claimFee) {\n            _feeAmountBNB(address(this).balance);\n        }\n    }\n}"
    },
    "contracts/interfaces/IFeeJar.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\ninterface IFeeJar {\n    function fee() external payable;\n}\n"
    },
    "contracts/libraries/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity 0.8.11;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\ncontract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(\n            _initializing || _isConstructor() || !_initialized,\n            \"Initializable: contract is already initialized\"\n        );\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        // extcodesize checks the size of the code stored in an address, and\n        // address returns the current address. Since the code is still not\n        // deployed when running a constructor, any checks on its code size will\n        // yield zero, making it an effective way to detect if a contract is\n        // under construction or not.\n        address self = address(this);\n        uint256 cs;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            cs := extcodesize(self)\n        }\n        return cs == 0;\n    }\n}\n"
    },
    "contracts/SafeswapRouterProxy2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\nimport \"./libraries/lib.sol\";\nimport \"./libraries/Initializable.sol\";\n\ncontract SafeswapRouterProxy2 is Initializable {\n    uint256 public constant ONE = 1e18;\n    address public factory;\n    address public WETH;\n    bool private killSwitch;\n    address public admin;\n    uint256 tokensCount;\n\n    mapping(address => bool) private _lpTokenLockStatus;\n    mapping(address => uint256) private _locktime;\n    mapping(address => TokenInfo) nameToInfo;\n    mapping(uint256 => address) public idToAddress;\n    address public routerTrade;\n    mapping(address => bool) public whitelistAccess;\n    mapping(uint256 => address) public impls;\n\n    event isSwiched(bool newSwitch);\n\n    event RegisterToken(\n        string tokenName,\n        address tokenAddress,\n        address feesAddress,\n        uint256 buyFeePercent,\n        uint256 sellFeePercent,\n        bool isUpdate\n    );\n\n    event UnregisterToken(address tokenAddress);\n\n    struct TokenInfo {\n        bool enabled;\n        bool isDeleted;\n        string tokenName;\n        address tokenAddress;\n        address feesAddress;\n        uint256 buyFeePercent;\n        uint256 sellFeePercent;\n    }\n\n    function version() view public returns (uint256) {\n        return 2;\n    }\n\n    function _onlyOwner() private view {\n        require(admin == msg.sender, \"Ownable: caller is not the owner\");\n    }\n\n    function _ensure(uint256 deadline) private view {\n        require(deadline >= block.timestamp, \"SafeswapRouter: EXPIRED\");\n    }\n\n    function _onlyRouterTrade() private view {\n        require(msg.sender == routerTrade, \"SafeswapRouter: ONLY_ROUTER_TRADE\");\n    }\n\n    function _onlyWhitelist() private view {\n        require(whitelistAccess[msg.sender], \"SafeswapRouter: ONLY_WHITELIST\");\n    }\n\n    modifier onlyOwner() {\n        _onlyOwner();\n        _;\n    }\n\n    modifier ensure(uint256 deadline) {\n        _ensure(deadline);\n        _;\n    }\n\n    modifier onlyRouterTrade() {\n        _onlyRouterTrade();\n        _;\n    }\n\n    modifier onlyWhitelist() {\n        _onlyWhitelist();\n        _;\n    }\n\n    receive() external payable {}\n\n    function getTokenDeduction(address token, uint256 amount) external view returns (uint256, address) {\n        if (nameToInfo[token].enabled == false || killSwitch == true) return (0, address(0));\n        uint256 deduction = (amount * nameToInfo[token].buyFeePercent) / ONE;\n        return (deduction, nameToInfo[token].feesAddress);\n    }\n\n    function registerToken(\n        string memory tokenName,\n        address tokenAddress,\n        address feesAddress,\n        uint256 buyFeePercent,\n        uint256 sellFeePercent,\n        bool isUpdate\n    ) public onlyOwner {\n        if (!isUpdate) {\n            require(nameToInfo[tokenAddress].tokenAddress == address(0), \"token already exists\");\n            idToAddress[tokensCount] = tokenAddress;\n            tokensCount++;\n        } else {\n            require(nameToInfo[tokenAddress].tokenAddress != address(0), \"token does not exist\");\n        }\n        nameToInfo[tokenAddress].enabled = true;\n        nameToInfo[tokenAddress].isDeleted = false;\n        nameToInfo[tokenAddress].tokenName = tokenName;\n        nameToInfo[tokenAddress].tokenAddress = tokenAddress;\n        nameToInfo[tokenAddress].feesAddress = feesAddress;\n        nameToInfo[tokenAddress].buyFeePercent = buyFeePercent;\n        nameToInfo[tokenAddress].sellFeePercent = sellFeePercent;\n\n        emit RegisterToken(tokenName, tokenAddress, feesAddress, buyFeePercent, sellFeePercent, isUpdate);\n    }\n\n    function unregisterToken(address tokenAddress) external onlyOwner {\n        require(nameToInfo[tokenAddress].tokenAddress != address(0), \"token does not exist\");\n        require(nameToInfo[tokenAddress].isDeleted == false, \"token already deleted\");\n\n        nameToInfo[tokenAddress].isDeleted = true;\n        nameToInfo[tokenAddress].enabled = false;\n\n        emit UnregisterToken(tokenAddress);\n    }\n\n    // function to disable token stp\n    function switchSTPToken(address _tokenAddress) public onlyOwner {\n        require(nameToInfo[_tokenAddress].isDeleted == false, \"token already deleted\");\n        nameToInfo[_tokenAddress].enabled = !nameToInfo[_tokenAddress].enabled;\n    }\n\n    function getKillSwitch() public view returns (bool) {\n        return killSwitch;\n    }\n\n    function switchSTP() public onlyOwner returns (bool) {\n        killSwitch = !killSwitch;\n        emit isSwiched(killSwitch);\n        return killSwitch;\n    }\n\n    function getAllStpTokens() public view returns (TokenInfo[] memory) {\n        uint32 count = 0;\n        for (uint256 i = 0; i < tokensCount; i++) {\n            if (!nameToInfo[idToAddress[i]].isDeleted) {\n                count++;\n            }\n        }\n\n        TokenInfo[] memory response = new TokenInfo[](count);\n        uint256 index = 0;\n        for (uint256 i = 0; i < tokensCount; i++) {\n            if (!nameToInfo[idToAddress[i]].isDeleted) {\n                response[index++] = nameToInfo[idToAddress[i]];\n            }\n        }\n\n        return response;\n    }\n\n    function getTokenSTP(address _tokenAddress) public view returns (TokenInfo memory) {\n        return nameToInfo[_tokenAddress];\n    }\n\n    // **** SWAP ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(\n        uint256[] memory amounts,\n        address[] memory path,\n        address _to\n    ) internal virtual {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = SafeswapLibrary.sortTokens(input, output);\n            uint256 amountOut = amounts[i + 1];\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\n                ? (uint256(0), amountOut)\n                : (amountOut, uint256(0));\n            address to = i < path.length - 2 ? SafeswapLibrary.pairFor(factory, output, path[i + 2]) : _to;\n            ISafeswapPair(SafeswapLibrary.pairFor(factory, input, output)).swap(\n                amount0Out,\n                amount1Out,\n                to,\n                new bytes(0)\n            );\n        }\n    }\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual ensure(deadline) onlyWhitelist returns (uint256[] memory amounts) {\n        amounts = SafeswapLibrary.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, \"SafeswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\");\n        // snippet for 'sell' fees !\n        if (nameToInfo[path[0]].enabled == true && killSwitch == false && (nameToInfo[path[0]].sellFeePercent > 0)) {\n            uint256 deduction = (amountIn * nameToInfo[path[0]].sellFeePercent) / ONE;\n            amountIn = amountIn - deduction;\n            TransferHelper.safeTransferFrom(path[0], msg.sender, nameToInfo[path[0]].feesAddress, deduction);\n        }\n        amounts = SafeswapLibrary.getAmountsOut(factory, amountIn, path);\n        // same code snippet for 'buy' fees\n        if (nameToInfo[path[1]].enabled == true && killSwitch == false && (nameToInfo[path[1]].buyFeePercent > 0)) {\n            uint256 amountOut = amounts[amounts.length - 1];\n            uint256 deduction = (amountOut * nameToInfo[path[1]].buyFeePercent) / ONE;\n            amountOut = amountOut - deduction;\n            amounts[amounts.length - 1] = amountOut;\n        }\n\n        TransferHelper.safeTransferFrom(path[0], msg.sender, SafeswapLibrary.pairFor(factory, path[0], path[1]), amounts[0]);\n        _swap(amounts, path, to);\n    }\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external virtual ensure(deadline) onlyWhitelist returns (uint256[] memory amounts) {\n        amounts = SafeswapLibrary.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, \"SafeswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\");\n        // snippet for 'sell' fees !\n        if (nameToInfo[path[0]].enabled == true && killSwitch == false && (nameToInfo[path[0]].sellFeePercent > 0)) {\n            uint256 deduction = (amountIn * nameToInfo[path[0]].sellFeePercent) / ONE;\n            amountIn = amountIn - deduction;\n            TransferHelper.safeTransferFrom(path[0], from, nameToInfo[path[0]].feesAddress, deduction);\n        }\n        amounts = SafeswapLibrary.getAmountsOut(factory, amountIn, path);\n        // same code snippet for 'buy' fees\n        if (nameToInfo[path[1]].enabled == true && killSwitch == false && (nameToInfo[path[1]].buyFeePercent > 0)) {\n            uint256 amountOut = amounts[amounts.length - 1];\n            uint256 deduction = (amountOut * nameToInfo[path[1]].buyFeePercent) / ONE;\n            amountOut = amountOut - deduction;\n            amounts[amounts.length - 1] = amountOut;\n        }\n\n        TransferHelper.safeTransferFrom(path[0], from, SafeswapLibrary.pairFor(factory, path[0], path[1]), amounts[0]);\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual ensure(deadline) onlyWhitelist returns (uint256[] memory amounts) {\n        amounts = SafeswapLibrary.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, \"SafeswapRouter: EXCESSIVE_INPUT_AMOUNT\");\n        if (nameToInfo[path[1]].enabled == true && killSwitch == false && (nameToInfo[path[1]].buyFeePercent > 0)) {\n            uint256 deduction = (amountOut * nameToInfo[path[1]].buyFeePercent) / ONE;\n            amountOut = amountOut - deduction;\n        }\n        amounts = SafeswapLibrary.getAmountsIn(factory, amountOut, path);\n        if (nameToInfo[path[0]].enabled == true && killSwitch == false && (nameToInfo[path[0]].sellFeePercent > 0)) {\n            uint256 amountIn = amounts[0];\n            uint256 deduction = (amountIn * nameToInfo[path[0]].sellFeePercent) / ONE;\n            amounts[0] = amountIn - deduction;\n            TransferHelper.safeTransferFrom(path[0], msg.sender, nameToInfo[path[0]].feesAddress, deduction);\n        }\n        amounts = SafeswapLibrary.getAmountsOut(factory, amounts[0], path);\n\n        TransferHelper.safeTransferFrom(path[0], msg.sender, SafeswapLibrary.pairFor(factory, path[0], path[1]), amounts[0]);\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external virtual ensure(deadline) onlyWhitelist returns (uint256[] memory amounts) {\n        amounts = SafeswapLibrary.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, \"SafeswapRouter: EXCESSIVE_INPUT_AMOUNT\");\n        if (nameToInfo[path[1]].enabled == true && killSwitch == false && (nameToInfo[path[1]].buyFeePercent > 0)) {\n            uint256 deduction = (amountOut * nameToInfo[path[1]].buyFeePercent) / ONE;\n            amountOut = amountOut - deduction;\n        }\n        amounts = SafeswapLibrary.getAmountsIn(factory, amountOut, path);\n        if (nameToInfo[path[0]].enabled == true && killSwitch == false && (nameToInfo[path[0]].sellFeePercent > 0)) {\n            uint256 amountIn = amounts[0];\n            uint256 deduction = (amountIn * nameToInfo[path[0]].sellFeePercent) / ONE;\n            amounts[0] = amountIn - deduction;\n            TransferHelper.safeTransferFrom(path[0], from, nameToInfo[path[0]].feesAddress, deduction);\n        }\n        amounts = SafeswapLibrary.getAmountsOut(factory, amounts[0], path);\n\n        TransferHelper.safeTransferFrom(path[0], from, SafeswapLibrary.pairFor(factory, path[0], path[1]), amounts[0]);\n        _swap(amounts, path, to);\n    }\n\n\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to)\n        internal\n        virtual\n        returns (uint256 amount0Out, uint256 amount1Out)\n    {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = SafeswapLibrary.sortTokens(input, output);\n            ISafeswapPair pair = ISafeswapPair(SafeswapLibrary.pairFor(factory, input, output));\n            uint256 amountInput;\n            uint256 amountOutput;\n            {\n                // scope to avoid stack too deep errors\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0\n                    ? (reserve0, reserve1)\n                    : (reserve1, reserve0);\n                amountInput = IERC20(input).balanceOf(address(pair)) - reserveInput;\n                amountOutput = SafeswapLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);\n            }\n            if (nameToInfo[output].enabled == true && killSwitch == false && (nameToInfo[output].buyFeePercent > 0)) {\n                uint256 deduction = (amountOutput * nameToInfo[output].buyFeePercent) / ONE;\n                amountOutput = amountOutput - deduction;\n            }\n            (amount0Out, amount1Out) = input == token0 ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\n            address to = i < path.length - 2 ? SafeswapLibrary.pairFor(factory, output, path[i + 2]) : _to;\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual ensure(deadline) onlyWhitelist {\n        if (nameToInfo[path[0]].enabled == true && killSwitch == false && (nameToInfo[path[0]].sellFeePercent > 0)) {\n            uint256 deduction = (amountIn * nameToInfo[path[0]].sellFeePercent) / ONE;\n            amountIn = amountIn - deduction;\n            TransferHelper.safeTransferFrom(path[0], msg.sender, nameToInfo[path[0]].feesAddress, deduction);\n        }\n\n        TransferHelper.safeTransferFrom(path[0], msg.sender, SafeswapLibrary.pairFor(factory, path[0], path[1]), amountIn);\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(to) - balanceBefore >= amountOutMin,\n            \"SafeswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n    }\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external virtual ensure(deadline) onlyWhitelist {\n        if (nameToInfo[path[0]].enabled == true && killSwitch == false && (nameToInfo[path[0]].sellFeePercent > 0)) {\n            uint256 deduction = (amountIn * nameToInfo[path[0]].sellFeePercent) / ONE;\n            amountIn = amountIn - deduction;\n            TransferHelper.safeTransferFrom(path[0], from, nameToInfo[path[0]].feesAddress, deduction);\n        }\n\n        TransferHelper.safeTransferFrom(path[0], from, SafeswapLibrary.pairFor(factory, path[0], path[1]), amountIn);\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(to) - balanceBefore >= amountOutMin,\n            \"SafeswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n    }\n\n}\n"
    },
    "contracts/libraries/lib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// File: contracts/IWETH.sol\n\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n\n// File: contracts/IERC20.sol\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n}\n\n// File: contracts/ISafeswapPair.sol\n\ninterface ISafeswapPair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// File: contracts/SafeswapLibrary.sol\n\nlibrary SafeswapLibrary {\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"SafeswapLibrary: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), \"SafeswapLibrary: ZERO_ADDRESS\");\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairForWithInitHash(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"0fc91b74b75a47fecaa0cf17936d873d34644cc50bd4adf2d450b8c0e78b1489\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (address pair) {\n        pair = ISafeswapFactory(factory).getPair(tokenA, tokenB);\n        require(pair != address(0), \"Cannot find pair\");\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        pairFor(factory, tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = ISafeswapPair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, \"SafeswapLibrary: INSUFFICIENT_AMOUNT\");\n        require(reserveA > 0 && reserveB > 0, \"SafeswapLibrary: INSUFFICIENT_LIQUIDITY\");\n        amountB = (amountA * reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, \"SafeswapLibrary: INSUFFICIENT_INPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"SafeswapLibrary: INSUFFICIENT_LIQUIDITY\");\n        uint256 amountInWithFee = amountIn * 998;\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, \"SafeswapLibrary: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"SafeswapLibrary: INSUFFICIENT_LIQUIDITY\");\n        uint256 numerator = reserveIn * amountOut * 1000;\n        uint256 denominator = (reserveOut - amountOut) * 998;\n        amountIn = (numerator / denominator) + 1;\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"SafeswapLibrary: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"SafeswapLibrary: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n\n// File: contracts/ISafeswapRouter01.sol\n\ninterface ISafeswapRouter01 {\n    function factory() external view returns (address);\n\n    function WETH() external view returns (address);\n\n    function setRouterTrade(address _routerTrade) external;\n\n    function setWhitelist(address _user, bool _status) external;\n\n    function setImpls(uint256 _implIndex, address _impl) external;\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\ninterface ISafeswapRouter02 {\n\n    struct TokenInfo {\n        bool enabled;\n        bool isDeleted;\n        string tokenName;\n        address tokenAddress;\n        address feesAddress;\n        uint256 buyFeePercent;\n        uint256 sellFeePercent;\n    }\n\n    function getTokenDeduction(address token, uint256 amount) external view returns (uint256, address);\n\n    function registerToken(\n        string memory tokenName,\n        address tokenAddress,\n        address feesAddress,\n        uint256 buyFeePercent,\n        uint256 sellFeePercent,\n        bool isUpdate\n    ) external;\n\n    function unregisterToken(address tokenAddress) external;\n\n    // function to disable token stp\n    function switchSTPToken(address _tokenAddress) external;\n\n    function getKillSwitch() external view returns (bool);\n\n    function switchSTP() external returns (bool);\n    function getAllStpTokens() external returns (TokenInfo[] memory);\n\n    function getTokenSTP(address _tokenAddress) external view returns (TokenInfo memory);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n    external\n    returns (\n        uint256 amountA,\n        uint256 amountB,\n        uint256 liquidity\n    );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n    external\n    payable\n    returns (\n        uint256 amountToken,\n        uint256 amountETH,\n        uint256 liquidity\n    );\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::safeApprove: approve failed\"\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::safeTransfer: transfer failed\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::transferFrom: transferFrom failed\"\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{ value: value }(new bytes(0));\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\n    }\n}\n\n// File: contracts/ISafeswapFactory.sol\n\ninterface ISafeswapFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function router() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function isBlacklistedStatus(address account) external view returns (bool);\n\n    function approvePartnerStatus(address account) external view returns (bool);\n\n    function isBlacklistedToken(address account) external view returns (bool);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(\n        address tokenA,\n        address tokenB,\n        address to\n    ) external returns (address pair);\n}\n"
    },
    "contracts/SafeswapRouterProxy1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\nimport \"./libraries/lib.sol\";\nimport \"./libraries/Initializable.sol\";\n\ncontract SafeswapRouterProxy1 is ISafeswapRouter01, Initializable {\n    uint256 public constant ONE = 1e18;\n    address public override factory;\n    address public override WETH;\n    bool private killSwitch;\n    address public admin;\n    uint256 tokensCount;\n\n    mapping(address => bool) private _lpTokenLockStatus;\n    mapping(address => uint256) private _locktime;\n    mapping(address => TokenInfo) nameToInfo;\n    mapping(uint256 => address) public idToAddress;\n    address public routerTrade;\n    mapping(address => bool) public whitelistAccess;\n    mapping(uint256 => address) public impls;\n\n    event isSwiched(bool newSwitch);\n\n    event RegisterToken(\n        string tokenName,\n        address tokenAddress,\n        address feesAddress,\n        uint256 buyFeePercent,\n        uint256 sellFeePercent,\n        bool isUpdate\n    );\n\n    event UnregisterToken(address tokenAddress);\n\n    struct TokenInfo {\n        bool enabled;\n        bool isDeleted;\n        string tokenName;\n        address tokenAddress;\n        address feesAddress;\n        uint256 buyFeePercent;\n        uint256 sellFeePercent;\n    }\n\n    function initialize(address _factory, address _WETH) external initializer {\n        factory = _factory;\n        WETH = _WETH;\n        admin = msg.sender;\n        tokensCount = 0;\n        killSwitch = false;\n    }\n\n    function setRouterTrade(address _routerTrade) override public onlyOwner {\n        routerTrade = _routerTrade;\n    }\n\n    function setWhitelist(address _user, bool _status) override external onlyOwner {\n        whitelistAccess[_user] = _status;\n    }\n\n    function setWETH(address _weth) public onlyOwner {\n        WETH = _weth;\n    }\n\n    function version() public view returns (uint256) {\n        return 1;\n    }\n\n    function setImpls(uint256 _implIndex, address _impl) public override onlyOwner {\n        impls[_implIndex] = _impl;\n    }\n\n    function _onlyOwner() private view {\n        require(admin == msg.sender, \"Ownable: caller is not the owner\");\n    }\n\n    function _ensure(uint256 deadline) private view {\n        require(deadline >= block.timestamp, \"SafeswapRouter: EXPIRED\");\n    }\n\n    function _onlyRouterTrade() private view {\n        require(msg.sender == routerTrade, \"SafeswapRouter: ONLY_ROUTER_TRADE\");\n    }\n\n    modifier onlyOwner() {\n        _onlyOwner();\n        _;\n    }\n\n    modifier ensure(uint256 deadline) {\n        _ensure(deadline);\n        _;\n    }\n\n    modifier onlyRouterTrade() {\n        _onlyRouterTrade();\n        _;\n    }\n\n    function _onlyWhitelist() private view {\n        require(whitelistAccess[msg.sender], \"SafeswapRouter: ONLY_WHITELIST\");\n    }\n\n    modifier onlyWhitelist() {\n        _onlyWhitelist();\n        _;\n    }\n\n    receive() external payable {}\n    fallback() external {\n        _delegate(impls[version()]);\n    }\n\n    function _delegate(address _impl) internal virtual {\n        assembly {\n        // Copy msg.data. We take full control of memory in this inline assembly\n        // block because it will not return to Solidity code. We overwrite the\n        // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n        // Call the implementation.\n        // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), _impl, 0, calldatasize(), 0, 0)\n\n        // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to\n    ) internal virtual returns (uint256 amountA, uint256 amountB) {\n        // create the pair if it doesn't exist yet\n        if (ISafeswapFactory(factory).getPair(tokenA, tokenB) == address(0)) {\n            ISafeswapFactory(factory).createPair(tokenA, tokenB, to);\n        }\n        (uint256 reserveA, uint256 reserveB) = SafeswapLibrary.getReserves(factory, tokenA, tokenB);\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint256 amountBOptimal = SafeswapLibrary.quote(amountADesired, reserveA, reserveB);\n            if (amountBOptimal <= amountBDesired) {\n                require(amountBOptimal >= amountBMin, \"SafeswapRouter: INSUFFICIENT_B_AMOUNT\");\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint256 amountAOptimal = SafeswapLibrary.quote(amountBDesired, reserveB, reserveA);\n                assert(amountAOptimal <= amountADesired);\n                require(amountAOptimal >= amountAMin, \"SafeswapRouter: INSUFFICIENT_A_AMOUNT\");\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n    external\n    virtual\n    ensure(deadline)\n    returns (\n        uint256 amountA,\n        uint256 amountB,\n        uint256 liquidity\n    )\n    {\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to);\n        address pair = SafeswapLibrary.pairFor(factory, tokenA, tokenB);\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n        liquidity = ISafeswapPair(pair).mint(to);\n    }\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n    external\n    payable\n    virtual\n    ensure(deadline)\n    returns (\n        uint256 amountToken,\n        uint256 amountETH,\n        uint256 liquidity\n    )\n    {\n        (amountToken, amountETH) = _addLiquidity(\n            token,\n            WETH,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountETHMin,\n            to\n        );\n        address pair = SafeswapLibrary.pairFor(factory, token, WETH);\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        IWETH(WETH).deposit{ value: amountETH }();\n        assert(IWETH(WETH).transfer(pair, amountETH));\n        liquidity = ISafeswapPair(pair).mint(to);\n        // refund dust eth, if any\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n    }\n\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) public virtual override ensure(deadline) returns (uint256 amountA, uint256 amountB) {\n        address pair = SafeswapLibrary.pairFor(factory, tokenA, tokenB);\n        ISafeswapPair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n        (uint256 amount0, uint256 amount1) = ISafeswapPair(pair).burn(to);\n        (address token0, ) = SafeswapLibrary.sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n        require(amountA >= amountAMin, \"SafeswapRouter: INSUFFICIENT_A_AMOUNT\");\n        require(amountB >= amountBMin, \"SafeswapRouter: INSUFFICIENT_B_AMOUNT\");\n    }\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) public virtual override ensure(deadline) returns (uint256 amountToken, uint256 amountETH) {\n        (amountToken, amountETH) = removeLiquidity(\n            token,\n            WETH,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this),\n            deadline\n        );\n        IWETH(WETH).withdraw(amountETH);\n        TransferHelper.safeTransferETH(to, amountETH);\n        TransferHelper.safeTransfer(token, to, amountToken);\n    }\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual override returns (uint256 amountA, uint256 amountB) {\n        address pair = SafeswapLibrary.pairFor(factory, tokenA, tokenB);\n        uint256 value = approveMax ? type(uint256).max : liquidity;\n        ISafeswapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\n    }\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual override returns (uint256 amountToken, uint256 amountETH) {\n        address pair = SafeswapLibrary.pairFor(factory, token, WETH);\n        uint256 value = approveMax ? type(uint256).max : liquidity;\n        ISafeswapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\n    }\n\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) public virtual override ensure(deadline) returns (uint256 amountETH) {\n        (, amountETH) = removeLiquidity(token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline);\n        IWETH(WETH).withdraw(amountETH);\n        TransferHelper.safeTransferETH(to, amountETH);\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\n    }\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual override returns (uint256 amountETH) {\n        address pair = SafeswapLibrary.pairFor(factory, token, WETH);\n        uint256 value = approveMax ? type(uint256).max : liquidity;\n        ISafeswapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n            token,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            to,\n            deadline\n        );\n    }\n\n    // **** SWAP ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(\n        uint256[] memory amounts,\n        address[] memory path,\n        address _to\n    ) internal virtual {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = SafeswapLibrary.sortTokens(input, output);\n            uint256 amountOut = amounts[i + 1];\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\n                ? (uint256(0), amountOut)\n                : (amountOut, uint256(0));\n            address to = i < path.length - 2 ? SafeswapLibrary.pairFor(factory, output, path[i + 2]) : _to;\n            ISafeswapPair(SafeswapLibrary.pairFor(factory, input, output)).swap(\n                amount0Out,\n                amount1Out,\n                to,\n                new bytes(0)\n            );\n        }\n    }\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable virtual override ensure(deadline) onlyWhitelist returns (uint256[] memory amounts) {\n        require(path[0] == WETH, \"SafeswapRouter: INVALID_PATH\");\n        amounts = SafeswapLibrary.getAmountsOut(factory, msg.value, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, \"SafeswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\");\n        if (nameToInfo[path[1]].enabled == true && killSwitch == false && (nameToInfo[path[1]].buyFeePercent > 0)) {\n            uint256 amountOut = amounts[amounts.length - 1];\n            uint256 deduction = (amountOut * nameToInfo[path[1]].buyFeePercent) / ONE;\n            amounts[amounts.length - 1] = amountOut - deduction;\n        }\n        IWETH(WETH).deposit{ value: amounts[0] }();\n        assert(IWETH(WETH).transfer(SafeswapLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) onlyWhitelist returns (uint256[] memory amounts) {\n        require(path[path.length - 1] == WETH, \"SafeswapRouter: INVALID_PATH\");\n        amounts = SafeswapLibrary.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, \"SafeswapRouter: EXCESSIVE_INPUT_AMOUNT\");\n        if (nameToInfo[path[0]].enabled == true && killSwitch == false && (nameToInfo[path[0]].sellFeePercent > 0)) {\n            uint256 amountIn = amounts[0];\n            uint256 deduction = (amountIn * nameToInfo[path[0]].sellFeePercent) / ONE;\n            amounts[0] = amountIn - deduction;\n            TransferHelper.safeTransferFrom(path[0], from, nameToInfo[path[0]].feesAddress, deduction);\n        }\n        amounts = SafeswapLibrary.getAmountsOut(factory, amounts[0], path);\n        TransferHelper.safeTransferFrom(path[0], from, SafeswapLibrary.pairFor(factory, path[0], path[1]), amounts[0]);\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) onlyWhitelist returns (uint256[] memory amounts) {\n        require(path[path.length - 1] == WETH, \"SafeswapRouter: INVALID_PATH\");\n        uint256[] memory oldamounts = SafeswapLibrary.getAmountsOut(factory, amountIn, path); // ,amountIn,\n        require(oldamounts[oldamounts.length - 1] >= amountOutMin, \"SafeswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\");\n\n        if (nameToInfo[path[0]].enabled == true && killSwitch == false && (nameToInfo[path[0]].sellFeePercent > 0)) {\n            uint256 deduction = (amountIn * nameToInfo[path[0]].sellFeePercent) / ONE;\n            amountIn = amountIn - deduction;\n            TransferHelper.safeTransferFrom(path[0], from, nameToInfo[path[0]].feesAddress, deduction);\n        }\n\n        amounts = SafeswapLibrary.getAmountsOut(factory, amountIn, path); // ,amountIn,\n\n        TransferHelper.safeTransferFrom(\n            path[0],\n            from,\n            SafeswapLibrary.pairFor(factory, path[0], path[1]),\n            amounts[0] // amouts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable virtual override ensure(deadline) onlyWhitelist returns (uint256[] memory amounts) {\n        require(path[0] == WETH, \"SafeswapRouter: INVALID_PATH\");\n        amounts = SafeswapLibrary.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= msg.value, \"SafeswapRouter: EXCESSIVE_INPUT_AMOUNT\");\n        if (nameToInfo[path[1]].enabled == true && killSwitch == false && (nameToInfo[path[1]].buyFeePercent > 0)) {\n            uint256 deduction = (amountOut * nameToInfo[path[1]].buyFeePercent) / ONE;\n            amountOut = amountOut - deduction;\n        }\n        amounts = SafeswapLibrary.getAmountsIn(factory, amountOut, path);\n\n        IWETH(WETH).deposit{ value: amounts[0] }();\n        assert(IWETH(WETH).transfer(SafeswapLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(to, msg.value - amounts[0]);\n    }\n\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to)\n        internal\n        virtual\n        returns (uint256 amount0Out, uint256 amount1Out)\n    {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = SafeswapLibrary.sortTokens(input, output);\n            ISafeswapPair pair = ISafeswapPair(SafeswapLibrary.pairFor(factory, input, output));\n            uint256 amountInput;\n            uint256 amountOutput;\n            {\n                // scope to avoid stack too deep errors\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0\n                    ? (reserve0, reserve1)\n                    : (reserve1, reserve0);\n                amountInput = IERC20(input).balanceOf(address(pair)) - reserveInput;\n                amountOutput = SafeswapLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);\n            }\n            if (nameToInfo[output].enabled == true && killSwitch == false && (nameToInfo[output].buyFeePercent > 0)) {\n                uint256 deduction = (amountOutput * nameToInfo[output].buyFeePercent) / ONE;\n                amountOutput = amountOutput - deduction;\n            }\n            (amount0Out, amount1Out) = input == token0 ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\n            address to = i < path.length - 2 ? SafeswapLibrary.pairFor(factory, output, path[i + 2]) : _to;\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable virtual override ensure(deadline) onlyWhitelist {\n        require(path[0] == WETH, \"SafeswapRouter: INVALID_PATH\");\n        uint256 amountIn = msg.value;\n        IWETH(WETH).deposit{ value: amountIn }();\n        assert(IWETH(WETH).transfer(SafeswapLibrary.pairFor(factory, path[0], path[1]), amountIn));\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(to) - balanceBefore >= amountOutMin,\n            \"SafeswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n    }\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address from,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) onlyWhitelist {\n        require(path[path.length - 1] == WETH, \"SafeswapRouter: INVALID_PATH\");\n\n        if (nameToInfo[path[0]].enabled == true && killSwitch == false && (nameToInfo[path[0]].sellFeePercent > 0)) {\n            uint256 deduction = (amountIn * nameToInfo[path[0]].sellFeePercent) / ONE;\n            amountIn = amountIn - deduction;\n            TransferHelper.safeTransferFrom(path[0], from, nameToInfo[path[0]].feesAddress, deduction);\n        }\n\n        TransferHelper.safeTransferFrom(path[0], from, SafeswapLibrary.pairFor(factory, path[0], path[1]), amountIn);\n        (uint256 amount0Out, uint256 amount1Out) = _swapSupportingFeeOnTransferTokens(path, address(this));\n        uint256 amountOut = amount0Out > 0 ? amount0Out : amount1Out;\n\n        require(amountOut >= amountOutMin, \"SafeswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\");\n        IWETH(WETH).withdraw(amountOut);\n        TransferHelper.safeTransferETH(to, amountOut);\n    }\n\n\n\n    function _swapSupportingFeeOnTransferTokensForV1(address[] memory path, address _to)\n    internal\n    virtual\n    returns (uint256 amount0Out, uint256 amount1Out)\n    {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = SafeswapLibrary.sortTokens(input, output);\n            ISafeswapPair pair = ISafeswapPair(SafeswapLibrary.pairFor(factory, input, output));\n            uint256 amountInput;\n            uint256 amountOutput;\n            {\n                // scope to avoid stack too deep errors\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0\n                ? (reserve0, reserve1)\n                : (reserve1, reserve0);\n                amountInput = IERC20(input).balanceOf(address(pair)) - reserveInput;\n                amountOutput = SafeswapLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);\n            }\n            if (nameToInfo[output].enabled == true && killSwitch == false && (nameToInfo[output].buyFeePercent > 0)) {\n                uint256 deduction = (amountOutput * nameToInfo[output].buyFeePercent) / ONE;\n                amountOutput = amountOutput - deduction;\n            }\n            (amount0Out, amount1Out) = input == token0 ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\n            address to = i < path.length - 2 ? SafeswapLibrary.pairFor(factory, output, path[i + 2]) : _to;\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual ensure(deadline) onlyWhitelist {\n        require(path[path.length - 1] == WETH, \"SafeswapRouter: INVALID_PATH\");\n\n        if (nameToInfo[path[0]].enabled == true && killSwitch == false && (nameToInfo[path[0]].sellFeePercent > 0)) {\n            uint256 deduction = (amountIn * nameToInfo[path[0]].sellFeePercent) / ONE;\n            amountIn = amountIn - deduction;\n            TransferHelper.safeTransferFrom(path[0], msg.sender, nameToInfo[path[0]].feesAddress, deduction);\n        }\n\n        TransferHelper.safeTransferFrom(path[0], msg.sender, SafeswapLibrary.pairFor(factory, path[0], path[1]), amountIn);\n        (uint256 amount0Out, uint256 amount1Out) = _swapSupportingFeeOnTransferTokensForV1(path, address(this));\n        uint256 amountOut = amount0Out > 0 ? amount0Out : amount1Out;\n\n        require(amountOut >= amountOutMin, \"SafeswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\");\n        IWETH(WETH).withdraw(amountOut);\n        TransferHelper.safeTransferETH(to, amountOut);\n    }\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual ensure(deadline) onlyWhitelist returns (uint256[] memory amounts) {\n        require(path[path.length - 1] == WETH, \"SafeswapRouter: INVALID_PATH\");\n        amounts = SafeswapLibrary.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, \"SafeswapRouter: EXCESSIVE_INPUT_AMOUNT\");\n        if (nameToInfo[path[0]].enabled == true && killSwitch == false && (nameToInfo[path[0]].sellFeePercent > 0)) {\n            uint256 amountIn = amounts[0];\n            uint256 deduction = (amountIn * nameToInfo[path[0]].sellFeePercent) / ONE;\n            amounts[0] = amountIn - deduction;\n            TransferHelper.safeTransferFrom(path[0], msg.sender, nameToInfo[path[0]].feesAddress, deduction);\n        }\n        amounts = SafeswapLibrary.getAmountsOut(factory, amounts[0], path);\n        TransferHelper.safeTransferFrom(path[0], msg.sender, SafeswapLibrary.pairFor(factory, path[0], path[1]), amounts[0]);\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual ensure(deadline) onlyWhitelist returns (uint256[] memory amounts) {\n        require(path[path.length - 1] == WETH, \"SafeswapRouter: INVALID_PATH\");\n        uint256[] memory oldamounts = SafeswapLibrary.getAmountsOut(factory, amountIn, path); // ,amountIn,\n        require(oldamounts[oldamounts.length - 1] >= amountOutMin, \"SafeswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\");\n\n        if (nameToInfo[path[0]].enabled == true && killSwitch == false && (nameToInfo[path[0]].sellFeePercent > 0)) {\n            uint256 deduction = (amountIn * nameToInfo[path[0]].sellFeePercent) / ONE;\n            amountIn = amountIn - deduction;\n            TransferHelper.safeTransferFrom(path[0], msg.sender, nameToInfo[path[0]].feesAddress, deduction);\n        }\n\n        amounts = SafeswapLibrary.getAmountsOut(factory, amountIn, path); // ,amountIn,\n\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            SafeswapLibrary.pairFor(factory, path[0], path[1]),\n            amounts[0] // amouts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n\n    // **** LIBRARY FUNCTIONS ****\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) public pure virtual override returns (uint256 amountB) {\n        return SafeswapLibrary.quote(amountA, reserveA, reserveB);\n    }\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) public pure virtual override returns (uint256 amountOut) {\n        return SafeswapLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) public pure virtual override returns (uint256 amountIn) {\n        return SafeswapLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\n    }\n\n    function getAmountsOut(uint256 amountIn, address[] memory path)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory amounts)\n    {\n        return SafeswapLibrary.getAmountsOut(factory, amountIn, path);\n    }\n\n    function getAmountsIn(uint256 amountOut, address[] memory path)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory amounts)\n    {\n        return SafeswapLibrary.getAmountsIn(factory, amountOut, path);\n    }\n\n    function lockLP(address LPtoken, uint256 time) public onlyOwner {\n        _lpTokenLockStatus[LPtoken] = true;\n        _locktime[LPtoken] = block.timestamp + time;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 0
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}