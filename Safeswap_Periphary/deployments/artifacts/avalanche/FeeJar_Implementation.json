{
  "address": "0x522058567D3B315B258990c5175e8F6159752cc4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newFee",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldFee",
          "type": "uint32"
        }
      ],
      "name": "BuyBackAndBurnFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feePayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyBackAndBurnFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supportFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyBackAndBurnFeeCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "supportFeeCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpFeeCollector",
          "type": "address"
        }
      ],
      "name": "Fee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLPFeeCollector",
          "type": "address"
        }
      ],
      "name": "LPFeeCollectorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newFee",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldFee",
          "type": "uint32"
        }
      ],
      "name": "LPFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBuyBackAndBurnFeeCollector",
          "type": "address"
        }
      ],
      "name": "NetworFeeCollectorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newFee",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldFee",
          "type": "uint32"
        }
      ],
      "name": "SupportFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawBNB",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_JAR_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackAndBurnFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackAndBurnFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalFee",
          "type": "uint256"
        }
      ],
      "name": "getFeeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buyBackAndBurnFeeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supportFeeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpFeeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeJarAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyBackAndBurnFeeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpFeeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_buyBackAndBurnFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_lpFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_supportFee",
          "type": "uint32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newFee",
          "type": "uint32"
        }
      ],
      "name": "setBuyBackAndBurnFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newCollector",
          "type": "address"
        }
      ],
      "name": "setBuyBackAndBurnFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newFee",
          "type": "uint32"
        }
      ],
      "name": "setLPFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newCollector",
          "type": "address"
        }
      ],
      "name": "setLPFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newFee",
          "type": "uint32"
        }
      ],
      "name": "setSupportFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supportFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawBNB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe86c05257eab316c0ee889d202db17d2ddaa300f96d4927bf39167a2d38b038d",
  "receipt": {
    "to": null,
    "from": "0x8868F1b2aafc2afBF24076Aa6829024A1385A047",
    "contractAddress": "0x522058567D3B315B258990c5175e8F6159752cc4",
    "transactionIndex": 0,
    "gasUsed": "1503273",
    "logsBloom": "0x
    "blockHash": "0xe280106d57571b01d136132e951856dad338f84542f416388e1ea4b3ab2f6342",
    "transactionHash": "0xe86c05257eab316c0ee889d202db17d2ddaa300f96d4927bf39167a2d38b038d",
    "logs": [],
    "blockNumber": 25205311,
    "cumulativeGasUsed": "1503273",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "94b77a12c31069e35fb61a0f381e0f52",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldFee\",\"type\":\"uint32\"}],\"name\":\"BuyBackAndBurnFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feePayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyBackAndBurnFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supportFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyBackAndBurnFeeCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"supportFeeCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpFeeCollector\",\"type\":\"address\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLPFeeCollector\",\"type\":\"address\"}],\"name\":\"LPFeeCollectorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldFee\",\"type\":\"uint32\"}],\"name\":\"LPFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBuyBackAndBurnFeeCollector\",\"type\":\"address\"}],\"name\":\"NetworFeeCollectorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldFee\",\"type\":\"uint32\"}],\"name\":\"SupportFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBNB\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_JAR_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackAndBurnFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackAndBurnFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"name\":\"getFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyBackAndBurnFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supportFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeJarAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyBackAndBurnFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_buyBackAndBurnFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_lpFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_supportFee\",\"type\":\"uint32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"}],\"name\":\"setBuyBackAndBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"}],\"name\":\"setBuyBackAndBurnFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"}],\"name\":\"setLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"}],\"name\":\"setLPFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"}],\"name\":\"setSupportFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Allows split SFM SwapRouter Fee\",\"kind\":\"dev\",\"methods\":{\"getFeeAmount(uint256)\":{\"params\":{\"totalFee\":\"total fee\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,address,address,uint256,uint32,uint32,uint32)\":{\"params\":{\"_buyBackAndBurnFee\":\"% of fee collected by the network\\\\\",\"_buyBackAndBurnFeeCollector\":\"address that collects network fees\",\"_feeJarAdmin\":\"admin of fee pool\",\"_feeSetter\":\"fee setter address\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setBuyBackAndBurnFee(uint32)\":{\"params\":{\"newFee\":\"new fee\"}},\"setBuyBackAndBurnFeeCollector(address)\":{\"params\":{\"newCollector\":\"new fee collector address\"}},\"setLPFee(uint32)\":{\"params\":{\"newFee\":\"new fee\"}},\"setLPFeeCollector(address)\":{\"params\":{\"newCollector\":\"new fee collector address\"}},\"setSupportFee(uint32)\":{\"params\":{\"newFee\":\"new fee\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"FeeJar\",\"version\":1},\"userdoc\":{\"events\":{\"BuyBackAndBurnFeeSet(uint32,uint32)\":{\"notice\":\"Network Fee set event\"},\"Fee(address,uint256,uint256,uint256,uint256,address,address,address)\":{\"notice\":\"Fee event\"},\"LPFeeCollectorSet(address,address)\":{\"notice\":\"LP Fee collector set event\"},\"LPFeeSet(uint32,uint32)\":{\"notice\":\"LP Fee set event\"},\"NetworFeeCollectorSet(address,address)\":{\"notice\":\"Network Fee collector set event\"},\"SupportFeeSet(uint32,uint32)\":{\"notice\":\"Support Fee set event\"}},\"kind\":\"user\",\"methods\":{\"FEE_JAR_ADMIN_ROLE()\":{\"notice\":\"FeeJar Admin role\"},\"FEE_SETTER_ROLE()\":{\"notice\":\"Fee setter role\"},\"buyBackAndBurnFee()\":{\"notice\":\"Network fee (measured in bips: 100 bips = 1% of contract balance)\"},\"buyBackAndBurnFeeCollector()\":{\"notice\":\"Network fee output address\"},\"fee()\":{\"notice\":\"Distributes any ETH in contract to relevant parties\"},\"getFeeAmount(uint256)\":{\"notice\":\"Return fees amount based on the total fee\"},\"initialize(address,address,address,address,address,uint256,uint32,uint32,uint32)\":{\"notice\":\"Initializes contract, setting admin roles + network fee\"},\"setBuyBackAndBurnFee(uint32)\":{\"notice\":\"Admin function to set network fee\"},\"setBuyBackAndBurnFeeCollector(address)\":{\"notice\":\"Admin function to set network fee collector address\"},\"setLPFee(uint32)\":{\"notice\":\"Admin function to set LP fee\"},\"setLPFeeCollector(address)\":{\"notice\":\"Admin function to set Lp fee collector address\"},\"setSupportFee(uint32)\":{\"notice\":\"Admin function to set support fee\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeeJar.sol\":\"FeeJar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/FeeJar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\ninterface ISafeswapFactory {\\n    function feeTo() external view returns (address);\\n}\\n\\n/**\\n * @title FeeJar\\n * @dev Allows split SFM SwapRouter Fee\\n */\\ncontract FeeJar is AccessControlUpgradeable {\\n    /// @notice FeeJar Admin role\\n    bytes32 public constant FEE_JAR_ADMIN_ROLE = keccak256(\\\"FEE_JAR_ADMIN_ROLE\\\");\\n\\n    /// @notice Fee setter role\\n    bytes32 public constant FEE_SETTER_ROLE = keccak256(\\\"FEE_SETTER_ROLE\\\");\\n\\n    /// @notice Network fee (measured in bips: 100 bips = 1% of contract balance)\\n    uint32 public buyBackAndBurnFee;\\n    uint32 public lpFee;\\n    uint32 public supportFee;\\n    uint256 public maxPercentage;\\n\\n    address public factory;\\n\\n    /// @notice Network fee output address\\n    address public buyBackAndBurnFeeCollector;\\n    address public lpFeeCollector;\\n\\n    /// @notice Network Fee set event\\n    event BuyBackAndBurnFeeSet(uint32 indexed newFee, uint32 indexed oldFee);\\n    /// @notice LP Fee set event\\n    event LPFeeSet(uint32 indexed newFee, uint32 indexed oldFee);\\n    /// @notice Support Fee set event\\n    event SupportFeeSet(uint32 indexed newFee, uint32 indexed oldFee);\\n\\n    /// @notice Network Fee collector set event\\n    event NetworFeeCollectorSet(address newCollector, address oldBuyBackAndBurnFeeCollector);\\n\\n    /// @notice LP Fee collector set event\\n    event LPFeeCollectorSet(address newCollector, address oldLPFeeCollector);\\n\\n    event WithdrawBNB(address to, uint256 amount);\\n\\n    /// @notice Fee event\\n    event Fee(\\n        address indexed feePayer, // tx.origin\\n        uint256 feeAmount, // msg.value\\n        uint256 buyBackAndBurnFeeAmount, // buyBackAndBurnFeeAmount\\n        uint256 lpFeeAmount, // lpFeeAmount\\n        uint256 supportFeeAmount, // supportFeeAmount\\n        address buyBackAndBurnFeeCollector, // buyBackAndBurnFeeCollector\\n        address supportFeeCollector, // supportFeeCollector\\n        address lpFeeCollector // lpFeeCollector\\n    );\\n\\n    /// @notice modifier to restrict functions to admins\\n    modifier onlyAdmin() {\\n        require(hasRole(FEE_JAR_ADMIN_ROLE, msg.sender), \\\"Caller must have FEE_JAR_ADMIN_ROLE role\\\");\\n        _;\\n    }\\n\\n    /// @notice modifier to restrict functions to fee setters\\n    modifier onlyFeeSetter() {\\n        require(hasRole(FEE_SETTER_ROLE, msg.sender), \\\"Caller must have FEE_SETTER_ROLE role\\\");\\n        _;\\n    }\\n\\n    /// @notice Initializes contract, setting admin roles + network fee\\n    /// @param _feeJarAdmin admin of fee pool\\n    /// @param _feeSetter fee setter address\\n    /// @param _buyBackAndBurnFeeCollector address that collects network fees\\n    /// @param _buyBackAndBurnFee % of fee collected by the network\\\\\\n    function initialize(\\n        address _feeJarAdmin,\\n        address _feeSetter,\\n        address _buyBackAndBurnFeeCollector,\\n        address _lpFeeCollector,\\n        address _factory,\\n        uint256 _maxPercentage,\\n        uint32 _buyBackAndBurnFee,\\n        uint32 _lpFee,\\n        uint32 _supportFee\\n    ) external initializer {\\n        // addresses validation!\\n        require(\\n            _buyBackAndBurnFeeCollector != address(0) &&\\n                _lpFeeCollector != address(0) &&\\n                _feeJarAdmin != address(0) &&\\n                _feeSetter != address(0) &&\\n                _factory != address(0),\\n            \\\"FEEJAR: PLEASE ENTER VALID ADDRESSES\\\"\\n        );\\n\\n        // fees validation\\n        require(\\n            _buyBackAndBurnFee <= _maxPercentage && _lpFee <= _maxPercentage && _supportFee <= _maxPercentage,\\n            \\\"FEEJAR: INCORRECT FEES VALUES\\\"\\n        );\\n\\n        __AccessControl_init();\\n\\n        _setRoleAdmin(FEE_JAR_ADMIN_ROLE, FEE_JAR_ADMIN_ROLE);\\n        _setRoleAdmin(FEE_SETTER_ROLE, FEE_JAR_ADMIN_ROLE);\\n        _setupRole(FEE_JAR_ADMIN_ROLE, _feeJarAdmin);\\n        _setupRole(FEE_SETTER_ROLE, _feeSetter);\\n        buyBackAndBurnFeeCollector = _buyBackAndBurnFeeCollector;\\n        lpFeeCollector = _lpFeeCollector;\\n        buyBackAndBurnFee = _buyBackAndBurnFee;\\n        emit BuyBackAndBurnFeeSet(_buyBackAndBurnFee, 0);\\n        lpFee = _lpFee;\\n        emit LPFeeSet(_lpFee, 0);\\n        supportFee = _supportFee;\\n        emit SupportFeeSet(_supportFee, 0);\\n        factory = _factory;\\n        maxPercentage = _maxPercentage;\\n    }\\n\\n    /// @notice Receive function to allow contract to accept ETH\\n    receive() external payable {}\\n\\n    /// @notice Fallback function to allow contract to accept ETH\\n    fallback() external payable {}\\n\\n    /**\\n     * @notice Return fees amount based on the total fee\\n     * @param totalFee total fee\\n     */\\n    function getFeeAmount(uint256 totalFee)\\n        public\\n        view\\n        returns (\\n            uint256 buyBackAndBurnFeeAmount,\\n            uint256 supportFeeAmount,\\n            uint256 lpFeeAmount\\n        )\\n    {\\n        if (buyBackAndBurnFee > 0) {\\n            buyBackAndBurnFeeAmount = (totalFee * buyBackAndBurnFee) / maxPercentage;\\n        }\\n        if (lpFee > 0) {\\n            lpFeeAmount = (totalFee * lpFee) / maxPercentage;\\n        }\\n        if (supportFee > 0) {\\n            supportFeeAmount = (totalFee * supportFee) / maxPercentage;\\n        }\\n    }\\n\\n    /**\\n     * @notice Distributes any ETH in contract to relevant parties\\n     */\\n    function fee()\\n        public\\n        payable\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 feeBalance = msg.value;\\n        if (feeBalance == 0) {\\n            return (0,0,0);\\n        }\\n        (uint256 buyBackAndBurnFeeAmount, uint256 supportFeeAmount, uint256 lpFeeAmount) = getFeeAmount(feeBalance);\\n        address supportFeeCollector;\\n\\n        if (buyBackAndBurnFee > 0) {\\n            (bool buyBackAndBurnFeeSuccess, ) = buyBackAndBurnFeeCollector.call{ value: buyBackAndBurnFeeAmount }(\\\"\\\");\\n            require(buyBackAndBurnFeeSuccess, \\\"Swap Fee: Could not collect network fee\\\");\\n        }\\n\\n        if (supportFee > 0) {\\n            supportFeeCollector = ISafeswapFactory(factory).feeTo();\\n            bool feeOn = supportFeeCollector != address(0);\\n            if (feeOn) {\\n                (bool supportFeeSuccess, ) = supportFeeCollector.call{ value: supportFeeAmount }(\\\"\\\");\\n                require(supportFeeSuccess, \\\"Swap Fee: Could not collect support fee\\\");\\n            }\\n        }\\n\\n        if (address(this).balance > 0) {\\n            uint256 lpAmount = address(this).balance;\\n            (bool success, ) = lpFeeCollector.call{ value: lpAmount }(\\\"\\\");\\n            require(success, \\\"Swap Fee: Could not collect LP ETH\\\");\\n        }\\n\\n        /// @notice Fee event\\n        emit Fee(\\n            tx.origin, // tx.origin\\n            msg.value, // msg.value\\n            buyBackAndBurnFeeAmount, // buyBackAndBurnFeeAmount\\n            lpFeeAmount, // lpFeeAmount\\n            supportFeeAmount, // supportFeeAmount\\n            buyBackAndBurnFeeCollector, // buyBackAndBurnFeeCollector\\n            supportFeeCollector, // supportFeeCollector\\n            buyBackAndBurnFeeCollector // lpFeeCollector\\n        );\\n\\n        return (buyBackAndBurnFeeAmount, supportFeeAmount, lpFeeAmount);\\n    }\\n\\n    /**\\n     * @notice Admin function to set network fee\\n     * @param newFee new fee\\n     */\\n    function setBuyBackAndBurnFee(uint32 newFee) external onlyFeeSetter {\\n        require(newFee <= maxPercentage, \\\">100%\\\");\\n        emit BuyBackAndBurnFeeSet(newFee, buyBackAndBurnFee);\\n        buyBackAndBurnFee = newFee;\\n    }\\n\\n    /**\\n     * @notice Admin function to set LP fee\\n     * @param newFee new fee\\n     */\\n    function setLPFee(uint32 newFee) external onlyFeeSetter {\\n        require(newFee <= maxPercentage, \\\">100%\\\");\\n        emit LPFeeSet(newFee, lpFee);\\n        lpFee = newFee;\\n    }\\n\\n    /**\\n     * @notice Admin function to set support fee\\n     * @param newFee new fee\\n     */\\n    function setSupportFee(uint32 newFee) external onlyFeeSetter {\\n        require(newFee <= maxPercentage, \\\">100%\\\");\\n        emit SupportFeeSet(newFee, supportFee);\\n        supportFee = newFee;\\n    }\\n\\n    /**\\n     * @notice Admin function to set network fee collector address\\n     * @param newCollector new fee collector address\\n     */\\n    function setBuyBackAndBurnFeeCollector(address newCollector) external onlyAdmin {\\n        emit NetworFeeCollectorSet(newCollector, buyBackAndBurnFeeCollector);\\n        buyBackAndBurnFeeCollector = newCollector;\\n    }\\n\\n    /**\\n     * @notice Admin function to set Lp fee collector address\\n     * @param newCollector new fee collector address\\n     */\\n    function setLPFeeCollector(address newCollector) external onlyAdmin {\\n        emit LPFeeCollectorSet(newCollector, lpFeeCollector);\\n        lpFeeCollector = newCollector;\\n    }\\n\\n    function withdrawBNB(address payable to) public onlyAdmin {\\n        uint256 amount = address(this).balance;\\n        to.transfer(amount);\\n        emit WithdrawBNB(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x36f1853d9601f86c41cd70e93d38cd72c917989f5781ebf41a7997b2c45dc526\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611a3a806100206000396000f3fe6080604052600436106101275760003560e01c806301ffc9a714610130578063248a9ca3146101655780632f2ff15d1461019357806335b6003b146101b357806336568abe146101c957806347f86860146101e95780634ff3903714610209578063704ce43e14610241578063726094711461027a5780638b4e2f761461029a57806391d14854146102ba57806393c73fed146102da5780639704122c146102fa57806399ad79a714610335578063a217fddf14610355578063c17a799b1461036a578063c45a01551461038a578063ca302ffa146103aa578063d547741f146103ce578063ddca3f43146103ee578063dfb13575146103f6578063e934768314610418578063f0dbd3c41461043a578063f3bcb64114610457578063fc078c6d1461047757005b3661012e57005b005b34801561013c57600080fd5b5061015061014b366004611579565b610497565b60405190151581526020015b60405180910390f35b34801561017157600080fd5b506101856101803660046115a3565b6104ce565b60405190815260200161015c565b34801561019f57600080fd5b5061012e6101ae3660046115d1565b6104e3565b3480156101bf57600080fd5b5061018560985481565b3480156101d557600080fd5b5061012e6101e43660046115d1565b610504565b3480156101f557600080fd5b5061012e610204366004611601565b610587565b34801561021557600080fd5b50609a54610229906001600160a01b031681565b6040516001600160a01b03909116815260200161015c565b34801561024d57600080fd5b5060975461026590600160201b900463ffffffff1681565b60405163ffffffff909116815260200161015c565b34801561028657600080fd5b5061012e610295366004611601565b610622565b3480156102a657600080fd5b5061012e6102b5366004611601565b6106d5565b3480156102c657600080fd5b506101506102d53660046115d1565b610770565b3480156102e657600080fd5b50609b54610229906001600160a01b031681565b34801561030657600080fd5b5061031a6103153660046115a3565b61079b565b6040805193845260208401929092529082015260600161015c565b34801561034157600080fd5b5061012e610350366004611637565b610858565b34801561036157600080fd5b50610185600081565b34801561037657600080fd5b5061012e610385366004611652565b6108f6565b34801561039657600080fd5b50609954610229906001600160a01b031681565b3480156103b657600080fd5b5060975461026590600160401b900463ffffffff1681565b3480156103da57600080fd5b5061012e6103e93660046115d1565b610cab565b61031a610cc7565b34801561040257600080fd5b5061018560008051602061196583398151915281565b34801561042457600080fd5b5061018560008051602061198583398151915281565b34801561044657600080fd5b506097546102659063ffffffff1681565b34801561046357600080fd5b5061012e610472366004611637565b61104a565b34801561048357600080fd5b5061012e610492366004611637565b6110f9565b60006001600160e01b03198216637965db0b60e01b14806104c857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60009081526065602052604090206001015490565b6104ec826104ce565b6104f5816111a8565b6104ff83836111b5565b505050565b6001600160a01b03811633146105795760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610583828261123b565b5050565b61059f60008051602061196583398151915233610770565b6105bb5760405162461bcd60e51b8152600401610570906116fd565b609a546040517f7afc83a35e7361ceb1e95001d0bef759d1ab977a2034889fbaedc71e36d6fe29916105f89184916001600160a01b031690611745565b60405180910390a1609a80546001600160a01b0319166001600160a01b0392909216919091179055565b61063a60008051602061196583398151915233610770565b6106565760405162461bcd60e51b8152600401610570906116fd565b60405147906001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561068e573d6000803e3d6000fd5b50604080516001600160a01b0384168152602081018390527fceac4c050cf0bd5320be38f58d0d370278667b15662191291c09d7fb144371b3910160405180910390a15050565b6106ed60008051602061196583398151915233610770565b6107095760405162461bcd60e51b8152600401610570906116fd565b609b546040517f6f0f81c6fd6b21ee193c68ce5da2ea2fa82eafcf21d0f4afd247275d7dc7b250916107469184916001600160a01b031690611745565b60405180910390a1609b80546001600160a01b0319166001600160a01b0392909216919091179055565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6097546000908190819063ffffffff16156107d3576098546097546107c69063ffffffff1686611775565b6107d09190611794565b92505b609754600160201b900463ffffffff16156108125760985460975461080590600160201b900463ffffffff1686611775565b61080f9190611794565b90505b609754600160401b900463ffffffff16156108515760985460975461084490600160401b900463ffffffff1686611775565b61084e9190611794565b91505b9193909250565b61087060008051602061198583398151915233610770565b61088c5760405162461bcd60e51b8152600401610570906117b6565b6098548163ffffffff1611156108b45760405162461bcd60e51b8152600401610570906117fb565b60975460405163ffffffff918216918316906000805160206119c583398151915290600090a36097805463ffffffff191663ffffffff92909216919091179055565b600054610100900460ff16158080156109165750600054600160ff909116105b806109305750303b158015610930575060005460ff166001145b6109935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610570565b6000805460ff1916600117905580156109b6576000805461ff0019166101001790555b6001600160a01b038816158015906109d657506001600160a01b03871615155b80156109ea57506001600160a01b038a1615155b80156109fe57506001600160a01b03891615155b8015610a1257506001600160a01b03861615155b610a6a5760405162461bcd60e51b8152602060048201526024808201527f4645454a41523a20504c4541534520454e5445522056414c49442041444452456044820152635353455360e01b6064820152608401610570565b848463ffffffff1611158015610a865750848363ffffffff1611155b8015610a985750848263ffffffff1611155b610ae45760405162461bcd60e51b815260206004820152601d60248201527f4645454a41523a20494e434f525245435420464545532056414c5545530000006044820152606401610570565b610aec6112a2565b610b046000805160206119658339815191528061130f565b610b2a60008051602061198583398151915260008051602061196583398151915261130f565b610b426000805160206119658339815191528b611362565b610b5a6000805160206119858339815191528a611362565b609a80546001600160a01b03808b166001600160a01b031992831617909255609b8054928a16929091169190911790556097805463ffffffff861663ffffffff199091168117909155604051600091906000805160206119c5833981519152908390a36097805463ffffffff60201b1916600160201b63ffffffff861690810291909117909155604051600091906000805160206119e5833981519152908390a36097805463ffffffff60401b1916600160401b63ffffffff851690810291909117909155604051600091906000805160206119a5833981519152908390a3609980546001600160a01b0319166001600160a01b03881617905560988590558015610c9f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b610cb4826104ce565b610cbd816111a8565b6104ff838361123b565b600080803480610cdf57506000938493508392509050565b6000806000610ced8461079b565b609754929550909350915060009063ffffffff1615610dbb57609a546040516000916001600160a01b03169086908381818185875af1925050503d8060008114610d53576040519150601f19603f3d011682016040523d82523d6000602084013e610d58565b606091505b5050905080610db95760405162461bcd60e51b815260206004820152602760248201527f53776170204665653a20436f756c64206e6f7420636f6c6c656374206e6574776044820152666f726b2066656560c81b6064820152608401610570565b505b609754600160401b900463ffffffff1615610f1257609960009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e47919061181a565b90506001600160a01b03811615801590610f10576000826001600160a01b03168560405160006040518083038185875af1925050503d8060008114610ea8576040519150601f19603f3d011682016040523d82523d6000602084013e610ead565b606091505b5050905080610f0e5760405162461bcd60e51b815260206004820152602760248201527f53776170204665653a20436f756c64206e6f7420636f6c6c65637420737570706044820152666f72742066656560c81b6064820152608401610570565b505b505b4715610fcd57609b5460405147916000916001600160a01b039091169083908381818185875af1925050503d8060008114610f69576040519150601f19603f3d011682016040523d82523d6000602084013e610f6e565b606091505b5050905080610fca5760405162461bcd60e51b815260206004820152602260248201527f53776170204665653a20436f756c64206e6f7420636f6c6c656374204c5020456044820152610a8960f31b6064820152608401610570565b50505b609a546040805134815260208101879052908101849052606081018590526001600160a01b039182166080820181905291831660a082015260c081019190915232907fa2279bb6bd2616a5b4115b12c83292c4b2ce188fcdb41e45660b34479653527d9060e00160405180910390a2509196909550909350915050565b61106260008051602061198583398151915233610770565b61107e5760405162461bcd60e51b8152600401610570906117b6565b6098548163ffffffff1611156110a65760405162461bcd60e51b8152600401610570906117fb565b60975460405163ffffffff600160401b9092048216918316906000805160206119a583398151915290600090a36097805463ffffffff909216600160401b0263ffffffff60401b19909216919091179055565b61111160008051602061198583398151915233610770565b61112d5760405162461bcd60e51b8152600401610570906117b6565b6098548163ffffffff1611156111555760405162461bcd60e51b8152600401610570906117fb565b60975460405163ffffffff600160201b9092048216918316906000805160206119e583398151915290600090a36097805463ffffffff909216600160201b0263ffffffff60201b19909216919091179055565b6111b2813361136c565b50565b6111bf8282610770565b6105835760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556111f73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6112458282610770565b156105835760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1661130d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610570565b565b600061131a836104ce565b600084815260656020526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61058382826111b5565b6113768282610770565b61058357611383816113c5565b61138e8360206113d7565b60405160200161139f929190611867565b60408051601f198184030181529082905262461bcd60e51b8252610570916004016118d6565b60606104c86001600160a01b03831660145b606060006113e6836002611775565b6113f1906002611909565b6001600160401b0381111561140857611408611921565b6040519080825280601f01601f191660200182016040528015611432576020820181803683370190505b509050600360fc1b8160008151811061144d5761144d611937565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061147c5761147c611937565b60200101906001600160f81b031916908160001a90535060006114a0846002611775565b6114ab906001611909565b90505b6001811115611523576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106114df576114df611937565b1a60f81b8282815181106114f5576114f5611937565b60200101906001600160f81b031916908160001a90535060049490941c9361151c8161194d565b90506114ae565b5083156115725760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610570565b9392505050565b60006020828403121561158b57600080fd5b81356001600160e01b03198116811461157257600080fd5b6000602082840312156115b557600080fd5b5035919050565b6001600160a01b03811681146111b257600080fd5b600080604083850312156115e457600080fd5b8235915060208301356115f6816115bc565b809150509250929050565b60006020828403121561161357600080fd5b8135611572816115bc565b803563ffffffff8116811461163257600080fd5b919050565b60006020828403121561164957600080fd5b6115728261161e565b60008060008060008060008060006101208a8c03121561167157600080fd5b893561167c816115bc565b985060208a013561168c816115bc565b975060408a013561169c816115bc565b965060608a01356116ac816115bc565b955060808a01356116bc816115bc565b945060a08a013593506116d160c08b0161161e565b92506116df60e08b0161161e565b91506116ee6101008b0161161e565b90509295985092959850929598565b60208082526028908201527f43616c6c6572206d7573742068617665204645455f4a41525f41444d494e5f526040820152674f4c4520726f6c6560c01b606082015260800190565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561178f5761178f61175f565b500290565b6000826117b157634e487b7160e01b600052601260045260246000fd5b500490565b60208082526025908201527f43616c6c6572206d7573742068617665204645455f5345545445525f524f4c4560408201526420726f6c6560d81b606082015260800190565b6020808252600590820152643e3130302560d81b604082015260600190565b60006020828403121561182c57600080fd5b8151611572816115bc565b60005b8381101561185257818101518382015260200161183a565b83811115611861576000848401525b50505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351611899816017850160208801611837565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516118ca816028840160208801611837565b01602801949350505050565b60208152600082518060208401526118f5816040850160208701611837565b601f01601f19169190910160400192915050565b6000821982111561191c5761191c61175f565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008161195c5761195c61175f565b50600019019056fead5f894053b79b3f3272d2fb85f516294bcb37fcc5702840cff603e823ce7b60e6ad9a47fbda1dc18de1eb5eeb7d935e5e81b4748f3cfc61e233e64f881820604d4856291d1718eebeb9c7d8ec5aa7ea577f1faa10e55b1f1689add8be3c376c21bb5baefeb906bb0cdaf473e4ece455dbf3c8281370c8cfa36506c97bbbc217a229002b6a6e27545ec75e2df93ec812e88d015c147f49d9edd9fbedb7320197a26469706673582212209326f1f3996e3bfc366f5f71c540afb73b2342898160e1e4f579dbbf773692fb64736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101275760003560e01c806301ffc9a714610130578063248a9ca3146101655780632f2ff15d1461019357806335b6003b146101b357806336568abe146101c957806347f86860146101e95780634ff3903714610209578063704ce43e14610241578063726094711461027a5780638b4e2f761461029a57806391d14854146102ba57806393c73fed146102da5780639704122c146102fa57806399ad79a714610335578063a217fddf14610355578063c17a799b1461036a578063c45a01551461038a578063ca302ffa146103aa578063d547741f146103ce578063ddca3f43146103ee578063dfb13575146103f6578063e934768314610418578063f0dbd3c41461043a578063f3bcb64114610457578063fc078c6d1461047757005b3661012e57005b005b34801561013c57600080fd5b5061015061014b366004611579565b610497565b60405190151581526020015b60405180910390f35b34801561017157600080fd5b506101856101803660046115a3565b6104ce565b60405190815260200161015c565b34801561019f57600080fd5b5061012e6101ae3660046115d1565b6104e3565b3480156101bf57600080fd5b5061018560985481565b3480156101d557600080fd5b5061012e6101e43660046115d1565b610504565b3480156101f557600080fd5b5061012e610204366004611601565b610587565b34801561021557600080fd5b50609a54610229906001600160a01b031681565b6040516001600160a01b03909116815260200161015c565b34801561024d57600080fd5b5060975461026590600160201b900463ffffffff1681565b60405163ffffffff909116815260200161015c565b34801561028657600080fd5b5061012e610295366004611601565b610622565b3480156102a657600080fd5b5061012e6102b5366004611601565b6106d5565b3480156102c657600080fd5b506101506102d53660046115d1565b610770565b3480156102e657600080fd5b50609b54610229906001600160a01b031681565b34801561030657600080fd5b5061031a6103153660046115a3565b61079b565b6040805193845260208401929092529082015260600161015c565b34801561034157600080fd5b5061012e610350366004611637565b610858565b34801561036157600080fd5b50610185600081565b34801561037657600080fd5b5061012e610385366004611652565b6108f6565b34801561039657600080fd5b50609954610229906001600160a01b031681565b3480156103b657600080fd5b5060975461026590600160401b900463ffffffff1681565b3480156103da57600080fd5b5061012e6103e93660046115d1565b610cab565b61031a610cc7565b34801561040257600080fd5b5061018560008051602061196583398151915281565b34801561042457600080fd5b5061018560008051602061198583398151915281565b34801561044657600080fd5b506097546102659063ffffffff1681565b34801561046357600080fd5b5061012e610472366004611637565b61104a565b34801561048357600080fd5b5061012e610492366004611637565b6110f9565b60006001600160e01b03198216637965db0b60e01b14806104c857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60009081526065602052604090206001015490565b6104ec826104ce565b6104f5816111a8565b6104ff83836111b5565b505050565b6001600160a01b03811633146105795760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610583828261123b565b5050565b61059f60008051602061196583398151915233610770565b6105bb5760405162461bcd60e51b8152600401610570906116fd565b609a546040517f7afc83a35e7361ceb1e95001d0bef759d1ab977a2034889fbaedc71e36d6fe29916105f89184916001600160a01b031690611745565b60405180910390a1609a80546001600160a01b0319166001600160a01b0392909216919091179055565b61063a60008051602061196583398151915233610770565b6106565760405162461bcd60e51b8152600401610570906116fd565b60405147906001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561068e573d6000803e3d6000fd5b50604080516001600160a01b0384168152602081018390527fceac4c050cf0bd5320be38f58d0d370278667b15662191291c09d7fb144371b3910160405180910390a15050565b6106ed60008051602061196583398151915233610770565b6107095760405162461bcd60e51b8152600401610570906116fd565b609b546040517f6f0f81c6fd6b21ee193c68ce5da2ea2fa82eafcf21d0f4afd247275d7dc7b250916107469184916001600160a01b031690611745565b60405180910390a1609b80546001600160a01b0319166001600160a01b0392909216919091179055565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6097546000908190819063ffffffff16156107d3576098546097546107c69063ffffffff1686611775565b6107d09190611794565b92505b609754600160201b900463ffffffff16156108125760985460975461080590600160201b900463ffffffff1686611775565b61080f9190611794565b90505b609754600160401b900463ffffffff16156108515760985460975461084490600160401b900463ffffffff1686611775565b61084e9190611794565b91505b9193909250565b61087060008051602061198583398151915233610770565b61088c5760405162461bcd60e51b8152600401610570906117b6565b6098548163ffffffff1611156108b45760405162461bcd60e51b8152600401610570906117fb565b60975460405163ffffffff918216918316906000805160206119c583398151915290600090a36097805463ffffffff191663ffffffff92909216919091179055565b600054610100900460ff16158080156109165750600054600160ff909116105b806109305750303b158015610930575060005460ff166001145b6109935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610570565b6000805460ff1916600117905580156109b6576000805461ff0019166101001790555b6001600160a01b038816158015906109d657506001600160a01b03871615155b80156109ea57506001600160a01b038a1615155b80156109fe57506001600160a01b03891615155b8015610a1257506001600160a01b03861615155b610a6a5760405162461bcd60e51b8152602060048201526024808201527f4645454a41523a20504c4541534520454e5445522056414c49442041444452456044820152635353455360e01b6064820152608401610570565b848463ffffffff1611158015610a865750848363ffffffff1611155b8015610a985750848263ffffffff1611155b610ae45760405162461bcd60e51b815260206004820152601d60248201527f4645454a41523a20494e434f525245435420464545532056414c5545530000006044820152606401610570565b610aec6112a2565b610b046000805160206119658339815191528061130f565b610b2a60008051602061198583398151915260008051602061196583398151915261130f565b610b426000805160206119658339815191528b611362565b610b5a6000805160206119858339815191528a611362565b609a80546001600160a01b03808b166001600160a01b031992831617909255609b8054928a16929091169190911790556097805463ffffffff861663ffffffff199091168117909155604051600091906000805160206119c5833981519152908390a36097805463ffffffff60201b1916600160201b63ffffffff861690810291909117909155604051600091906000805160206119e5833981519152908390a36097805463ffffffff60401b1916600160401b63ffffffff851690810291909117909155604051600091906000805160206119a5833981519152908390a3609980546001600160a01b0319166001600160a01b03881617905560988590558015610c9f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b610cb4826104ce565b610cbd816111a8565b6104ff838361123b565b600080803480610cdf57506000938493508392509050565b6000806000610ced8461079b565b609754929550909350915060009063ffffffff1615610dbb57609a546040516000916001600160a01b03169086908381818185875af1925050503d8060008114610d53576040519150601f19603f3d011682016040523d82523d6000602084013e610d58565b606091505b5050905080610db95760405162461bcd60e51b815260206004820152602760248201527f53776170204665653a20436f756c64206e6f7420636f6c6c656374206e6574776044820152666f726b2066656560c81b6064820152608401610570565b505b609754600160401b900463ffffffff1615610f1257609960009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e47919061181a565b90506001600160a01b03811615801590610f10576000826001600160a01b03168560405160006040518083038185875af1925050503d8060008114610ea8576040519150601f19603f3d011682016040523d82523d6000602084013e610ead565b606091505b5050905080610f0e5760405162461bcd60e51b815260206004820152602760248201527f53776170204665653a20436f756c64206e6f7420636f6c6c65637420737570706044820152666f72742066656560c81b6064820152608401610570565b505b505b4715610fcd57609b5460405147916000916001600160a01b039091169083908381818185875af1925050503d8060008114610f69576040519150601f19603f3d011682016040523d82523d6000602084013e610f6e565b606091505b5050905080610fca5760405162461bcd60e51b815260206004820152602260248201527f53776170204665653a20436f756c64206e6f7420636f6c6c656374204c5020456044820152610a8960f31b6064820152608401610570565b50505b609a546040805134815260208101879052908101849052606081018590526001600160a01b039182166080820181905291831660a082015260c081019190915232907fa2279bb6bd2616a5b4115b12c83292c4b2ce188fcdb41e45660b34479653527d9060e00160405180910390a2509196909550909350915050565b61106260008051602061198583398151915233610770565b61107e5760405162461bcd60e51b8152600401610570906117b6565b6098548163ffffffff1611156110a65760405162461bcd60e51b8152600401610570906117fb565b60975460405163ffffffff600160401b9092048216918316906000805160206119a583398151915290600090a36097805463ffffffff909216600160401b0263ffffffff60401b19909216919091179055565b61111160008051602061198583398151915233610770565b61112d5760405162461bcd60e51b8152600401610570906117b6565b6098548163ffffffff1611156111555760405162461bcd60e51b8152600401610570906117fb565b60975460405163ffffffff600160201b9092048216918316906000805160206119e583398151915290600090a36097805463ffffffff909216600160201b0263ffffffff60201b19909216919091179055565b6111b2813361136c565b50565b6111bf8282610770565b6105835760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556111f73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6112458282610770565b156105835760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1661130d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610570565b565b600061131a836104ce565b600084815260656020526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61058382826111b5565b6113768282610770565b61058357611383816113c5565b61138e8360206113d7565b60405160200161139f929190611867565b60408051601f198184030181529082905262461bcd60e51b8252610570916004016118d6565b60606104c86001600160a01b03831660145b606060006113e6836002611775565b6113f1906002611909565b6001600160401b0381111561140857611408611921565b6040519080825280601f01601f191660200182016040528015611432576020820181803683370190505b509050600360fc1b8160008151811061144d5761144d611937565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061147c5761147c611937565b60200101906001600160f81b031916908160001a90535060006114a0846002611775565b6114ab906001611909565b90505b6001811115611523576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106114df576114df611937565b1a60f81b8282815181106114f5576114f5611937565b60200101906001600160f81b031916908160001a90535060049490941c9361151c8161194d565b90506114ae565b5083156115725760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610570565b9392505050565b60006020828403121561158b57600080fd5b81356001600160e01b03198116811461157257600080fd5b6000602082840312156115b557600080fd5b5035919050565b6001600160a01b03811681146111b257600080fd5b600080604083850312156115e457600080fd5b8235915060208301356115f6816115bc565b809150509250929050565b60006020828403121561161357600080fd5b8135611572816115bc565b803563ffffffff8116811461163257600080fd5b919050565b60006020828403121561164957600080fd5b6115728261161e565b60008060008060008060008060006101208a8c03121561167157600080fd5b893561167c816115bc565b985060208a013561168c816115bc565b975060408a013561169c816115bc565b965060608a01356116ac816115bc565b955060808a01356116bc816115bc565b945060a08a013593506116d160c08b0161161e565b92506116df60e08b0161161e565b91506116ee6101008b0161161e565b90509295985092959850929598565b60208082526028908201527f43616c6c6572206d7573742068617665204645455f4a41525f41444d494e5f526040820152674f4c4520726f6c6560c01b606082015260800190565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561178f5761178f61175f565b500290565b6000826117b157634e487b7160e01b600052601260045260246000fd5b500490565b60208082526025908201527f43616c6c6572206d7573742068617665204645455f5345545445525f524f4c4560408201526420726f6c6560d81b606082015260800190565b6020808252600590820152643e3130302560d81b604082015260600190565b60006020828403121561182c57600080fd5b8151611572816115bc565b60005b8381101561185257818101518382015260200161183a565b83811115611861576000848401525b50505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351611899816017850160208801611837565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516118ca816028840160208801611837565b01602801949350505050565b60208152600082518060208401526118f5816040850160208701611837565b601f01601f19169190910160400192915050565b6000821982111561191c5761191c61175f565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008161195c5761195c61175f565b50600019019056fead5f894053b79b3f3272d2fb85f516294bcb37fcc5702840cff603e823ce7b60e6ad9a47fbda1dc18de1eb5eeb7d935e5e81b4748f3cfc61e233e64f881820604d4856291d1718eebeb9c7d8ec5aa7ea577f1faa10e55b1f1689add8be3c376c21bb5baefeb906bb0cdaf473e4ece455dbf3c8281370c8cfa36506c97bbbc217a229002b6a6e27545ec75e2df93ec812e88d015c147f49d9edd9fbedb7320197a26469706673582212209326f1f3996e3bfc366f5f71c540afb73b2342898160e1e4f579dbbf773692fb64736f6c634300080b0033",
  "devdoc": {
    "details": "Allows split SFM SwapRouter Fee",
    "kind": "dev",
    "methods": {
      "getFeeAmount(uint256)": {
        "params": {
          "totalFee": "total fee"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address,address,address,uint256,uint32,uint32,uint32)": {
        "params": {
          "_buyBackAndBurnFee": "% of fee collected by the network\\",
          "_buyBackAndBurnFeeCollector": "address that collects network fees",
          "_feeJarAdmin": "admin of fee pool",
          "_feeSetter": "fee setter address"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setBuyBackAndBurnFee(uint32)": {
        "params": {
          "newFee": "new fee"
        }
      },
      "setBuyBackAndBurnFeeCollector(address)": {
        "params": {
          "newCollector": "new fee collector address"
        }
      },
      "setLPFee(uint32)": {
        "params": {
          "newFee": "new fee"
        }
      },
      "setLPFeeCollector(address)": {
        "params": {
          "newCollector": "new fee collector address"
        }
      },
      "setSupportFee(uint32)": {
        "params": {
          "newFee": "new fee"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "FeeJar",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BuyBackAndBurnFeeSet(uint32,uint32)": {
        "notice": "Network Fee set event"
      },
      "Fee(address,uint256,uint256,uint256,uint256,address,address,address)": {
        "notice": "Fee event"
      },
      "LPFeeCollectorSet(address,address)": {
        "notice": "LP Fee collector set event"
      },
      "LPFeeSet(uint32,uint32)": {
        "notice": "LP Fee set event"
      },
      "NetworFeeCollectorSet(address,address)": {
        "notice": "Network Fee collector set event"
      },
      "SupportFeeSet(uint32,uint32)": {
        "notice": "Support Fee set event"
      }
    },
    "kind": "user",
    "methods": {
      "FEE_JAR_ADMIN_ROLE()": {
        "notice": "FeeJar Admin role"
      },
      "FEE_SETTER_ROLE()": {
        "notice": "Fee setter role"
      },
      "buyBackAndBurnFee()": {
        "notice": "Network fee (measured in bips: 100 bips = 1% of contract balance)"
      },
      "buyBackAndBurnFeeCollector()": {
        "notice": "Network fee output address"
      },
      "fee()": {
        "notice": "Distributes any ETH in contract to relevant parties"
      },
      "getFeeAmount(uint256)": {
        "notice": "Return fees amount based on the total fee"
      },
      "initialize(address,address,address,address,address,uint256,uint32,uint32,uint32)": {
        "notice": "Initializes contract, setting admin roles + network fee"
      },
      "setBuyBackAndBurnFee(uint32)": {
        "notice": "Admin function to set network fee"
      },
      "setBuyBackAndBurnFeeCollector(address)": {
        "notice": "Admin function to set network fee collector address"
      },
      "setLPFee(uint32)": {
        "notice": "Admin function to set LP fee"
      },
      "setLPFeeCollector(address)": {
        "notice": "Admin function to set Lp fee collector address"
      },
      "setSupportFee(uint32)": {
        "notice": "Admin function to set support fee"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 415,
        "contract": "contracts/FeeJar.sol:FeeJar",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 418,
        "contract": "contracts/FeeJar.sol:FeeJar",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 902,
        "contract": "contracts/FeeJar.sol:FeeJar",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1121,
        "contract": "contracts/FeeJar.sol:FeeJar",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/FeeJar.sol:FeeJar",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/FeeJar.sol:FeeJar",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2026,
        "contract": "contracts/FeeJar.sol:FeeJar",
        "label": "buyBackAndBurnFee",
        "offset": 0,
        "slot": "151",
        "type": "t_uint32"
      },
      {
        "astId": 2028,
        "contract": "contracts/FeeJar.sol:FeeJar",
        "label": "lpFee",
        "offset": 4,
        "slot": "151",
        "type": "t_uint32"
      },
      {
        "astId": 2030,
        "contract": "contracts/FeeJar.sol:FeeJar",
        "label": "supportFee",
        "offset": 8,
        "slot": "151",
        "type": "t_uint32"
      },
      {
        "astId": 2032,
        "contract": "contracts/FeeJar.sol:FeeJar",
        "label": "maxPercentage",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 2034,
        "contract": "contracts/FeeJar.sol:FeeJar",
        "label": "factory",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 2037,
        "contract": "contracts/FeeJar.sol:FeeJar",
        "label": "buyBackAndBurnFeeCollector",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 2039,
        "contract": "contracts/FeeJar.sol:FeeJar",
        "label": "lpFeeCollector",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/FeeJar.sol:FeeJar",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/FeeJar.sol:FeeJar",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}