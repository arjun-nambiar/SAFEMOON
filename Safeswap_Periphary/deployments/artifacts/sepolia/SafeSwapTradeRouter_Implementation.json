{
  "address": "0x9731967b396d0322e884731E77C8D1260074C76B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_feeJar",
          "type": "address"
        }
      ],
      "name": "NewFeeJar",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wl",
          "type": "address"
        }
      ],
      "name": "addFfsWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeJar",
      "outputs": [
        {
          "internalType": "contract IFeeJar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getSwapFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_fees",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeJar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wl",
          "type": "address"
        }
      ],
      "name": "removeFfsWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "sePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeJar",
          "type": "address"
        }
      ],
      "name": "setFeeJar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokensWithFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokensWithFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapExactTokensForETHAndFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapExactTokensForTokensWithFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForExactETHAndFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeSwapTradeRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForExactTokensWithFeeAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistFfsFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x653a4422732455d6393f20feaa782d84cd67a8d00e37b95590857187f1bcb311",
  "receipt": {
    "to": null,
    "from": "0x01FF333398A4C7dEf91962b5fa4a4300660CA883",
    "contractAddress": "0x9731967b396d0322e884731E77C8D1260074C76B",
    "transactionIndex": 3,
    "gasUsed": "1545110",
    "logsBloom": "0x
    "blockHash": "0x53089c234d8d273a64c7c5fc15e3ee488261747d56b754294b351e50e1767102",
    "transactionHash": "0x653a4422732455d6393f20feaa782d84cd67a8d00e37b95590857187f1bcb311",
    "logs": [],
    "blockNumber": 2910226,
    "cumulativeGasUsed": "1813459",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "52a57dab6c67a894f1a4aa1548988799",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeJar\",\"type\":\"address\"}],\"name\":\"NewFeeJar\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wl\",\"type\":\"address\"}],\"name\":\"addFfsWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeJar\",\"outputs\":[{\"internalType\":\"contract IFeeJar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getSwapFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeJar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wl\",\"type\":\"address\"}],\"name\":\"removeFfsWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"sePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeJar\",\"type\":\"address\"}],\"name\":\"setFeeJar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokensWithFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensWithFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForETHAndFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForTokensWithFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForExactETHAndFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeSwapTradeRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForExactTokensWithFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistFfsFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Allows SFM Router-compliant trades to be paid via bsc\",\"kind\":\"dev\",\"methods\":{\"getSwapFee(uint256,uint256,address,address)\":{\"params\":{\"amountIn\":\"Amount to calculate fee\",\"tokenA\":\"token1 for swap\",\"tokenB\":\"token2 for swap\"}},\"setFeeJar(address)\":{\"params\":{\"_feeJar\":\"Address of FeeJar contract\"}},\"setRouter(address)\":{\"params\":{\"_router\":\"Address of SFM Router contract\"}},\"swapETHForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)\":{\"params\":{\"_feeAmount\":\"Fee value\",\"trade\":\"Trade details\"}},\"swapExactETHForTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)\":{\"params\":{\"_feeAmount\":\"Fee value\",\"trade\":\"Trade details\"}},\"swapExactTokensForETHAndFeeAmount((uint256,uint256,address[],address,uint256))\":{\"params\":{\"trade\":\"Trade details\"}},\"swapExactTokensForTokensWithFeeAmount((uint256,uint256,address[],address,uint256))\":{\"params\":{\"trade\":\"Trade details\"}},\"swapTokensForExactETHAndFeeAmount((uint256,uint256,address[],address,uint256))\":{\"params\":{\"trade\":\"Trade details\"}},\"swapTokensForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256))\":{\"params\":{\"trade\":\"Trade details\"}}},\"title\":\"SafeSwapTradeRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeJar()\":{\"notice\":\"FeepJar proxy\"},\"getSwapFee(uint256,uint256,address,address)\":{\"notice\":\"Get swap fee based on the amount\"},\"setFeeJar(address)\":{\"notice\":\"set feeJar address\"},\"setRouter(address)\":{\"notice\":\"set SFM router address\"},\"swapETHForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)\":{\"notice\":\"Swap BNB for tokens and pay amount of BNB input as fee\"},\"swapExactETHForTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)\":{\"notice\":\"Swap BNB for tokens and pay % of BNB input as fee\"},\"swapExactTokensForETHAndFeeAmount((uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for BNB and pay amount of BNB as fee\"},\"swapExactTokensForTokensWithFeeAmount((uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for tokens and pay BNB amount as fee\"},\"swapTokensForExactETHAndFeeAmount((uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for BNB and pay amount of BNB as fee\"},\"swapTokensForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for tokens and pay BNB amount as fee\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeSwapTradeRouter.sol\":\"SafeSwapTradeRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"contracts/SafeSwapTradeRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ISafeSwapRouter.sol\\\";\\nimport \\\"./interfaces/IFeeJar.sol\\\";\\nimport \\\"./interfaces/IERC20Extended.sol\\\";\\nimport \\\"./libraries/Initializable.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20Extended;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20Extended token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Extended token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20Extended-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Extended token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Extended token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Extended token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Extended token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n/**\\n * @title SafeSwapTradeRouter\\n * @dev Allows SFM Router-compliant trades to be paid via bsc\\n */\\ncontract SafeSwapTradeRouter is Initializable {\\n    using SafeERC20 for IERC20Extended;\\n\\n    /// @notice Receive function to allow contract to accept BNB\\n    receive() external payable {}\\n\\n    /// @notice Fallback function in case receive function is not matched\\n    fallback() external payable {}\\n\\n    /// @notice FeepJar proxy\\n    IFeeJar public feeJar;\\n    address public swapRouter;\\n    address public admin;\\n    uint256 public percent;\\n    uint256 public feePercent;\\n    mapping(address => bool) public whitelistFfsFee;\\n\\n    event NewFeeJar(address _feeJar);\\n\\n    /// @notice Trade details\\n    struct Trade {\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        address[] path;\\n        address payable to;\\n        uint256 deadline;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(admin == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function initialize(address _feeJar, address _router, uint256 _feePercent, uint256 _percent) external initializer {\\n        feeJar = IFeeJar(_feeJar);\\n        swapRouter = _router;\\n        admin = msg.sender;\\n        feePercent = _feePercent;\\n        percent = _percent;\\n    }\\n\\n    /**\\n     * @notice set SFM router address\\n     * @param _router Address of SFM Router contract\\n     */\\n    function setRouter(address _router) public onlyOwner {\\n        require(msg.sender == admin, \\\"SafeswapRouter: NOT AUTHORIZED\\\");\\n        swapRouter = _router;\\n    }\\n\\n    function setFeePercent(uint256 _feePercent) public onlyOwner {\\n        feePercent = _feePercent;\\n    }\\n\\n    function sePercent(uint256 _percent) public onlyOwner {\\n        percent = _percent;\\n    }\\n\\n    function addFfsWhitelist(address _wl) public onlyOwner {\\n        whitelistFfsFee[_wl] = true;\\n    }\\n\\n    function removeFfsWhitelist(address _wl) public onlyOwner {\\n        whitelistFfsFee[_wl] = false;\\n    }\\n\\n    /**\\n     * @notice set feeJar address\\n     * @param _feeJar Address of FeeJar contract\\n     */\\n    function setFeeJar(address _feeJar) external onlyOwner {\\n        feeJar = IFeeJar(_feeJar);\\n        emit NewFeeJar(_feeJar);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for BNB and pay amount of BNB as fee\\n     * @param trade Trade details\\n     */\\n    function swapExactTokensForETHAndFeeAmount(Trade calldata trade) external payable {\\n        uint256 feeAmount = getSwapFees(trade.amountIn, trade.path);\\n        require(msg.value >= feeAmount, \\\"SafeswapRouter: You must send enough BNB to cover fee\\\");\\n        _feeAmountBNB(feeAmount);\\n        _swapExactTokensForETH(trade.amountIn, trade.amountOut, trade.path, msg.sender, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for BNB and pay amount of BNB as fee\\n     * @param trade Trade details\\n     */\\n    function swapTokensForExactETHAndFeeAmount(Trade calldata trade) external payable {\\n        uint256 feeAmount = getSwapFees(trade.amountIn, trade.path);\\n        require(msg.value >= feeAmount, \\\"SafeswapRouter: You must send enough BNB to cover fee\\\");\\n        _feeAmountBNB(feeAmount);\\n        _swapTokensForExactETH(trade.amountOut, trade.amountIn, trade.path, msg.sender, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for tokens and pay % of BNB input as fee\\n     * @param trade Trade details\\n     * @param _feeAmount Fee value\\n     */\\n    function swapExactETHForTokensWithFeeAmount(Trade calldata trade, uint256 _feeAmount) external payable {\\n        uint256 feeAmount = getSwapFees(trade.amountIn, trade.path);\\n        require(\\n            _feeAmount >= feeAmount && (msg.value >= trade.amountIn + feeAmount),\\n            \\\"SafeswapRouter: You must send enough BNB to cover fee \\\"\\n        );\\n        _feeAmountBNB(feeAmount);\\n        _swapExactETHForTokens(trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for tokens and pay amount of BNB input as fee\\n     * @param trade Trade details\\n     * @param _feeAmount Fee value\\n     */\\n    function swapETHForExactTokensWithFeeAmount(Trade calldata trade, uint256 _feeAmount) external payable {\\n        uint256 feeAmount = getSwapFees(trade.amountIn, trade.path);\\n        require(\\n            _feeAmount >= feeAmount && (msg.value >= trade.amountIn + feeAmount),\\n            \\\"SafeswapRouter: You must send enough BNB to cover fee \\\"\\n        );\\n        _feeAmountBNB(feeAmount);\\n        _swapETHForExactTokens(trade.amountOut, trade.amountIn, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay BNB amount as fee\\n     * @param trade Trade details\\n     */\\n    function swapExactTokensForTokensWithFeeAmount(Trade calldata trade) external payable {\\n        uint256 feeAmount = getSwapFees(trade.amountIn, trade.path);\\n        require(msg.value >= feeAmount, \\\"SafeswapRouter: You must send enough BNB to cover fee \\\");\\n        _feeAmountBNB(feeAmount);\\n        _swapExactTokensForTokens(trade.amountIn, trade.amountOut, trade.path, msg.sender, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay BNB amount as fee\\n     * @param trade Trade details\\n     */\\n    function swapTokensForExactTokensWithFeeAmount(Trade calldata trade) external payable {\\n        uint256 feeAmount = getSwapFees(trade.amountIn, trade.path);\\n        require(msg.value >= feeAmount, \\\"SafeswapRouter: You must send enough BNB to cover fee \\\");\\n        _feeAmountBNB(feeAmount);\\n        _swapTokensForExactTokens(trade.amountOut, trade.amountIn, trade.path, msg.sender, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap BNB for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param to Address to receive tokens\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapExactETHForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapExactETHForTokensSupportingFeeOnTransferTokens{ value: amountIn }(\\n            amountOutMin,\\n            path,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap BNB for tokens\\n     * @param amountOut Amount of BNB out\\n     * @param amountInMax Max amount in\\n     * @param path Path for swap\\n     * @param to Address to receive BNB\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapETHForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapETHForExactTokens{ value: amountInMax }(amountOut, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for BNB\\n     * @param amountOut Amount of BNB out\\n     * @param amountInMax Max amount in\\n     * @param path Path for swap\\n     * @param from address to swap token from\\n     * @param to Address to receive BNB\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapTokensForExactETH(amountOut, amountInMax, path, from, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for BNB\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param from address to swap token from\\n     * @param to Address to receive tokens\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountIn,\\n            amountOutMin,\\n            path,\\n            from,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param from address to swap token from\\n     * @param to Address to receive tokens\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            amountIn,\\n            amountOutMin,\\n            path,\\n            from,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for tokens\\n     * @param amountOut Amount of tokens out\\n     * @param amountInMax Max amount in\\n     * @param path Path for swap\\n     * @param from address to swap token from\\n     * @param to Address to receive tokens\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        ISafeSwapRouter(swapRouter).swapTokensForExactTokens(amountOut, amountInMax, path, from, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Get swap fee based on the amount\\n     * @param amountIn Amount to calculate fee\\n     * @param tokenA token1 for swap\\n     * @param tokenB token2 for swap\\n     */\\n    function getSwapFee(\\n        uint256 amountIn,\\n        uint256 _amountOut,\\n        address tokenA,\\n        address tokenB\\n    ) public view returns (uint256 _fee) {\\n        uint256 decimals = 18 - IERC20Extended(tokenA).decimals();\\n\\n        if (tokenA == ISafeSwapRouter(swapRouter).WETH()) {\\n            return _fee = ((amountIn * feePercent) / percent) * 10**decimals;\\n        }\\n\\n        address[] memory _FFSpath = new address[](2);\\n        _FFSpath[0] = tokenA;\\n        _FFSpath[1] = ISafeSwapRouter(swapRouter).WETH();\\n\\n        uint256 amountOut;\\n        try ISafeSwapRouter(swapRouter).getAmountsOut(amountIn, _FFSpath) returns (uint256[] memory amounts) {\\n            amountOut = amounts[amounts.length - 1];\\n        } catch {\\n            _FFSpath[0] = tokenB;\\n            try ISafeSwapRouter(swapRouter).getAmountsOut(_amountOut, _FFSpath) returns (uint256[] memory amounts) {\\n                amountOut = amounts[amounts.length - 1];\\n            } catch {\\n                amountOut = 0;\\n            }\\n        }\\n\\n        if (amountOut > 0) {\\n            _fee = (amountOut * feePercent) / percent;\\n        } else {\\n            _fee = ((amountIn * feePercent) / percent) * 10**decimals;\\n        }\\n\\n        return _fee;\\n    }\\n\\n    function getSwapFees(uint256 amountIn, address[] memory path) public view returns (uint256 _fees) {\\n        if (whitelistFfsFee[msg.sender]) {\\n            return 0;\\n        }\\n        require(path.length >= 2, \\\"SafeswapFee: INVALID_PATH\\\");\\n        uint256[] memory amounts = new uint256[](path.length);\\n        amounts = ISafeSwapRouter(swapRouter).getAmountsOut(amountIn, path);\\n\\n        for (uint256 i; i < path.length - 1; i++) {\\n            _fees = _fees + getSwapFee(amounts[i], amounts[i + 1], path[i], path[i + 1]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Fee % of BNB contract balance\\n     * @param feePct % to get fee\\n     */\\n    function _feePctBNB(uint32 feePct) internal {\\n        uint256 contractBalance = address(this).balance;\\n        uint256 feeAmount = (contractBalance * feePct) / 1000000;\\n        feeJar.fee{ value: feeAmount }();\\n    }\\n\\n    /**\\n     * @notice Fee specific amount of BNB\\n     * @param feeAmount Amount to fee\\n     */\\n    function _feeAmountBNB(uint256 feeAmount) internal {\\n        feeJar.fee{ value: feeAmount }();\\n    }\\n\\n    /**\\n     * @notice Convert a token balance into BNB and then fee\\n     * @param amountIn Amount to swap\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _feeWithTokens(\\n        uint256 amountIn,\\n        address from,\\n        address[] memory path,\\n        uint256 deadline,\\n        uint256 minEth\\n    ) internal {\\n        IERC20Extended(path[0]).safeIncreaseAllowance(address(swapRouter), amountIn);\\n        ISafeSwapRouter(swapRouter).swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountIn,\\n            minEth,\\n            path,\\n            from,\\n            address(this),\\n            deadline\\n        );\\n        feeJar.fee{ value: address(this).balance }();\\n    }\\n}\\n\",\"keccak256\":\"0xcdc45c67199a552d0cd1cd1c5d9dbe33d3513a3693622d5a302e17593e65a131\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC20Extended {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function version() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function receiveWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        returns (bool);\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function nonces(address) external view returns (uint256);\\n\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n\\n    function VERSION_HASH() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n\\n    function TRANSFER_WITH_AUTHORIZATION_TYPEHASH()\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function RECEIVE_WITH_AUTHORIZATION_TYPEHASH()\\n        external\\n        view\\n        returns (bytes32);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n}\\n\",\"keccak256\":\"0x45fe6d67343a1fb42b650dc78a66553ba28616b4424db70311a340548b7c79e1\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeJar.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IFeeJar {\\n    function fee() external payable;\\n}\\n\",\"keccak256\":\"0x976e76c8dcb84f2651736b1f0a9fb5349dbeb15e98dc1c7599250254094ce48b\",\"license\":\"MIT\"},\"contracts/interfaces/ISafeSwapRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\nimport \\\"./ISafeswapRouter01.sol\\\";\\n\\ninterface ISafeSwapRouter is ISafeswapRouter01 {\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x63ecfa60091944e8395808ee156cea973829410d05026a590bc339241c86c0b6\",\"license\":\"MIT\"},\"contracts/interfaces/ISafeswapRouter01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface ISafeswapRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address from,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external view returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external view returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xb366e1a3bdf247df2fa758e261f40b892ffa76873a22f279047eedf79dea3d9a\"},\"contracts/libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.11;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            _initializing || _isConstructor() || !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc2a0f06b1a46db8d1476fb6c1c3bfe31935e17fe4f525869a6b54bb821788e80\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611afd806100206000396000f3fe6080604052600436106100fb5760003560e01c80630ea9c040146101045780631bfda7821461011757806344a850ba1461014a5780634535e34c1461016a5780635ffde08f1461019d57806370ba1113146101b057806372d04981146101c65780637ce3489b146101d95780637fd6f15c146101f957806381bdf4f21461020f5780638a879cab1461022f5780639166aecd146102425780639b8a9b6814610255578063a351408714610275578063bca31f9814610288578063c0d78655146102a8578063c31c9c07146102c8578063d0bfbe97146102e8578063d76d59fc14610308578063eb990c5914610348578063f851a4401461036857005b3661010257005b005b6101026101123660046113a7565b610388565b34801561012357600080fd5b506101376101323660046113f3565b610470565b6040519081526020015b60405180910390f35b34801561015657600080fd5b506101376101653660046114a6565b610853565b34801561017657600080fd5b50600054610190906201000090046001600160a01b031681565b6040516101419190611550565b6101026101ab3660046113a7565b610a47565b3480156101bc57600080fd5b5061013760035481565b6101026101d4366004611564565b610aeb565b3480156101e557600080fd5b506101026101f43660046115a8565b610ba8565b34801561020557600080fd5b5061013760045481565b34801561021b57600080fd5b5061010261022a3660046115c1565b610bd7565b61010261023d3660046113a7565b610c5e565b6101026102503660046113a7565b610d02565b34801561026157600080fd5b506101026102703660046115a8565b610da6565b610102610283366004611564565b610dd5565b34801561029457600080fd5b506101026102a33660046115c1565b610e8d565b3480156102b457600080fd5b506101026102c33660046115c1565b610edb565b3480156102d457600080fd5b50600154610190906001600160a01b031681565b3480156102f457600080fd5b506101026103033660046115c1565b610f81565b34801561031457600080fd5b506103386103233660046115c1565b60056020526000908152604090205460ff1681565b6040519015158152602001610141565b34801561035457600080fd5b506101026103633660046115e5565b610fcc565b34801561037457600080fd5b50600254610190906001600160a01b031681565b60006103d3823561039c604085018561162b565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061085392505050565b9050803410156103fe5760405162461bcd60e51b81526004016103f59061167b565b60405180910390fd5b610407816110e1565b61046c8235602084013561041e604086018661162b565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525033925061046291505060808801606089016115c1565b876080013561114d565b5050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d591906116be565b6104e09060126116f7565b60ff169050600160009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055c919061171a565b6001600160a01b0316846001600160a01b031614156105ac5761058081600a61181b565b6003546004546105909089611827565b61059a9190611846565b6105a49190611827565b91505061084b565b60408051600280825260608201835260009260208301908036833701905050905084816000815181106105e1576105e1611868565b6001600160a01b03928316602091820292909201810191909152600154604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065e919061171a565b8160018151811061067157610671611868565b6001600160a01b03928316602091820292909201015260015460405163d06ca61f60e01b8152600092919091169063d06ca61f906106b5908b9086906004016118c2565b600060405180830381865afa9250505080156106f357506040513d6000823e601f3d908101601f191682016040526106f091908101906118db565b60015b6107c357848260008151811061070b5761070b611868565b6001600160a01b03928316602091820292909201015260015460405163d06ca61f60e01b815291169063d06ca61f9061074a908a9086906004016118c2565b600060405180830381865afa92505050801561078857506040513d6000823e601f3d908101601f1916820160405261078591908101906118db565b60015b610794575060006107ee565b80600182516107a3919061196b565b815181106107b3576107b3611868565b60200260200101519150506107ee565b80600182516107d2919061196b565b815181106107e2576107e2611868565b60200260200101519150505b8015610815576003546004546108049083611827565b61080e9190611846565b9350610847565b61082083600a61181b565b600354600454610830908b611827565b61083a9190611846565b6108449190611827565b93505b5050505b949350505050565b3360009081526005602052604081205460ff161561087357506000610a41565b6002825110156108c15760405162461bcd60e51b81526020600482015260196024820152780a6c2cccae6eec2e08ccaca7440929cac82989288bea082a89603b1b60448201526064016103f5565b600082516001600160401b038111156108dc576108dc61143d565b604051908082528060200260200182016040528015610905578160200160208202803683370190505b5060015460405163d06ca61f60e01b81529192506001600160a01b03169063d06ca61f9061093990879087906004016118c2565b600060405180830381865afa158015610956573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261097e91908101906118db565b905060005b60018451610991919061196b565b811015610a3e57610a208282815181106109ad576109ad611868565b6020026020010151838360016109c39190611982565b815181106109d3576109d3611868565b60200260200101518684815181106109ed576109ed611868565b602002602001015187856001610a039190611982565b81518110610a1357610a13611868565b6020026020010151610470565b610a2a9084611982565b925080610a368161199a565b915050610983565b50505b92915050565b6000610a5b823561039c604085018561162b565b905080341015610a7d5760405162461bcd60e51b81526004016103f5906119b5565b610a86816110e1565b61046c60208301358335610a9d604086018661162b565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250610ae191505060808801606089016115c1565b87608001356111c1565b6000610aff833561039c604086018661162b565b9050808210158015610b1b5750610b17818435611982565b3410155b610b375760405162461bcd60e51b81526004016103f5906119b5565b610b40816110e1565b610ba360208401358435610b57604087018761162b565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610b999250505060808801606089016115c1565b876080013561124b565b505050565b6002546001600160a01b03163314610bd25760405162461bcd60e51b81526004016103f5906119f9565b600455565b6002546001600160a01b03163314610c015760405162461bcd60e51b81526004016103f5906119f9565b6000805462010000600160b01b031916620100006001600160a01b038416021790556040517f9fbc3107cd5de0b63e7e8ee125c41156ece8511d0030e7d3e7b9174d6b9cf2c390610c53908390611550565b60405180910390a150565b6000610c72823561039c604085018561162b565b905080341015610c945760405162461bcd60e51b81526004016103f59061167b565b610c9d816110e1565b61046c60208301358335610cb4604086018661162b565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250610cf891505060808801606089016115c1565b87608001356112ca565b6000610d16823561039c604085018561162b565b905080341015610d385760405162461bcd60e51b81526004016103f5906119b5565b610d41816110e1565b61046c82356020840135610d58604086018661162b565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250610d9c91505060808801606089016115c1565b8760800135611304565b6002546001600160a01b03163314610dd05760405162461bcd60e51b81526004016103f5906119f9565b600355565b6000610de9833561039c604086018661162b565b9050808210158015610e055750610e01818435611982565b3410155b610e215760405162461bcd60e51b81526004016103f5906119b5565b610e2a816110e1565b610ba383356020850135610e41604087018761162b565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610e839250505060808801606089016115c1565b876080013561133e565b6002546001600160a01b03163314610eb75760405162461bcd60e51b81526004016103f5906119f9565b6001600160a01b03166000908152600560205260409020805460ff19166001179055565b6002546001600160a01b03163314610f055760405162461bcd60e51b81526004016103f5906119f9565b6002546001600160a01b03163314610f5f5760405162461bcd60e51b815260206004820152601e60248201527f5361666573776170526f757465723a204e4f5420415554484f52495a4544000060448201526064016103f5565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610fab5760405162461bcd60e51b81526004016103f5906119f9565b6001600160a01b03166000908152600560205260409020805460ff19169055565b600054610100900460ff1680610fe15750303b155b80610fef575060005460ff16155b6110525760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103f5565b600054610100900460ff16158015611074576000805461ffff19166101011790555b600080546001600160a01b03808816620100000262010000600160b01b031990921691909117909155600180549186166001600160a01b031992831617905560028054909116331790556004839055600382905580156110da576000805461ff00191690555b5050505050565b600060029054906101000a90046001600160a01b03166001600160a01b031663ddca3f43826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561113157600080fd5b505af1158015611145573d6000803e3d6000fd5b505050505050565b600154604051632955261160e11b81526001600160a01b03909116906352aa4c229061118790899089908990899089908990600401611a2e565b600060405180830381600087803b1580156111a157600080fd5b505af11580156111b5573d6000803e3d6000fd5b50505050505050505050565b60015460405163083722b560e01b81526001600160a01b039091169063083722b5906111fb90899089908990899089908990600401611a2e565b6000604051808303816000875af115801561121a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261124291908101906118db565b50505050505050565b60015460405163fb3bdb4160e01b81526001600160a01b039091169063fb3bdb41908690611283908990889088908890600401611a72565b60006040518083038185885af11580156112a1573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261114591908101906118db565b6001546040516304723bfd60e31b81526001600160a01b0390911690632391dfe8906111fb90899089908990899089908990600401611a2e565b60015460405163561c49dd60e11b81526001600160a01b039091169063ac3893ba9061118790899089908990899089908990600401611a2e565b60015460405163b6f9de9560e01b81526001600160a01b039091169063b6f9de95908790611376908890889088908890600401611a72565b6000604051808303818588803b1580156111a157600080fd5b600060a082840312156113a157600080fd5b50919050565b6000602082840312156113b957600080fd5b81356001600160401b038111156113cf57600080fd5b61084b8482850161138f565b6001600160a01b03811681146113f057600080fd5b50565b6000806000806080858703121561140957600080fd5b84359350602085013592506040850135611422816113db565b91506060850135611432816113db565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561147b5761147b61143d565b604052919050565b60006001600160401b0382111561149c5761149c61143d565b5060051b60200190565b600080604083850312156114b957600080fd5b823591506020808401356001600160401b038111156114d757600080fd5b8401601f810186136114e857600080fd5b80356114fb6114f682611483565b611453565b81815260059190911b8201830190838101908883111561151a57600080fd5b928401925b82841015611541578335611532816113db565b8252928401929084019061151f565b80955050505050509250929050565b6001600160a01b0391909116815260200190565b6000806040838503121561157757600080fd5b82356001600160401b0381111561158d57600080fd5b6115998582860161138f565b95602094909401359450505050565b6000602082840312156115ba57600080fd5b5035919050565b6000602082840312156115d357600080fd5b81356115de816113db565b9392505050565b600080600080608085870312156115fb57600080fd5b8435611606816113db565b93506020850135611616816113db565b93969395505050506040820135916060013590565b6000808335601e1984360301811261164257600080fd5b8301803591506001600160401b0382111561165c57600080fd5b6020019150600581901b360382131561167457600080fd5b9250929050565b6020808252603590820152600080516020611aa88339815191526040820152746f75676820424e4220746f20636f7665722066656560581b606082015260800190565b6000602082840312156116d057600080fd5b815160ff811681146115de57600080fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff841680821015611711576117116116e1565b90039392505050565b60006020828403121561172c57600080fd5b81516115de816113db565b600181815b80851115611772578160001904821115611758576117586116e1565b8085161561176557918102915b93841c939080029061173c565b509250929050565b60008261178957506001610a41565b8161179657506000610a41565b81600181146117ac57600281146117b6576117d2565b6001915050610a41565b60ff8411156117c7576117c76116e1565b50506001821b610a41565b5060208310610133831016604e8410600b84101617156117f5575081810a610a41565b6117ff8383611737565b8060001904821115611813576118136116e1565b029392505050565b60006115de838361177a565b6000816000190483118215151615611841576118416116e1565b500290565b60008261186357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b838110156118b75781516001600160a01b031687529582019590820190600101611892565b509495945050505050565b82815260406020820152600061084b604083018461187e565b600060208083850312156118ee57600080fd5b82516001600160401b0381111561190457600080fd5b8301601f8101851361191557600080fd5b80516119236114f682611483565b81815260059190911b8201830190838101908783111561194257600080fd5b928401925b8284101561196057835182529284019290840190611947565b979650505050505050565b60008282101561197d5761197d6116e1565b500390565b60008219821115611995576119956116e1565b500190565b60006000198214156119ae576119ae6116e1565b5060010190565b6020808252603690820152600080516020611aa8833981519152604082015275037bab3b410212721103a379031b7bb32b9103332b2960551b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b86815285602082015260c060408201526000611a4d60c083018761187e565b6001600160a01b03958616606084015293909416608082015260a00152949350505050565b848152608060208201526000611a8b608083018661187e565b6001600160a01b0394909416604083015250606001529291505056fe5361666573776170526f757465723a20596f75206d7573742073656e6420656ea26469706673582212207e57bcc089aee32eac4b0e3725f4ca0a6b65fdc01816349433b237753d21f46464736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106100fb5760003560e01c80630ea9c040146101045780631bfda7821461011757806344a850ba1461014a5780634535e34c1461016a5780635ffde08f1461019d57806370ba1113146101b057806372d04981146101c65780637ce3489b146101d95780637fd6f15c146101f957806381bdf4f21461020f5780638a879cab1461022f5780639166aecd146102425780639b8a9b6814610255578063a351408714610275578063bca31f9814610288578063c0d78655146102a8578063c31c9c07146102c8578063d0bfbe97146102e8578063d76d59fc14610308578063eb990c5914610348578063f851a4401461036857005b3661010257005b005b6101026101123660046113a7565b610388565b34801561012357600080fd5b506101376101323660046113f3565b610470565b6040519081526020015b60405180910390f35b34801561015657600080fd5b506101376101653660046114a6565b610853565b34801561017657600080fd5b50600054610190906201000090046001600160a01b031681565b6040516101419190611550565b6101026101ab3660046113a7565b610a47565b3480156101bc57600080fd5b5061013760035481565b6101026101d4366004611564565b610aeb565b3480156101e557600080fd5b506101026101f43660046115a8565b610ba8565b34801561020557600080fd5b5061013760045481565b34801561021b57600080fd5b5061010261022a3660046115c1565b610bd7565b61010261023d3660046113a7565b610c5e565b6101026102503660046113a7565b610d02565b34801561026157600080fd5b506101026102703660046115a8565b610da6565b610102610283366004611564565b610dd5565b34801561029457600080fd5b506101026102a33660046115c1565b610e8d565b3480156102b457600080fd5b506101026102c33660046115c1565b610edb565b3480156102d457600080fd5b50600154610190906001600160a01b031681565b3480156102f457600080fd5b506101026103033660046115c1565b610f81565b34801561031457600080fd5b506103386103233660046115c1565b60056020526000908152604090205460ff1681565b6040519015158152602001610141565b34801561035457600080fd5b506101026103633660046115e5565b610fcc565b34801561037457600080fd5b50600254610190906001600160a01b031681565b60006103d3823561039c604085018561162b565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061085392505050565b9050803410156103fe5760405162461bcd60e51b81526004016103f59061167b565b60405180910390fd5b610407816110e1565b61046c8235602084013561041e604086018661162b565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525033925061046291505060808801606089016115c1565b876080013561114d565b5050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d591906116be565b6104e09060126116f7565b60ff169050600160009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055c919061171a565b6001600160a01b0316846001600160a01b031614156105ac5761058081600a61181b565b6003546004546105909089611827565b61059a9190611846565b6105a49190611827565b91505061084b565b60408051600280825260608201835260009260208301908036833701905050905084816000815181106105e1576105e1611868565b6001600160a01b03928316602091820292909201810191909152600154604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065e919061171a565b8160018151811061067157610671611868565b6001600160a01b03928316602091820292909201015260015460405163d06ca61f60e01b8152600092919091169063d06ca61f906106b5908b9086906004016118c2565b600060405180830381865afa9250505080156106f357506040513d6000823e601f3d908101601f191682016040526106f091908101906118db565b60015b6107c357848260008151811061070b5761070b611868565b6001600160a01b03928316602091820292909201015260015460405163d06ca61f60e01b815291169063d06ca61f9061074a908a9086906004016118c2565b600060405180830381865afa92505050801561078857506040513d6000823e601f3d908101601f1916820160405261078591908101906118db565b60015b610794575060006107ee565b80600182516107a3919061196b565b815181106107b3576107b3611868565b60200260200101519150506107ee565b80600182516107d2919061196b565b815181106107e2576107e2611868565b60200260200101519150505b8015610815576003546004546108049083611827565b61080e9190611846565b9350610847565b61082083600a61181b565b600354600454610830908b611827565b61083a9190611846565b6108449190611827565b93505b5050505b949350505050565b3360009081526005602052604081205460ff161561087357506000610a41565b6002825110156108c15760405162461bcd60e51b81526020600482015260196024820152780a6c2cccae6eec2e08ccaca7440929cac82989288bea082a89603b1b60448201526064016103f5565b600082516001600160401b038111156108dc576108dc61143d565b604051908082528060200260200182016040528015610905578160200160208202803683370190505b5060015460405163d06ca61f60e01b81529192506001600160a01b03169063d06ca61f9061093990879087906004016118c2565b600060405180830381865afa158015610956573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261097e91908101906118db565b905060005b60018451610991919061196b565b811015610a3e57610a208282815181106109ad576109ad611868565b6020026020010151838360016109c39190611982565b815181106109d3576109d3611868565b60200260200101518684815181106109ed576109ed611868565b602002602001015187856001610a039190611982565b81518110610a1357610a13611868565b6020026020010151610470565b610a2a9084611982565b925080610a368161199a565b915050610983565b50505b92915050565b6000610a5b823561039c604085018561162b565b905080341015610a7d5760405162461bcd60e51b81526004016103f5906119b5565b610a86816110e1565b61046c60208301358335610a9d604086018661162b565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250610ae191505060808801606089016115c1565b87608001356111c1565b6000610aff833561039c604086018661162b565b9050808210158015610b1b5750610b17818435611982565b3410155b610b375760405162461bcd60e51b81526004016103f5906119b5565b610b40816110e1565b610ba360208401358435610b57604087018761162b565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610b999250505060808801606089016115c1565b876080013561124b565b505050565b6002546001600160a01b03163314610bd25760405162461bcd60e51b81526004016103f5906119f9565b600455565b6002546001600160a01b03163314610c015760405162461bcd60e51b81526004016103f5906119f9565b6000805462010000600160b01b031916620100006001600160a01b038416021790556040517f9fbc3107cd5de0b63e7e8ee125c41156ece8511d0030e7d3e7b9174d6b9cf2c390610c53908390611550565b60405180910390a150565b6000610c72823561039c604085018561162b565b905080341015610c945760405162461bcd60e51b81526004016103f59061167b565b610c9d816110e1565b61046c60208301358335610cb4604086018661162b565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250610cf891505060808801606089016115c1565b87608001356112ca565b6000610d16823561039c604085018561162b565b905080341015610d385760405162461bcd60e51b81526004016103f5906119b5565b610d41816110e1565b61046c82356020840135610d58604086018661162b565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250610d9c91505060808801606089016115c1565b8760800135611304565b6002546001600160a01b03163314610dd05760405162461bcd60e51b81526004016103f5906119f9565b600355565b6000610de9833561039c604086018661162b565b9050808210158015610e055750610e01818435611982565b3410155b610e215760405162461bcd60e51b81526004016103f5906119b5565b610e2a816110e1565b610ba383356020850135610e41604087018761162b565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610e839250505060808801606089016115c1565b876080013561133e565b6002546001600160a01b03163314610eb75760405162461bcd60e51b81526004016103f5906119f9565b6001600160a01b03166000908152600560205260409020805460ff19166001179055565b6002546001600160a01b03163314610f055760405162461bcd60e51b81526004016103f5906119f9565b6002546001600160a01b03163314610f5f5760405162461bcd60e51b815260206004820152601e60248201527f5361666573776170526f757465723a204e4f5420415554484f52495a4544000060448201526064016103f5565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610fab5760405162461bcd60e51b81526004016103f5906119f9565b6001600160a01b03166000908152600560205260409020805460ff19169055565b600054610100900460ff1680610fe15750303b155b80610fef575060005460ff16155b6110525760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103f5565b600054610100900460ff16158015611074576000805461ffff19166101011790555b600080546001600160a01b03808816620100000262010000600160b01b031990921691909117909155600180549186166001600160a01b031992831617905560028054909116331790556004839055600382905580156110da576000805461ff00191690555b5050505050565b600060029054906101000a90046001600160a01b03166001600160a01b031663ddca3f43826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561113157600080fd5b505af1158015611145573d6000803e3d6000fd5b505050505050565b600154604051632955261160e11b81526001600160a01b03909116906352aa4c229061118790899089908990899089908990600401611a2e565b600060405180830381600087803b1580156111a157600080fd5b505af11580156111b5573d6000803e3d6000fd5b50505050505050505050565b60015460405163083722b560e01b81526001600160a01b039091169063083722b5906111fb90899089908990899089908990600401611a2e565b6000604051808303816000875af115801561121a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261124291908101906118db565b50505050505050565b60015460405163fb3bdb4160e01b81526001600160a01b039091169063fb3bdb41908690611283908990889088908890600401611a72565b60006040518083038185885af11580156112a1573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261114591908101906118db565b6001546040516304723bfd60e31b81526001600160a01b0390911690632391dfe8906111fb90899089908990899089908990600401611a2e565b60015460405163561c49dd60e11b81526001600160a01b039091169063ac3893ba9061118790899089908990899089908990600401611a2e565b60015460405163b6f9de9560e01b81526001600160a01b039091169063b6f9de95908790611376908890889088908890600401611a72565b6000604051808303818588803b1580156111a157600080fd5b600060a082840312156113a157600080fd5b50919050565b6000602082840312156113b957600080fd5b81356001600160401b038111156113cf57600080fd5b61084b8482850161138f565b6001600160a01b03811681146113f057600080fd5b50565b6000806000806080858703121561140957600080fd5b84359350602085013592506040850135611422816113db565b91506060850135611432816113db565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561147b5761147b61143d565b604052919050565b60006001600160401b0382111561149c5761149c61143d565b5060051b60200190565b600080604083850312156114b957600080fd5b823591506020808401356001600160401b038111156114d757600080fd5b8401601f810186136114e857600080fd5b80356114fb6114f682611483565b611453565b81815260059190911b8201830190838101908883111561151a57600080fd5b928401925b82841015611541578335611532816113db565b8252928401929084019061151f565b80955050505050509250929050565b6001600160a01b0391909116815260200190565b6000806040838503121561157757600080fd5b82356001600160401b0381111561158d57600080fd5b6115998582860161138f565b95602094909401359450505050565b6000602082840312156115ba57600080fd5b5035919050565b6000602082840312156115d357600080fd5b81356115de816113db565b9392505050565b600080600080608085870312156115fb57600080fd5b8435611606816113db565b93506020850135611616816113db565b93969395505050506040820135916060013590565b6000808335601e1984360301811261164257600080fd5b8301803591506001600160401b0382111561165c57600080fd5b6020019150600581901b360382131561167457600080fd5b9250929050565b6020808252603590820152600080516020611aa88339815191526040820152746f75676820424e4220746f20636f7665722066656560581b606082015260800190565b6000602082840312156116d057600080fd5b815160ff811681146115de57600080fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff841680821015611711576117116116e1565b90039392505050565b60006020828403121561172c57600080fd5b81516115de816113db565b600181815b80851115611772578160001904821115611758576117586116e1565b8085161561176557918102915b93841c939080029061173c565b509250929050565b60008261178957506001610a41565b8161179657506000610a41565b81600181146117ac57600281146117b6576117d2565b6001915050610a41565b60ff8411156117c7576117c76116e1565b50506001821b610a41565b5060208310610133831016604e8410600b84101617156117f5575081810a610a41565b6117ff8383611737565b8060001904821115611813576118136116e1565b029392505050565b60006115de838361177a565b6000816000190483118215151615611841576118416116e1565b500290565b60008261186357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b838110156118b75781516001600160a01b031687529582019590820190600101611892565b509495945050505050565b82815260406020820152600061084b604083018461187e565b600060208083850312156118ee57600080fd5b82516001600160401b0381111561190457600080fd5b8301601f8101851361191557600080fd5b80516119236114f682611483565b81815260059190911b8201830190838101908783111561194257600080fd5b928401925b8284101561196057835182529284019290840190611947565b979650505050505050565b60008282101561197d5761197d6116e1565b500390565b60008219821115611995576119956116e1565b500190565b60006000198214156119ae576119ae6116e1565b5060010190565b6020808252603690820152600080516020611aa8833981519152604082015275037bab3b410212721103a379031b7bb32b9103332b2960551b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b86815285602082015260c060408201526000611a4d60c083018761187e565b6001600160a01b03958616606084015293909416608082015260a00152949350505050565b848152608060208201526000611a8b608083018661187e565b6001600160a01b0394909416604083015250606001529291505056fe5361666573776170526f757465723a20596f75206d7573742073656e6420656ea26469706673582212207e57bcc089aee32eac4b0e3725f4ca0a6b65fdc01816349433b237753d21f46464736f6c634300080b0033",
  "devdoc": {
    "details": "Allows SFM Router-compliant trades to be paid via bsc",
    "kind": "dev",
    "methods": {
      "getSwapFee(uint256,uint256,address,address)": {
        "params": {
          "amountIn": "Amount to calculate fee",
          "tokenA": "token1 for swap",
          "tokenB": "token2 for swap"
        }
      },
      "setFeeJar(address)": {
        "params": {
          "_feeJar": "Address of FeeJar contract"
        }
      },
      "setRouter(address)": {
        "params": {
          "_router": "Address of SFM Router contract"
        }
      },
      "swapETHForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)": {
        "params": {
          "_feeAmount": "Fee value",
          "trade": "Trade details"
        }
      },
      "swapExactETHForTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)": {
        "params": {
          "_feeAmount": "Fee value",
          "trade": "Trade details"
        }
      },
      "swapExactTokensForETHAndFeeAmount((uint256,uint256,address[],address,uint256))": {
        "params": {
          "trade": "Trade details"
        }
      },
      "swapExactTokensForTokensWithFeeAmount((uint256,uint256,address[],address,uint256))": {
        "params": {
          "trade": "Trade details"
        }
      },
      "swapTokensForExactETHAndFeeAmount((uint256,uint256,address[],address,uint256))": {
        "params": {
          "trade": "Trade details"
        }
      },
      "swapTokensForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256))": {
        "params": {
          "trade": "Trade details"
        }
      }
    },
    "title": "SafeSwapTradeRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "feeJar()": {
        "notice": "FeepJar proxy"
      },
      "getSwapFee(uint256,uint256,address,address)": {
        "notice": "Get swap fee based on the amount"
      },
      "setFeeJar(address)": {
        "notice": "set feeJar address"
      },
      "setRouter(address)": {
        "notice": "set SFM router address"
      },
      "swapETHForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)": {
        "notice": "Swap BNB for tokens and pay amount of BNB input as fee"
      },
      "swapExactETHForTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)": {
        "notice": "Swap BNB for tokens and pay % of BNB input as fee"
      },
      "swapExactTokensForETHAndFeeAmount((uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for BNB and pay amount of BNB as fee"
      },
      "swapExactTokensForTokensWithFeeAmount((uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for tokens and pay BNB amount as fee"
      },
      "swapTokensForExactETHAndFeeAmount((uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for BNB and pay amount of BNB as fee"
      },
      "swapTokensForExactTokensWithFeeAmount((uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for tokens and pay BNB amount as fee"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7258,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7261,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 541,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "feeJar",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IFeeJar)6885"
      },
      {
        "astId": 543,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "swapRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 545,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 547,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "percent",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 549,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "feePercent",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 553,
        "contract": "contracts/SafeSwapTradeRouter.sol:SafeSwapTradeRouter",
        "label": "whitelistFfsFee",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFeeJar)6885": {
        "encoding": "inplace",
        "label": "contract IFeeJar",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}