/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ITradeRouter {
  export type TradeStruct = {
    amountIn: BigNumberish;
    amountOut: BigNumberish;
    path: string[];
    to: string;
    deadline: BigNumberish;
  };

  export type TradeStructOutput = [
    BigNumber,
    BigNumber,
    string[],
    string,
    BigNumber
  ] & {
    amountIn: BigNumber;
    amountOut: BigNumber;
    path: string[];
    to: string;
    deadline: BigNumber;
  };
}

export interface TradeRouterInterface extends utils.Interface {
  contractName: "TradeRouter";
  functions: {
    "getSwapFees(uint256,address[])": FunctionFragment;
    "router()": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "swapExactETHForTokensWithFeeAmount((uint256,uint256,address[],address,uint256),uint256)": FunctionFragment;
    "swapRouter()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getSwapFees",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(functionFragment: "setRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokensWithFeeAmount",
    values: [ITradeRouter.TradeStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getSwapFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokensWithFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;

  events: {};
}

export interface TradeRouter extends BaseContract {
  contractName: "TradeRouter";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TradeRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getSwapFees(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _fees: BigNumber }>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setRouter(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactETHForTokensWithFeeAmount(
      trade: ITradeRouter.TradeStruct,
      _feeAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;
  };

  getSwapFees(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  setRouter(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactETHForTokensWithFeeAmount(
    trade: ITradeRouter.TradeStruct,
    _feeAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getSwapFees(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    setRouter(addr: string, overrides?: CallOverrides): Promise<void>;

    swapExactETHForTokensWithFeeAmount(
      trade: ITradeRouter.TradeStruct,
      _feeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapRouter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getSwapFees(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setRouter(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactETHForTokensWithFeeAmount(
      trade: ITradeRouter.TradeStruct,
      _feeAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getSwapFees(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRouter(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactETHForTokensWithFeeAmount(
      trade: ITradeRouter.TradeStruct,
      _feeAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
