{
  "address": "0x6115E6A1B965921a6C896b1Eb7cB0194328C1592",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_CODE_PAIR_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "approveLiquidityPartner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvePartnerStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "blacklistAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "blacklistTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isBlacklistedStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isBlacklistedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_impl",
          "type": "address"
        }
      ],
      "name": "setImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unApproveLiquidityPartner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unBlacklistAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "whitelistTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5e83fabd977141cf8093cbced9486932290afe2767af06f762e8c95a5e118546",
  "receipt": {
    "to": null,
    "from": "0x01FF333398A4C7dEf91962b5fa4a4300660CA883",
    "contractAddress": "0x6115E6A1B965921a6C896b1Eb7cB0194328C1592",
    "transactionIndex": 0,
    "gasUsed": "3794416",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000008000002000000000000000000000000000000000000000000000000000800000000000000000040100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000020000000000000000000000000000000000000200004000000000000000000000000000000000000000000000040000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xc2f17aa67a2914502afb50f4ca368876edd2df7f138798e76e1d1f42c4240c77",
    "transactionHash": "0x5e83fabd977141cf8093cbced9486932290afe2767af06f762e8c95a5e118546",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32517488,
        "transactionHash": "0x5e83fabd977141cf8093cbced9486932290afe2767af06f762e8c95a5e118546",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000001ff333398a4c7def91962b5fa4a4300660ca883",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000014a0082b3fd8000000000000000000000000000000000000000000000000000281e84b417b9753000000000000000000000000000000000000000000000de44eb34a8f822dbbd5000000000000000000000000000000000000000000000000026d4843163bbf53000000000000000000000000000000000000000000000de44ec7ea97ad6d93d5",
        "logIndex": 0,
        "blockHash": "0xc2f17aa67a2914502afb50f4ca368876edd2df7f138798e76e1d1f42c4240c77"
      }
    ],
    "blockNumber": 32517488,
    "cumulativeGasUsed": "3794416",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c26e46a5a6a177a1bd1c9e61977e0d1b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_PAIR_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"approveLiquidityPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvePartnerStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"blacklistTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklistedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklistedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unApproveLiquidityPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unBlacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"whitelistTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeswapFactory.sol\":\"SafeswapFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/SafeswapERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/ISafeswapERC20.sol\\\";\\ncontract SafeswapERC20 is ISafeswapERC20 {\\n\\n    string public constant name = \\\"Safeswap LPs\\\";\\n    string public constant symbol = \\\"SFS-LP\\\";\\n    uint8 public constant decimals = 18;\\n\\n    bytes32 private __avoid_collision_storage; // to avoid collisions storage\\n    \\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    function _SafeswapERC20_init_() internal {\\n        uint256 chainId = block.chainid;\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply + value;\\n        balanceOf[to] = balanceOf[to] + value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from] - value;\\n        totalSupply = totalSupply - value;\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from] - value;\\n        balanceOf[to] = balanceOf[to] + value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender] - value;\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"Safeswap: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"Safeswap: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x3432f314f529a4eddf09298269e55e4400f0680108e884d0f356468ebd0f0ea6\",\"license\":\"MIT\"},\"contracts/SafeswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ISafeswapFactory.sol\\\";\\nimport \\\"./SafeswapPair.sol\\\";\\nimport \\\"./libraries/proxy/OptimizedTransparentUpgradeableProxy.sol\\\";\\nimport \\\"./libraries/Initializable.sol\\\";\\n\\ncontract SafeswapFactory is ISafeswapFactory, Initializable {\\n    bytes32 public constant INIT_CODE_PAIR_HASH =\\n        keccak256(abi.encodePacked(type(OptimizedTransparentUpgradeableProxy).creationCode));\\n\\n    address public feeTo;\\n    address public feeToSetter;\\n    address public router;\\n    address public admin;\\n\\n    mapping(address => bool) public isBlacklistedStatus;\\n    mapping(address => bool) public approvePartnerStatus;\\n    mapping(address => bool) public isBlacklistedToken;\\n\\n    mapping(address => mapping(address => address)) public getPair;\\n    address[] public allPairs;\\n\\n    address public implementation;\\n\\n    modifier onlyOwner() {\\n        require(admin == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function initialize(address _feeToSetter, address _feeTo) external initializer {\\n        feeToSetter = _feeToSetter;\\n        feeTo = _feeTo;\\n        admin = msg.sender;\\n    }\\n\\n    function setImplementation(address _impl) external onlyOwner {\\n        require(_impl != address(0), \\\"Not allow zero address\\\");\\n        implementation = _impl;\\n    }\\n\\n    function deployImplementation() external onlyOwner {\\n        implementation = address(new SafeswapPair());\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        address to\\n    ) external returns (address pair) {\\n        require(implementation != address(0), \\\"Please set implementation\\\");\\n        require((isBlacklistedToken[tokenA] == false), \\\"Cannot create with tokenA\\\");\\n        require((isBlacklistedToken[tokenB] == false), \\\"Cannot create with tokenB\\\");\\n        require((approvePartnerStatus[to] == true), \\\"Not approved the partner\\\");\\n        require((approvePartnerStatus[msg.sender] == true), \\\"Not approved the partner\\\");\\n\\n        require(tokenA != tokenB, \\\"Safeswap: IDENTICAL_ADDRESSES\\\");\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Safeswap: ZERO_ADDRESS\\\");\\n        require(getPair[token0][token1] == address(0), \\\"Safeswap: PAIR_EXISTS\\\"); // single check is sufficient\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        OptimizedTransparentUpgradeableProxy pairProxy = new OptimizedTransparentUpgradeableProxy{ salt: salt }();\\n        pairProxy._OptimizedTransparentUpgradeableProxy_init_(\\n            address(this),\\n            address(0x000000000000000000000000000000000000dEaD),\\n            hex\\\"\\\"\\n        );\\n        pair = address(pairProxy);\\n        ISafeswapPair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setRouter(address _router) public {\\n        require(msg.sender == admin, \\\"NOT AUTHORIZED\\\");\\n        router = _router;\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, \\\"Safeswap: FORBIDDEN\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, \\\"Safeswap: FORBIDDEN\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function blacklistAddress(address account) external onlyOwner {\\n        require((isBlacklistedStatus[account] == false), \\\"Already Blacklisted\\\");\\n        isBlacklistedStatus[account] = true;\\n    }\\n\\n    function unBlacklistAddress(address account) external onlyOwner {\\n        require((isBlacklistedStatus[account] == true), \\\"Already Not Blacklisted\\\");\\n        isBlacklistedStatus[account] = false;\\n    }\\n\\n    function blacklistTokenAddress(address token) external onlyOwner {\\n        require((isBlacklistedToken[token] == false), \\\"Already Blacklisted\\\");\\n        isBlacklistedToken[token] = true;\\n    }\\n\\n    function whitelistTokenAddress(address token) external onlyOwner {\\n        require((isBlacklistedToken[token] == true), \\\"Already Whitelisted\\\");\\n        isBlacklistedToken[token] = false;\\n    }\\n\\n    function approveLiquidityPartner(address account) external onlyOwner {\\n        require((approvePartnerStatus[account] == false), \\\"Already approved\\\");\\n        approvePartnerStatus[account] = true;\\n    }\\n\\n    function unApproveLiquidityPartner(address account) external onlyOwner {\\n        require((approvePartnerStatus[account] == true), \\\"Not approved yet\\\");\\n        approvePartnerStatus[account] = false;\\n    }\\n}\\n\",\"keccak256\":\"0xff5f5945b4879705a21a353d672d4cc9061a17f3d12c4528c80db5345bcfd45c\",\"license\":\"MIT\"},\"contracts/SafeswapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ISafeswapPair.sol\\\";\\nimport \\\"./SafeswapERC20.sol\\\";\\nimport \\\"./libraries/Initializable.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/ISafeswapFactory.sol\\\";\\nimport \\\"./interfaces/ISafeswapCallee.sol\\\";\\n\\ninterface ISafeswapRouter {\\n    function getTokenDeduction(address token, uint256 amount) external view returns (uint256, address);\\n}\\n\\ncontract SafeswapPair is ISafeswapPair, SafeswapERC20, Initializable {\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n    // address public router;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint256 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"Safeswap: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == ISafeswapFactory(factory).router(), \\\"Safeswap: ONLY_ROUTER\\\");\\n        _;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Safeswap: TRANSFER_FAILED\\\");\\n    }\\n\\n    function _transferSTPtaxFees(address token, uint256 amount) internal {\\n        address router = ISafeswapFactory(factory).router();\\n        (uint256 deduction, address to) = ISafeswapRouter(router).getTokenDeduction(token, amount);\\n        if (deduction > 0 && to != address(0)) {\\n            _safeTransfer(token, to, deduction);\\n        }\\n    }\\n\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external initializer {\\n        factory = msg.sender;\\n        token0 = _token0;\\n        token1 = _token1;\\n        _SafeswapERC20_init_();\\n        unlocked = 1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        require(balance0 <= type(uint112).max && balance1 <= type(uint112).max, \\\"Safeswap: OVERFLOW\\\");\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    function _takeFee(\\n        address token,\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) private returns (uint256 _fee) {\\n        require(token == token0 || token == token1, \\\"Safeswap: INVALID_TOKEN\\\");\\n        address feeTo = ISafeswapFactory(factory).feeTo();\\n        uint256 _totalSupply = totalSupply;\\n\\n        bool feeOn = feeTo != address(0);\\n        uint256 amountOutWithoutFee = (amountOut * 10000) / 9975;\\n        //uint FeeSTP = amountOutWithoutFee.mul(100) / 10000;\\n        uint256 burnFee = (amountOutWithoutFee * 3) / 10000;\\n        uint256 supportFee = (amountOutWithoutFee * 5) / 10000;\\n\\n        uint256 numerator = reserveIn * burnFee;\\n        uint256 denominator = reserveOut - burnFee;\\n        uint256 amountIn = numerator / denominator;\\n\\n        uint256 liquidity = Math.min((amountIn * _totalSupply) / reserveIn, (burnFee * _totalSupply) / reserveOut);\\n        _mint(0x000000000000000000000000000000000000dEaD, liquidity);\\n        _fee = burnFee;\\n\\n        if (feeOn) {\\n            numerator = reserveIn * supportFee;\\n            denominator = reserveOut - supportFee;\\n            amountIn = numerator / denominator;\\n\\n            liquidity = Math.min((amountIn * _totalSupply) / reserveIn, (supportFee * _totalSupply) / reserveOut);\\n            _mint(feeTo, liquidity);\\n            _fee = _fee + supportFee;\\n            //_safeTransfer(token0, 0x6B6003F0F3E7C9F096813b5c4F0F6DA9FD8D24Ba, FeeSTP);\\n        }\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = ISafeswapFactory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint256 _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint256 rootK = Math.sqrt(uint256(_reserve0) * _reserve1);\\n                uint256 rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = totalSupply * (rootK - rootKLast);\\n                    uint256 denominator = rootK * 3 + rootKLast;\\n                    uint256 liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        require(ISafeswapFactory(factory).isBlacklistedStatus(to) == false, \\\"Address is blacklisted\\\");\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0 - _reserve0;\\n        uint256 amount1 = balance1 - _reserve1;\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min((amount0 * _totalSupply) / _reserve0, (amount1 * _totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, \\\"Safeswap: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0) * reserve1; // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n        require(ISafeswapFactory(factory).isBlacklistedStatus(to) == false, \\\"Address is blacklisted\\\");\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = (liquidity * balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = (liquidity * balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, \\\"Safeswap: INSUFFICIENT_LIQUIDITY_BURNED\\\");\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0) * reserve1; // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external lock onlyRouter {\\n        require(ISafeswapFactory(factory).isBlacklistedStatus(to) == false, \\\"Address is blacklisted\\\");\\n        require(amount0Out > 0 || amount1Out > 0, \\\"Safeswap: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"Safeswap: INSUFFICIENT_LIQUIDITY\\\");\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"Safeswap: INVALID_TO\\\");\\n            if (amount0Out > 0) {\\n                // _takeFee(_token0, amount0Out, _reserve1, reserve0);\\n                _safeTransfer(_token0, to, amount0Out);\\n            } // optimistically transfer tokens\\n            if (amount1Out > 0) {\\n                // _takeFee(_token1, amount1Out, _reserve0, _reserve1);\\n                _safeTransfer(_token1, to, amount1Out);\\n            } // optimistically transfer tokens\\n            if (data.length > 0) ISafeswapCallee(to).safeswapCall(msg.sender, amount0Out, amount1Out, data);\\n            if (amount0Out > 0) {\\n                _transferSTPtaxFees(token0, amount0Out);\\n            }\\n            if (amount1Out > 0) {\\n                _transferSTPtaxFees(token1, amount1Out);\\n            }\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, \\\"Safeswap: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0 * 1000 - amount0In * 2;\\n            uint256 balance1Adjusted = balance1 * 1000 - amount1In * 2;\\n            require(balance0Adjusted * balance1Adjusted >= uint256(_reserve0) * _reserve1 * (1000**2), \\\"Safeswap: K\\\");\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)) - reserve0);\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)) - reserve1);\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n}\\n\",\"keccak256\":\"0xe91348a3b6e24d511dcd2dca8792fc8436a0ff2a4a47b29c69dc2a2bc98aef0a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity 0.8.11;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x1a732763215dbf5ec303ca4fff7897bbd6d3ae0034cb0b5b1c64f78b37f17737\"},\"contracts/interfaces/ISafeswapCallee.sol\":{\"content\":\"pragma solidity 0.8.11;\\n\\ninterface ISafeswapCallee {\\n    function safeswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xf8fdc310847d3708c4e44dae45365301f02fc3c796cbfdce920395eb6a3ee612\"},\"contracts/interfaces/ISafeswapERC20.sol\":{\"content\":\"pragma solidity 0.8.11;\\n\\ninterface ISafeswapERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0xd4d2bac676052a72743d880d1a7756380a54aa4d7fe93db8db82ee279cd2a643\"},\"contracts/interfaces/ISafeswapFactory.sol\":{\"content\":\"pragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface ISafeswapFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256 length);\\n\\n    function feeTo() external view returns (address);\\n\\n    function router() external view returns (address);\\n    \\n    function implementation() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function isBlacklistedStatus(address account) external view returns (bool);\\n\\n    function approvePartnerStatus(address account) external view returns (bool);\\n\\n    function isBlacklistedToken(address account) external view returns (bool);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        address to\\n    ) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n//    function getFeeConfig() external view returns (FeeConfig memory);\\n//\\n//    function getTotalFee() external view returns (uint256, uint256);\\n//\\n//    struct FeeConfig {\\n//        address feeTo;\\n//        address buyBackWallet;\\n//        uint256 companyFeePercent;\\n//        uint256 buyBackFeePercent;\\n//        uint256 lpFeePercent;\\n//        uint256 precision;\\n//    }\\n}\\n\",\"keccak256\":\"0x53c75cb599b2bcefbc82f76a304daeafc79118dde63a9a0fa7b43695bdffb89f\"},\"contracts/interfaces/ISafeswapPair.sol\":{\"content\":\"pragma solidity 0.8.11;\\n\\ninterface ISafeswapPair {\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x2be887e4677d9f6a8cdae2b1bb5fdfaf3ced8ed9a9c685f5fc694c9134c2847b\"},\"contracts/libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.11;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\ncontract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x8ca5bf9f92b2b7e08716244dc8db6ab814160066b5ec2e2c25162b9b3bee3ffd\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"pragma solidity 0.8.11;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9f002695f1f291b54900385756d21392a0dfd5c1772ec98a7e225f55dabfbd2e\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"pragma solidity 0.8.11;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x8a1bade423ef615c9c24315b06b6301e288eb27b0a7ee20ae1f4bd1634adcb50\"},\"contracts/libraries/proxy/OptimizedTransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./UpgradeableProxy.sol\\\";\\nimport \\\"../../libraries/Initializable.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative inerface of your proxy.\\n */\\ncontract OptimizedTransparentUpgradeableProxy is UpgradeableProxy, Initializable {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\\n     */\\n    function _OptimizedTransparentUpgradeableProxy_init_(\\n        address factory,\\n        address initialAdmin,\\n        bytes memory _data\\n    ) external initializer {\\n        _UpgradeableProxy_init_(factory, _data);\\n\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        bytes32 slot = _ADMIN_SLOT;\\n\\n        // still store it to work with EIP-1967\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, initialAdmin)\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address) {\\n        return _admin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address) {\\n        return _implementation();\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newFactory) external ifAdmin {\\n        _upgradeTo(newFactory);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newFactory, bytes calldata data) external payable ifAdmin {\\n        _upgradeTo(newFactory);\\n        address newImplementation = _implementation();\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = newImplementation.delegatecall(data);\\n        require(success);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view returns (address adm) {\\n        bytes32 slot = _ADMIN_SLOT;\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _admin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xbf8fcfdef8366bdc970816566be993e951018ed01e653ee149cd0b1c8e7bdac7\",\"license\":\"MIT\"},\"contracts/libraries/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x86b06fe629ac48f39870e9acfd2d43d77f17e162881a8165d44d67cfc421cdba\",\"license\":\"MIT\"},\"contracts/libraries/proxy/UpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../../interfaces/ISafeswapFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * factory address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * factory behind the proxy.\\n *\\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract UpgradeableProxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial factory specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    function _UpgradeableProxy_init_(address _factory, bytes memory _data) internal {\\n        assert(_FACTORY_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.factoryfactory\\\")) - 1));\\n        _setFactory(_factory);\\n        if (_data.length > 0) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            address impl = ISafeswapFactory(_factory).implementation();\\n            (bool success, ) = impl.delegatecall(_data);\\n            require(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the factory is upgraded.\\n     */\\n    event Upgraded(address indexed factory);\\n\\n    /**\\n     * @dev Storage slot with the address of the current factory.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.factoryfactory\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _FACTORY_SLOT = 0xb2101b231486a8a17a16c101f8dde1145d21799358462f57035a227f25614da3;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view override returns (address impl) {\\n        address factory;\\n        bytes32 slot = _FACTORY_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            factory := sload(slot)\\n        }\\n\\n        // call to Factory and get Impl\\n        impl = ISafeswapFactory(factory).implementation();\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newFactory) internal {\\n        _setFactory(newFactory);\\n        emit Upgraded(newFactory);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setFactory(address newFactory) private {\\n        require(Address.isContract(newFactory), \\\"UpgradeableProxy: new factory is not a contract\\\");\\n\\n        bytes32 slot = _FACTORY_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newFactory)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb49a4290c0450b47d1aa451e629eb89076c1a8be6771e6298af2b254beb6f49\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506143b0806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80639cadffe0116100de578063e6a4390511610097578063f494b37911610071578063f494b37914610366578063f835ad9c14610379578063f851a4401461039c578063f887ea40146103af57600080fd5b8063e6a439051461030c578063f3290d7514610340578063f46901ed1461035357600080fd5b80639cadffe01461028a578063a2e74af6146102ad578063c0d78655146102c0578063c471cffb146102d3578063d40cf659146102e6578063d784d426146102f957600080fd5b80634534729711610130578063453472971461022f578063485cc95514610237578063574f2ba31461024a5780635855a25a1461025c5780635c60da1b1461026457806376f797381461027757600080fd5b8063017e7e58146101785780630322c1a5146101ae578063094b7415146101c35780630d9f9f91146101d65780631260dedb146102095780631e3dd18b1461021c575b600080fd5b600054610191906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101c16101bc366004611159565b6103c2565b005b600154610191906001600160a01b031681565b6101f96101e4366004611159565b60056020526000908152604090205460ff1681565b60405190151581526020016101a5565b6101c1610217366004611159565b610478565b61019161022a36600461117b565b610523565b6101c161054d565b6101c1610245366004611194565b6105c2565b6008545b6040519081526020016101a5565b61024e6106cc565b600954610191906001600160a01b031681565b6101916102853660046111c7565b610716565b6101f9610298366004611159565b60066020526000908152604090205460ff1681565b6101c16102bb366004611159565b610c72565b6101c16102ce366004611159565b610ce4565b6101c16102e1366004611159565b610d51565b6101c16102f4366004611159565b610dfb565b6101c1610307366004611159565b610eb3565b61019161031a366004611194565b60076020908152600092835260408084209091529082529020546001600160a01b031681565b6101c161034e366004611159565b610f4e565b6101c1610361366004611159565b610ffb565b6101c1610374366004611159565b611075565b6101f9610387366004611159565b60046020526000908152604090205460ff1681565b600354610191906001600160a01b031681565b600254610191906001600160a01b031681565b6003546001600160a01b031633146103f55760405162461bcd60e51b81526004016103ec9061120a565b60405180910390fd5b6001600160a01b03811660009081526006602052604090205460ff16156104545760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e48109b1858dadb1a5cdd1959606a1b60448201526064016103ec565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b6003546001600160a01b031633146104a25760405162461bcd60e51b81526004016103ec9061120a565b6001600160a01b03811660009081526005602052604090205460ff1615156001146105025760405162461bcd60e51b815260206004820152601060248201526f139bdd08185c1c1c9bdd9959081e595d60821b60448201526064016103ec565b6001600160a01b03166000908152600560205260409020805460ff19169055565b6008818154811061053357600080fd5b6000918252602090912001546001600160a01b0316905081565b6003546001600160a01b031633146105775760405162461bcd60e51b81526004016103ec9061120a565b60405161058390611123565b604051809103906000f08015801561059f573d6000803e3d6000fd5b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16806105d75750303b155b806105e5575060005460ff16155b6106485760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103ec565b600054610100900460ff1615801561066a576000805461ffff19166101011790555b600180546001600160a01b038086166001600160a01b03199283161790925560008054928516620100000262010000600160b01b031990931692909217909155600380549091163317905580156106c7576000805461ff00191690555b505050565b6040516106db60208201611130565b601f1982820381018352601f9091011660408190526106fd919060200161123f565b6040516020818303038152906040528051906020012081565b6009546000906001600160a01b03166107715760405162461bcd60e51b815260206004820152601960248201527f506c656173652073657420696d706c656d656e746174696f6e0000000000000060448201526064016103ec565b6001600160a01b03841660009081526006602052604090205460ff16156107da5760405162461bcd60e51b815260206004820152601960248201527f43616e6e6f7420637265617465207769746820746f6b656e410000000000000060448201526064016103ec565b6001600160a01b03831660009081526006602052604090205460ff16156108435760405162461bcd60e51b815260206004820152601960248201527f43616e6e6f7420637265617465207769746820746f6b656e420000000000000060448201526064016103ec565b6001600160a01b03821660009081526005602052604090205460ff1615156001146108ab5760405162461bcd60e51b81526020600482015260186024820152772737ba1030b8383937bb32b2103a3432903830b93a3732b960411b60448201526064016103ec565b3360009081526005602052604090205460ff16151560011461090a5760405162461bcd60e51b81526020600482015260186024820152772737ba1030b8383937bb32b2103a3432903830b93a3732b960411b60448201526064016103ec565b826001600160a01b0316846001600160a01b0316141561096c5760405162461bcd60e51b815260206004820152601d60248201527f53616665737761703a204944454e544943414c5f41444452455353455300000060448201526064016103ec565b600080846001600160a01b0316866001600160a01b03161061098f578486610992565b85855b90925090506001600160a01b0382166109e65760405162461bcd60e51b815260206004820152601660248201527553616665737761703a205a45524f5f4144445245535360501b60448201526064016103ec565b6001600160a01b03828116600090815260076020908152604080832085851684529091529020541615610a535760405162461bcd60e51b815260206004820152601560248201527453616665737761703a20504149525f45584953545360581b60448201526064016103ec565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b166034820152600090604801604051602081830303815290604052805190602001209050600081604051610aa690611130565b8190604051809103906000f5905080158015610ac6573d6000803e3d6000fd5b5060405163d696985760e01b815230600482015261dead602482015260606044820152600060648201529091506001600160a01b0382169063d696985790608401600060405180830381600087803b158015610b2157600080fd5b505af1158015610b35573d6000803e3d6000fd5b505060405163485cc95560e01b81526001600160a01b038781166004830152868116602483015293975087938416925063485cc9559150604401600060405180830381600087803b158015610b8957600080fd5b505af1158015610b9d573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526007602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560088054600181018255958190527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee39095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a3505050509392505050565b6001546001600160a01b03163314610cc25760405162461bcd60e51b815260206004820152601360248201527229b0b332b9bbb0b81d102327a92124a22222a760691b60448201526064016103ec565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b03163314610d2f5760405162461bcd60e51b815260206004820152600e60248201526d1393d5081055551213d49256915160921b60448201526064016103ec565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b03163314610d7b5760405162461bcd60e51b81526004016103ec9061120a565b6001600160a01b03811660009081526005602052604090205460ff1615610dd75760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48185c1c1c9bdd995960821b60448201526064016103ec565b6001600160a01b03166000908152600560205260409020805460ff19166001179055565b6003546001600160a01b03163314610e255760405162461bcd60e51b81526004016103ec9061120a565b6001600160a01b03811660009081526004602052604090205460ff161515600114610e925760405162461bcd60e51b815260206004820152601760248201527f416c7265616479204e6f7420426c61636b6c697374656400000000000000000060448201526064016103ec565b6001600160a01b03166000908152600460205260409020805460ff19169055565b6003546001600160a01b03163314610edd5760405162461bcd60e51b81526004016103ec9061120a565b6001600160a01b038116610f2c5760405162461bcd60e51b81526020600482015260166024820152754e6f7420616c6c6f77207a65726f206164647265737360501b60448201526064016103ec565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b03163314610f785760405162461bcd60e51b81526004016103ec9061120a565b6001600160a01b03811660009081526004602052604090205460ff1615610fd75760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e48109b1858dadb1a5cdd1959606a1b60448201526064016103ec565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b6001546001600160a01b0316331461104b5760405162461bcd60e51b815260206004820152601360248201527229b0b332b9bbb0b81d102327a92124a22222a760691b60448201526064016103ec565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6003546001600160a01b0316331461109f5760405162461bcd60e51b81526004016103ec9061120a565b6001600160a01b03811660009081526006602052604090205460ff1615156001146111025760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e4815da1a5d195b1a5cdd1959606a1b60448201526064016103ec565b6001600160a01b03166000908152600660205260409020805460ff19169055565b61270a8061127b83390190565b6109f68061398583390190565b80356001600160a01b038116811461115457600080fd5b919050565b60006020828403121561116b57600080fd5b6111748261113d565b9392505050565b60006020828403121561118d57600080fd5b5035919050565b600080604083850312156111a757600080fd5b6111b08361113d565b91506111be6020840161113d565b90509250929050565b6000806000606084860312156111dc57600080fd5b6111e58461113d565b92506111f36020850161113d565b91506112016040850161113d565b90509250925092565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000825160005b818110156112605760208186018101518583015201611246565b8181111561126f576000828501525b50919091019291505056fe60806040526001600d5534801561001557600080fd5b506126e5806100256000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610410578063d505accf14610423578063dd62ed3e14610436578063fff6cae91461046157600080fd5b8063ba9a7a56146103db578063bc25cf77146103e4578063c45a0155146103f757600080fd5b80637ecebe00116100d35780637ecebe001461035b57806389afcb441461037b57806395d89b41146103a3578063a9059cbb146103c857600080fd5b80636a6278421461031f57806370a08231146103325780637464fc3d1461035257600080fd5b806323b872dd116101665780633644e515116101405780633644e515146102f1578063485cc955146102fa5780635909c0d51461030d5780635a3d54931461031657600080fd5b806323b872dd1461029d57806330adf81f146102b0578063313ce567146102d757600080fd5b8063022c0d9f146101ae57806306fdde03146101c35780630902f1ac14610204578063095ea7b3146102385780630dfe16811461025b57806318160ddd14610286575b600080fd5b6101c16101bc366004612206565b610469565b005b6101ee6040518060400160405280600c81526020016b5361666573776170204c507360a01b81525081565b6040516101fb91906122cc565b60405180910390f35b61020c610b12565b604080516001600160701b03948516815293909216602084015263ffffffff16908201526060016101fb565b61024b6102463660046122ff565b610b3c565b60405190151581526020016101fb565b60075461026e906001600160a01b031681565b6040516001600160a01b0390911681526020016101fb565b61028f60015481565b6040519081526020016101fb565b61024b6102ab36600461232b565b610b52565b61028f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6102df601281565b60405160ff90911681526020016101fb565b61028f60045481565b6101c161030836600461236c565b610be7565b61028f600a5481565b61028f600b5481565b61028f61032d3660046123a5565b610dce565b61028f6103403660046123a5565b60026020526000908152604090205481565b61028f600c5481565b61028f6103693660046123a5565b60056020526000908152604090205481565b61038e6103893660046123a5565b61112a565b604080519283526020830191909152016101fb565b6101ee6040518060400160405280600681526020016505346532d4c560d41b81525081565b61024b6103d63660046122ff565b611520565b61028f6103e881565b6101c16103f23660046123a5565b61152d565b60065461026e906201000090046001600160a01b031681565b60085461026e906001600160a01b031681565b6101c16104313660046123c2565b611640565b61028f61044436600461236c565b600360209081526000928352604080842090915290825290205481565b6101c1611853565b600d546001146104945760405162461bcd60e51b815260040161048b90612439565b60405180910390fd5b6000600d81905550600660029054906101000a90046001600160a01b03166001600160a01b031663f887ea406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105139190612463565b6001600160a01b0316336001600160a01b03161461056b5760405162461bcd60e51b815260206004820152601560248201527429b0b332b9bbb0b81d1027a7262cafa927aaaa22a960591b604482015260640161048b565b600654604051633e0d6b6760e21b81526001600160a01b038581166004830152620100009092049091169063f835ad9c90602401602060405180830381865afa1580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e09190612480565b156105fd5760405162461bcd60e51b815260040161048b906124a2565b600085118061060c5750600084115b6106645760405162461bcd60e51b8152602060048201526024808201527f53616665737761703a20494e53554646494349454e545f4f55545055545f414d60448201526313d5539560e21b606482015260840161048b565b60008061066f610b12565b5091509150816001600160701b0316871080156106945750806001600160701b031686105b6106e05760405162461bcd60e51b815260206004820181905260248201527f53616665737761703a20494e53554646494349454e545f4c4951554944495459604482015260640161048b565b60075460085460009182916001600160a01b0391821691908116908916821480159061071e5750806001600160a01b0316896001600160a01b031614155b6107615760405162461bcd60e51b815260206004820152601460248201527353616665737761703a20494e56414c49445f544f60601b604482015260640161048b565b8a1561077257610772828a8d611977565b891561078357610783818a8c611977565b86156107f057604051630f3271ad60e21b81526001600160a01b038a1690633cc9c6b4906107bd9033908f908f908e908e906004016124d2565b600060405180830381600087803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b505050505b8a1561080c5760075461080c906001600160a01b03168c611ac2565b891561082857600854610828906001600160a01b03168b611ac2565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610890919061251e565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa1580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb919061251e565b92505050600089856001600160701b0316610916919061254d565b8311610923576000610940565b6109368a6001600160701b03871661254d565b610940908461254d565b905060006109578a6001600160701b03871661254d565b8311610964576000610981565b6109778a6001600160701b03871661254d565b610981908461254d565b905060008211806109925750600081115b6109ea5760405162461bcd60e51b815260206004820152602360248201527f53616665737761703a20494e53554646494349454e545f494e5055545f414d4f60448201526215539560ea1b606482015260840161048b565b60006109f7836002612564565b610a03866103e8612564565b610a0d919061254d565b90506000610a1c836002612564565b610a28866103e8612564565b610a32919061254d565b9050610a4a6001600160701b03808916908a16612564565b610a5790620f4240612564565b610a618284612564565b1015610a9d5760405162461bcd60e51b815260206004820152600b60248201526a53616665737761703a204b60a81b604482015260640161048b565b5050610aab84848888611be0565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600d55505050505050505050565b6009546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610b49338484611dcb565b50600192915050565b6001600160a01b038316600090815260036020908152604080832033845290915281205460001914610bd2576001600160a01b0384166000908152600360209081526040808320338452909152902054610bad90839061254d565b6001600160a01b03851660009081526003602090815260408083203384529091529020555b610bdd848484611e2d565b5060019392505050565b600654610100900460ff1680610bfc5750303b155b80610c0a575060065460ff16155b610c6d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161048b565b600654610100900460ff16158015610c8f576006805461ffff19166101011790555b6006805462010000330262010000600160b01b0319909116179055600780546001600160a01b038581166001600160a01b0319928316179092556008805492851692909116919091179055610db2604080518082018252600c81526b5361666573776170204c507360a01b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f1f70e3dc283e307f749488509b418d5a1522e0c2ae4f67d16de0357912dd8837818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600455565b6001600d558015610dc9576006805461ff00191690555b505050565b6000600d54600114610df25760405162461bcd60e51b815260040161048b90612439565b6000600d55600654604051633e0d6b6760e21b81526001600160a01b038481166004830152620100009092049091169063f835ad9c90602401602060405180830381865afa158015610e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6c9190612480565b15610e895760405162461bcd60e51b815260040161048b906124a2565b600080610e94610b12565b506007546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0a919061251e565b6008546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610f58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7c919061251e565b90506000610f936001600160701b0386168461254d565b90506000610faa6001600160701b0386168461254d565b90506000610fb88787611ed5565b60015490915080610ff6576103e8610fd8610fd38587612564565b612014565b610fe2919061254d565b9850610ff160006103e8612084565b61103d565b61103a6001600160701b03891661100d8387612564565b6110179190612599565b6001600160701b03891661102b8487612564565b6110359190612599565b612116565b98505b6000891161109d5760405162461bcd60e51b815260206004820152602760248201527f53616665737761703a20494e53554646494349454e545f4c495155494449545960448201526617d3525395115160ca1b606482015260840161048b565b6110a78a8a612084565b6110b386868a8a611be0565b81156110dc576009546110d8906001600160701b03600160701b820481169116612564565b600c555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600d5550949695505050505050565b600080600d5460011461114f5760405162461bcd60e51b815260040161048b90612439565b6000600d55600654604051633e0d6b6760e21b81526001600160a01b038581166004830152620100009092049091169063f835ad9c90602401602060405180830381865afa1580156111a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c99190612480565b156111e65760405162461bcd60e51b815260040161048b906124a2565b6000806111f1610b12565b506007546008546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a0823190602401602060405180830381865afa15801561124b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126f919061251e565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156112b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dd919061251e565b306000908152600260205260408120549192506112fa8888611ed5565b6001549091508061130b8685612564565b6113159190612599565b9a50806113228585612564565b61132c9190612599565b995060008b11801561133e575060008a115b61139a5760405162461bcd60e51b815260206004820152602760248201527f53616665737761703a20494e53554646494349454e545f4c495155494449545960448201526617d0955493915160ca1b606482015260840161048b565b6113a4308461212e565b6113af878d8d611977565b6113ba868d8c611977565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa1580156113fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611422919061251e565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a0823190602401602060405180830381865afa158015611469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148d919061251e565b935061149b85858b8b611be0565b81156114c4576009546114c0906001600160701b03600160701b820481169116612564565b600c555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600d81905550915091565b6000610b49338484611e2d565b600d5460011461154f5760405162461bcd60e51b815260040161048b90612439565b6000600d556007546008546009546040516370a0823160e01b81523060048201526001600160a01b0393841693909216916115ee91849186916001600160701b03169083906370a08231906024015b602060405180830381865afa1580156115bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115df919061251e565b6115e9919061254d565b611977565b6009546040516370a0823160e01b81523060048201526116369183918691600160701b90046001600160701b0316906001600160a01b038416906370a082319060240161159e565b50506001600d5550565b428410156116845760405162461bcd60e51b815260206004820152601160248201527014d859995cddd85c0e8811561412549151607a1b604482015260640161048b565b6004546001600160a01b038816600090815260056020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876116d7836125ad565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161175092919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156117bb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906117f15750886001600160a01b0316816001600160a01b0316145b61183d5760405162461bcd60e51b815260206004820152601b60248201527f53616665737761703a20494e56414c49445f5349474e41545552450000000000604482015260640161048b565b611848898989611dcb565b505050505050505050565b600d546001146118755760405162461bcd60e51b815260040161048b90612439565b6000600d556007546040516370a0823160e01b8152306004820152611970916001600160a01b0316906370a0823190602401602060405180830381865afa1580156118c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e8919061251e565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611930573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611954919061251e565b6009546001600160701b0380821691600160701b900416611be0565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b17905291516000928392871691611a0391906125c8565b6000604051808303816000865af19150503d8060008114611a40576040519150601f19603f3d011682016040523d82523d6000602084013e611a45565b606091505b5091509150818015611a6f575080511580611a6f575080806020019051810190611a6f9190612480565b611abb5760405162461bcd60e51b815260206004820152601960248201527f53616665737761703a205452414e534645525f4641494c454400000000000000604482015260640161048b565b5050505050565b6000600660029054906101000a90046001600160a01b03166001600160a01b031663f887ea406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3b9190612463565b604051634e9247ab60e11b81526001600160a01b03858116600483015260248201859052919250600091829190841690639d248f56906044016040805180830381865afa158015611b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb491906125e4565b91509150600082118015611bd057506001600160a01b03811615155b15611abb57611abb858284611977565b6001600160701b038411801590611bfe57506001600160701b038311155b611c3f5760405162461bcd60e51b815260206004820152601260248201527153616665737761703a204f564552464c4f5760701b604482015260640161048b565b6000611c5064010000000042612609565b600954909150600090611c7090600160e01b900463ffffffff168361261d565b905060008163ffffffff16118015611c9057506001600160701b03841615155b8015611ca457506001600160701b03831615155b15611d33578063ffffffff16611ccc85611cbd866121ba565b6001600160e01b0316906121d9565b6001600160e01b0316611cdf9190612564565b600a6000828254611cf09190612642565b909155505063ffffffff8116611d0984611cbd876121ba565b6001600160e01b0316611d1c9190612564565b600b6000828254611d2d9190612642565b90915550505b6009805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081026001600160e01b03199095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260026020526040902054611e5190829061254d565b6001600160a01b038085166000908152600260205260408082209390935590841681522054611e81908290612642565b6001600160a01b0380841660008181526002602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611e209085815260200190565b600080600660029054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f9190612463565b600c546001600160a01b038216158015945091925090612000578015611ffb576000611f8a610fd36001600160701b03808816908916612564565b90506000611f9783612014565b905080821115611ff8576000611fad828461254d565b600154611fba9190612564565b9050600082611fca856003612564565b611fd49190612642565b90506000611fe28284612599565b90508015611ff457611ff48782612084565b5050505b50505b61200c565b801561200c576000600c555b505092915050565b60006003821115612075575080600061202e600283612599565b612039906001612642565b90505b8181101561206f579050806002816120548186612599565b61205e9190612642565b6120689190612599565b905061203c565b50919050565b811561207f575060015b919050565b806001546120929190612642565b6001556001600160a01b0382166000908152600260205260409020546120b9908290612642565b6001600160a01b0383166000818152600260205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061210a9085815260200190565b60405180910390a35050565b60008183106121255781612127565b825b9392505050565b6001600160a01b03821660009081526002602052604090205461215290829061254d565b6001600160a01b03831660009081526002602052604090205560015461217990829061254d565b6001556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161210a565b60006121d3600160701b6001600160701b03841661265a565b92915050565b60006121276001600160701b03831684612689565b6001600160a01b038116811461220357600080fd5b50565b60008060008060006080868803121561221e57600080fd5b85359450602086013593506040860135612237816121ee565b9250606086013567ffffffffffffffff8082111561225457600080fd5b818801915088601f83011261226857600080fd5b81358181111561227757600080fd5b89602082850101111561228957600080fd5b9699959850939650602001949392505050565b60005b838110156122b757818101518382015260200161229f565b838111156122c6576000848401525b50505050565b60208152600082518060208401526122eb81604085016020870161229c565b601f01601f19169190910160400192915050565b6000806040838503121561231257600080fd5b823561231d816121ee565b946020939093013593505050565b60008060006060848603121561234057600080fd5b833561234b816121ee565b9250602084013561235b816121ee565b929592945050506040919091013590565b6000806040838503121561237f57600080fd5b823561238a816121ee565b9150602083013561239a816121ee565b809150509250929050565b6000602082840312156123b757600080fd5b8135612127816121ee565b600080600080600080600060e0888a0312156123dd57600080fd5b87356123e8816121ee565b965060208801356123f8816121ee565b95506040880135945060608801359350608088013560ff8116811461241c57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60208082526010908201526f14d859995cddd85c0e881313d0d2d15160821b604082015260600190565b60006020828403121561247557600080fd5b8151612127816121ee565b60006020828403121561249257600080fd5b8151801515811461212757600080fd5b6020808252601690820152751059191c995cdcc81a5cc8189b1858dadb1a5cdd195960521b604082015260600190565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60006020828403121561253057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561255f5761255f612537565b500390565b600081600019048311821515161561257e5761257e612537565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826125a8576125a8612583565b500490565b60006000198214156125c1576125c1612537565b5060010190565b600082516125da81846020870161229c565b9190910192915050565b600080604083850312156125f757600080fd5b82519150602083015161239a816121ee565b60008261261857612618612583565b500690565b600063ffffffff8381169083168181101561263a5761263a612537565b039392505050565b6000821982111561265557612655612537565b500190565b60006001600160e01b038281168482168115158284048211161561268057612680612537565b02949350505050565b60006001600160e01b03838116806126a3576126a3612583565b9216919091049291505056fea2646970667358221220b289fe922612a641f273d130b256b09f9eb9f059a5d9c4365bd1c9d47462a7f264736f6c634300080b0033608060405234801561001057600080fd5b506109d6806100206000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b14610098578063d6969857146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b610080366004610748565b610118565b61005b61009336600461076c565b610155565b3480156100a457600080fd5b506100ad610211565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e4366004610807565b61025a565b3480156100f557600080fd5b506100ad610382565b6101066103c7565b610116610111610469565b610501565b565b600080516020610981833981519152546001600160a01b0316336001600160a01b0316141561014d5761014a81610525565b50565b61014a6100fe565b600080516020610981833981519152546001600160a01b0316336001600160a01b031614156102045761018783610525565b6000610191610469565b90506000816001600160a01b031684846040516101af9291906108dd565b600060405180830381855af49150503d80600081146101ea576040519150601f19603f3d011682016040523d82523d6000602084013e6101ef565b606091505b50509050806101fd57600080fd5b5050505050565b61020c6100fe565b505050565b60006102296000805160206109818339815191525490565b6001600160a01b0316336001600160a01b0316141561024f5761024a610469565b905090565b6102576100fe565b90565b600054610100900460ff168061026f5750303b155b8061027d575060005460ff16155b6102e55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff16158015610307576000805461ffff19166101011790555b6103118483610565565b61033c60017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61046108ed565b6000805160206109818339815191521461035857610358610912565b600080516020610981833981519152839055801561037c576000805461ff00191690555b50505050565b600061039a6000805160206109818339815191525490565b6001600160a01b0316336001600160a01b0316141561024f57506000805160206109818339815191525490565b600080516020610981833981519152546001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4016102dc565b60008060007fb2101b231486a8a17a16c101f8dde1145d21799358462f57035a227f25614da360001b905080549150816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fa9190610928565b9250505090565b3660008037600080366000845af43d6000803e808015610520573d6000f35b3d6000fd5b61052e816106a0565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b61059060017fb2101b231486a8a17a16c101f8dde1145d21799358462f57035a227f25614da46108ed565b7fb2101b231486a8a17a16c101f8dde1145d21799358462f57035a227f25614da3146105be576105be610912565b6105c7826106a0565b80511561069c576000826001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190610928565b90506000816001600160a01b03168360405161064e9190610945565b600060405180830381855af49150503d8060008114610689576040519150601f19603f3d011682016040523d82523d6000602084013e61068e565b606091505b505090508061037c57600080fd5b5050565b6001600160a01b0381163b61070f5760405162461bcd60e51b815260206004820152602f60248201527f5570677261646561626c6550726f78793a206e657720666163746f727920697360448201526e081b9bdd08184818dbdb9d1c9858dd608a1b60648201526084016102dc565b7fb2101b231486a8a17a16c101f8dde1145d21799358462f57035a227f25614da355565b6001600160a01b038116811461014a57600080fd5b60006020828403121561075a57600080fd5b813561076581610733565b9392505050565b60008060006040848603121561078157600080fd5b833561078c81610733565b9250602084013567ffffffffffffffff808211156107a957600080fd5b818601915086601f8301126107bd57600080fd5b8135818111156107cc57600080fd5b8760208285010111156107de57600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561081c57600080fd5b833561082781610733565b9250602084013561083781610733565b9150604084013567ffffffffffffffff8082111561085457600080fd5b818601915086601f83011261086857600080fd5b81358181111561087a5761087a6107f1565b604051601f8201601f19908116603f011681019083821181831017156108a2576108a26107f1565b816040528281528960208487010111156108bb57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b8183823760009101908152919050565b60008282101561090d57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561093a57600080fd5b815161076581610733565b6000825160005b81811015610966576020818601810151858301520161094c565b81811115610975576000828501525b50919091019291505056feb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103a26469706673582212209e2de154b93b5d07a3bc5beb531e783b4a519c225a3722509d99e051466523f764736f6c634300080b0033a2646970667358221220f6407083f492fbe3a40ed7b08c6863d99dd4dd9f4abf1af1bd52db4fbe63709864736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80639cadffe0116100de578063e6a4390511610097578063f494b37911610071578063f494b37914610366578063f835ad9c14610379578063f851a4401461039c578063f887ea40146103af57600080fd5b8063e6a439051461030c578063f3290d7514610340578063f46901ed1461035357600080fd5b80639cadffe01461028a578063a2e74af6146102ad578063c0d78655146102c0578063c471cffb146102d3578063d40cf659146102e6578063d784d426146102f957600080fd5b80634534729711610130578063453472971461022f578063485cc95514610237578063574f2ba31461024a5780635855a25a1461025c5780635c60da1b1461026457806376f797381461027757600080fd5b8063017e7e58146101785780630322c1a5146101ae578063094b7415146101c35780630d9f9f91146101d65780631260dedb146102095780631e3dd18b1461021c575b600080fd5b600054610191906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101c16101bc366004611159565b6103c2565b005b600154610191906001600160a01b031681565b6101f96101e4366004611159565b60056020526000908152604090205460ff1681565b60405190151581526020016101a5565b6101c1610217366004611159565b610478565b61019161022a36600461117b565b610523565b6101c161054d565b6101c1610245366004611194565b6105c2565b6008545b6040519081526020016101a5565b61024e6106cc565b600954610191906001600160a01b031681565b6101916102853660046111c7565b610716565b6101f9610298366004611159565b60066020526000908152604090205460ff1681565b6101c16102bb366004611159565b610c72565b6101c16102ce366004611159565b610ce4565b6101c16102e1366004611159565b610d51565b6101c16102f4366004611159565b610dfb565b6101c1610307366004611159565b610eb3565b61019161031a366004611194565b60076020908152600092835260408084209091529082529020546001600160a01b031681565b6101c161034e366004611159565b610f4e565b6101c1610361366004611159565b610ffb565b6101c1610374366004611159565b611075565b6101f9610387366004611159565b60046020526000908152604090205460ff1681565b600354610191906001600160a01b031681565b600254610191906001600160a01b031681565b6003546001600160a01b031633146103f55760405162461bcd60e51b81526004016103ec9061120a565b60405180910390fd5b6001600160a01b03811660009081526006602052604090205460ff16156104545760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e48109b1858dadb1a5cdd1959606a1b60448201526064016103ec565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b6003546001600160a01b031633146104a25760405162461bcd60e51b81526004016103ec9061120a565b6001600160a01b03811660009081526005602052604090205460ff1615156001146105025760405162461bcd60e51b815260206004820152601060248201526f139bdd08185c1c1c9bdd9959081e595d60821b60448201526064016103ec565b6001600160a01b03166000908152600560205260409020805460ff19169055565b6008818154811061053357600080fd5b6000918252602090912001546001600160a01b0316905081565b6003546001600160a01b031633146105775760405162461bcd60e51b81526004016103ec9061120a565b60405161058390611123565b604051809103906000f08015801561059f573d6000803e3d6000fd5b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16806105d75750303b155b806105e5575060005460ff16155b6106485760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103ec565b600054610100900460ff1615801561066a576000805461ffff19166101011790555b600180546001600160a01b038086166001600160a01b03199283161790925560008054928516620100000262010000600160b01b031990931692909217909155600380549091163317905580156106c7576000805461ff00191690555b505050565b6040516106db60208201611130565b601f1982820381018352601f9091011660408190526106fd919060200161123f565b6040516020818303038152906040528051906020012081565b6009546000906001600160a01b03166107715760405162461bcd60e51b815260206004820152601960248201527f506c656173652073657420696d706c656d656e746174696f6e0000000000000060448201526064016103ec565b6001600160a01b03841660009081526006602052604090205460ff16156107da5760405162461bcd60e51b815260206004820152601960248201527f43616e6e6f7420637265617465207769746820746f6b656e410000000000000060448201526064016103ec565b6001600160a01b03831660009081526006602052604090205460ff16156108435760405162461bcd60e51b815260206004820152601960248201527f43616e6e6f7420637265617465207769746820746f6b656e420000000000000060448201526064016103ec565b6001600160a01b03821660009081526005602052604090205460ff1615156001146108ab5760405162461bcd60e51b81526020600482015260186024820152772737ba1030b8383937bb32b2103a3432903830b93a3732b960411b60448201526064016103ec565b3360009081526005602052604090205460ff16151560011461090a5760405162461bcd60e51b81526020600482015260186024820152772737ba1030b8383937bb32b2103a3432903830b93a3732b960411b60448201526064016103ec565b826001600160a01b0316846001600160a01b0316141561096c5760405162461bcd60e51b815260206004820152601d60248201527f53616665737761703a204944454e544943414c5f41444452455353455300000060448201526064016103ec565b600080846001600160a01b0316866001600160a01b03161061098f578486610992565b85855b90925090506001600160a01b0382166109e65760405162461bcd60e51b815260206004820152601660248201527553616665737761703a205a45524f5f4144445245535360501b60448201526064016103ec565b6001600160a01b03828116600090815260076020908152604080832085851684529091529020541615610a535760405162461bcd60e51b815260206004820152601560248201527453616665737761703a20504149525f45584953545360581b60448201526064016103ec565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b166034820152600090604801604051602081830303815290604052805190602001209050600081604051610aa690611130565b8190604051809103906000f5905080158015610ac6573d6000803e3d6000fd5b5060405163d696985760e01b815230600482015261dead602482015260606044820152600060648201529091506001600160a01b0382169063d696985790608401600060405180830381600087803b158015610b2157600080fd5b505af1158015610b35573d6000803e3d6000fd5b505060405163485cc95560e01b81526001600160a01b038781166004830152868116602483015293975087938416925063485cc9559150604401600060405180830381600087803b158015610b8957600080fd5b505af1158015610b9d573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526007602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560088054600181018255958190527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee39095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a3505050509392505050565b6001546001600160a01b03163314610cc25760405162461bcd60e51b815260206004820152601360248201527229b0b332b9bbb0b81d102327a92124a22222a760691b60448201526064016103ec565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b03163314610d2f5760405162461bcd60e51b815260206004820152600e60248201526d1393d5081055551213d49256915160921b60448201526064016103ec565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b03163314610d7b5760405162461bcd60e51b81526004016103ec9061120a565b6001600160a01b03811660009081526005602052604090205460ff1615610dd75760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48185c1c1c9bdd995960821b60448201526064016103ec565b6001600160a01b03166000908152600560205260409020805460ff19166001179055565b6003546001600160a01b03163314610e255760405162461bcd60e51b81526004016103ec9061120a565b6001600160a01b03811660009081526004602052604090205460ff161515600114610e925760405162461bcd60e51b815260206004820152601760248201527f416c7265616479204e6f7420426c61636b6c697374656400000000000000000060448201526064016103ec565b6001600160a01b03166000908152600460205260409020805460ff19169055565b6003546001600160a01b03163314610edd5760405162461bcd60e51b81526004016103ec9061120a565b6001600160a01b038116610f2c5760405162461bcd60e51b81526020600482015260166024820152754e6f7420616c6c6f77207a65726f206164647265737360501b60448201526064016103ec565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b03163314610f785760405162461bcd60e51b81526004016103ec9061120a565b6001600160a01b03811660009081526004602052604090205460ff1615610fd75760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e48109b1858dadb1a5cdd1959606a1b60448201526064016103ec565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b6001546001600160a01b0316331461104b5760405162461bcd60e51b815260206004820152601360248201527229b0b332b9bbb0b81d102327a92124a22222a760691b60448201526064016103ec565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6003546001600160a01b0316331461109f5760405162461bcd60e51b81526004016103ec9061120a565b6001600160a01b03811660009081526006602052604090205460ff1615156001146111025760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e4815da1a5d195b1a5cdd1959606a1b60448201526064016103ec565b6001600160a01b03166000908152600660205260409020805460ff19169055565b61270a8061127b83390190565b6109f68061398583390190565b80356001600160a01b038116811461115457600080fd5b919050565b60006020828403121561116b57600080fd5b6111748261113d565b9392505050565b60006020828403121561118d57600080fd5b5035919050565b600080604083850312156111a757600080fd5b6111b08361113d565b91506111be6020840161113d565b90509250929050565b6000806000606084860312156111dc57600080fd5b6111e58461113d565b92506111f36020850161113d565b91506112016040850161113d565b90509250925092565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000825160005b818110156112605760208186018101518583015201611246565b8181111561126f576000828501525b50919091019291505056fe60806040526001600d5534801561001557600080fd5b506126e5806100256000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610410578063d505accf14610423578063dd62ed3e14610436578063fff6cae91461046157600080fd5b8063ba9a7a56146103db578063bc25cf77146103e4578063c45a0155146103f757600080fd5b80637ecebe00116100d35780637ecebe001461035b57806389afcb441461037b57806395d89b41146103a3578063a9059cbb146103c857600080fd5b80636a6278421461031f57806370a08231146103325780637464fc3d1461035257600080fd5b806323b872dd116101665780633644e515116101405780633644e515146102f1578063485cc955146102fa5780635909c0d51461030d5780635a3d54931461031657600080fd5b806323b872dd1461029d57806330adf81f146102b0578063313ce567146102d757600080fd5b8063022c0d9f146101ae57806306fdde03146101c35780630902f1ac14610204578063095ea7b3146102385780630dfe16811461025b57806318160ddd14610286575b600080fd5b6101c16101bc366004612206565b610469565b005b6101ee6040518060400160405280600c81526020016b5361666573776170204c507360a01b81525081565b6040516101fb91906122cc565b60405180910390f35b61020c610b12565b604080516001600160701b03948516815293909216602084015263ffffffff16908201526060016101fb565b61024b6102463660046122ff565b610b3c565b60405190151581526020016101fb565b60075461026e906001600160a01b031681565b6040516001600160a01b0390911681526020016101fb565b61028f60015481565b6040519081526020016101fb565b61024b6102ab36600461232b565b610b52565b61028f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6102df601281565b60405160ff90911681526020016101fb565b61028f60045481565b6101c161030836600461236c565b610be7565b61028f600a5481565b61028f600b5481565b61028f61032d3660046123a5565b610dce565b61028f6103403660046123a5565b60026020526000908152604090205481565b61028f600c5481565b61028f6103693660046123a5565b60056020526000908152604090205481565b61038e6103893660046123a5565b61112a565b604080519283526020830191909152016101fb565b6101ee6040518060400160405280600681526020016505346532d4c560d41b81525081565b61024b6103d63660046122ff565b611520565b61028f6103e881565b6101c16103f23660046123a5565b61152d565b60065461026e906201000090046001600160a01b031681565b60085461026e906001600160a01b031681565b6101c16104313660046123c2565b611640565b61028f61044436600461236c565b600360209081526000928352604080842090915290825290205481565b6101c1611853565b600d546001146104945760405162461bcd60e51b815260040161048b90612439565b60405180910390fd5b6000600d81905550600660029054906101000a90046001600160a01b03166001600160a01b031663f887ea406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105139190612463565b6001600160a01b0316336001600160a01b03161461056b5760405162461bcd60e51b815260206004820152601560248201527429b0b332b9bbb0b81d1027a7262cafa927aaaa22a960591b604482015260640161048b565b600654604051633e0d6b6760e21b81526001600160a01b038581166004830152620100009092049091169063f835ad9c90602401602060405180830381865afa1580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e09190612480565b156105fd5760405162461bcd60e51b815260040161048b906124a2565b600085118061060c5750600084115b6106645760405162461bcd60e51b8152602060048201526024808201527f53616665737761703a20494e53554646494349454e545f4f55545055545f414d60448201526313d5539560e21b606482015260840161048b565b60008061066f610b12565b5091509150816001600160701b0316871080156106945750806001600160701b031686105b6106e05760405162461bcd60e51b815260206004820181905260248201527f53616665737761703a20494e53554646494349454e545f4c4951554944495459604482015260640161048b565b60075460085460009182916001600160a01b0391821691908116908916821480159061071e5750806001600160a01b0316896001600160a01b031614155b6107615760405162461bcd60e51b815260206004820152601460248201527353616665737761703a20494e56414c49445f544f60601b604482015260640161048b565b8a1561077257610772828a8d611977565b891561078357610783818a8c611977565b86156107f057604051630f3271ad60e21b81526001600160a01b038a1690633cc9c6b4906107bd9033908f908f908e908e906004016124d2565b600060405180830381600087803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b505050505b8a1561080c5760075461080c906001600160a01b03168c611ac2565b891561082857600854610828906001600160a01b03168b611ac2565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610890919061251e565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa1580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb919061251e565b92505050600089856001600160701b0316610916919061254d565b8311610923576000610940565b6109368a6001600160701b03871661254d565b610940908461254d565b905060006109578a6001600160701b03871661254d565b8311610964576000610981565b6109778a6001600160701b03871661254d565b610981908461254d565b905060008211806109925750600081115b6109ea5760405162461bcd60e51b815260206004820152602360248201527f53616665737761703a20494e53554646494349454e545f494e5055545f414d4f60448201526215539560ea1b606482015260840161048b565b60006109f7836002612564565b610a03866103e8612564565b610a0d919061254d565b90506000610a1c836002612564565b610a28866103e8612564565b610a32919061254d565b9050610a4a6001600160701b03808916908a16612564565b610a5790620f4240612564565b610a618284612564565b1015610a9d5760405162461bcd60e51b815260206004820152600b60248201526a53616665737761703a204b60a81b604482015260640161048b565b5050610aab84848888611be0565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600d55505050505050505050565b6009546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610b49338484611dcb565b50600192915050565b6001600160a01b038316600090815260036020908152604080832033845290915281205460001914610bd2576001600160a01b0384166000908152600360209081526040808320338452909152902054610bad90839061254d565b6001600160a01b03851660009081526003602090815260408083203384529091529020555b610bdd848484611e2d565b5060019392505050565b600654610100900460ff1680610bfc5750303b155b80610c0a575060065460ff16155b610c6d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161048b565b600654610100900460ff16158015610c8f576006805461ffff19166101011790555b6006805462010000330262010000600160b01b0319909116179055600780546001600160a01b038581166001600160a01b0319928316179092556008805492851692909116919091179055610db2604080518082018252600c81526b5361666573776170204c507360a01b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f1f70e3dc283e307f749488509b418d5a1522e0c2ae4f67d16de0357912dd8837818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600455565b6001600d558015610dc9576006805461ff00191690555b505050565b6000600d54600114610df25760405162461bcd60e51b815260040161048b90612439565b6000600d55600654604051633e0d6b6760e21b81526001600160a01b038481166004830152620100009092049091169063f835ad9c90602401602060405180830381865afa158015610e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6c9190612480565b15610e895760405162461bcd60e51b815260040161048b906124a2565b600080610e94610b12565b506007546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0a919061251e565b6008546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610f58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7c919061251e565b90506000610f936001600160701b0386168461254d565b90506000610faa6001600160701b0386168461254d565b90506000610fb88787611ed5565b60015490915080610ff6576103e8610fd8610fd38587612564565b612014565b610fe2919061254d565b9850610ff160006103e8612084565b61103d565b61103a6001600160701b03891661100d8387612564565b6110179190612599565b6001600160701b03891661102b8487612564565b6110359190612599565b612116565b98505b6000891161109d5760405162461bcd60e51b815260206004820152602760248201527f53616665737761703a20494e53554646494349454e545f4c495155494449545960448201526617d3525395115160ca1b606482015260840161048b565b6110a78a8a612084565b6110b386868a8a611be0565b81156110dc576009546110d8906001600160701b03600160701b820481169116612564565b600c555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600d5550949695505050505050565b600080600d5460011461114f5760405162461bcd60e51b815260040161048b90612439565b6000600d55600654604051633e0d6b6760e21b81526001600160a01b038581166004830152620100009092049091169063f835ad9c90602401602060405180830381865afa1580156111a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c99190612480565b156111e65760405162461bcd60e51b815260040161048b906124a2565b6000806111f1610b12565b506007546008546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a0823190602401602060405180830381865afa15801561124b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126f919061251e565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156112b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dd919061251e565b306000908152600260205260408120549192506112fa8888611ed5565b6001549091508061130b8685612564565b6113159190612599565b9a50806113228585612564565b61132c9190612599565b995060008b11801561133e575060008a115b61139a5760405162461bcd60e51b815260206004820152602760248201527f53616665737761703a20494e53554646494349454e545f4c495155494449545960448201526617d0955493915160ca1b606482015260840161048b565b6113a4308461212e565b6113af878d8d611977565b6113ba868d8c611977565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa1580156113fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611422919061251e565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a0823190602401602060405180830381865afa158015611469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148d919061251e565b935061149b85858b8b611be0565b81156114c4576009546114c0906001600160701b03600160701b820481169116612564565b600c555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600d81905550915091565b6000610b49338484611e2d565b600d5460011461154f5760405162461bcd60e51b815260040161048b90612439565b6000600d556007546008546009546040516370a0823160e01b81523060048201526001600160a01b0393841693909216916115ee91849186916001600160701b03169083906370a08231906024015b602060405180830381865afa1580156115bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115df919061251e565b6115e9919061254d565b611977565b6009546040516370a0823160e01b81523060048201526116369183918691600160701b90046001600160701b0316906001600160a01b038416906370a082319060240161159e565b50506001600d5550565b428410156116845760405162461bcd60e51b815260206004820152601160248201527014d859995cddd85c0e8811561412549151607a1b604482015260640161048b565b6004546001600160a01b038816600090815260056020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876116d7836125ad565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161175092919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156117bb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906117f15750886001600160a01b0316816001600160a01b0316145b61183d5760405162461bcd60e51b815260206004820152601b60248201527f53616665737761703a20494e56414c49445f5349474e41545552450000000000604482015260640161048b565b611848898989611dcb565b505050505050505050565b600d546001146118755760405162461bcd60e51b815260040161048b90612439565b6000600d556007546040516370a0823160e01b8152306004820152611970916001600160a01b0316906370a0823190602401602060405180830381865afa1580156118c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e8919061251e565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611930573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611954919061251e565b6009546001600160701b0380821691600160701b900416611be0565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b17905291516000928392871691611a0391906125c8565b6000604051808303816000865af19150503d8060008114611a40576040519150601f19603f3d011682016040523d82523d6000602084013e611a45565b606091505b5091509150818015611a6f575080511580611a6f575080806020019051810190611a6f9190612480565b611abb5760405162461bcd60e51b815260206004820152601960248201527f53616665737761703a205452414e534645525f4641494c454400000000000000604482015260640161048b565b5050505050565b6000600660029054906101000a90046001600160a01b03166001600160a01b031663f887ea406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3b9190612463565b604051634e9247ab60e11b81526001600160a01b03858116600483015260248201859052919250600091829190841690639d248f56906044016040805180830381865afa158015611b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb491906125e4565b91509150600082118015611bd057506001600160a01b03811615155b15611abb57611abb858284611977565b6001600160701b038411801590611bfe57506001600160701b038311155b611c3f5760405162461bcd60e51b815260206004820152601260248201527153616665737761703a204f564552464c4f5760701b604482015260640161048b565b6000611c5064010000000042612609565b600954909150600090611c7090600160e01b900463ffffffff168361261d565b905060008163ffffffff16118015611c9057506001600160701b03841615155b8015611ca457506001600160701b03831615155b15611d33578063ffffffff16611ccc85611cbd866121ba565b6001600160e01b0316906121d9565b6001600160e01b0316611cdf9190612564565b600a6000828254611cf09190612642565b909155505063ffffffff8116611d0984611cbd876121ba565b6001600160e01b0316611d1c9190612564565b600b6000828254611d2d9190612642565b90915550505b6009805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081026001600160e01b03199095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260026020526040902054611e5190829061254d565b6001600160a01b038085166000908152600260205260408082209390935590841681522054611e81908290612642565b6001600160a01b0380841660008181526002602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611e209085815260200190565b600080600660029054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f9190612463565b600c546001600160a01b038216158015945091925090612000578015611ffb576000611f8a610fd36001600160701b03808816908916612564565b90506000611f9783612014565b905080821115611ff8576000611fad828461254d565b600154611fba9190612564565b9050600082611fca856003612564565b611fd49190612642565b90506000611fe28284612599565b90508015611ff457611ff48782612084565b5050505b50505b61200c565b801561200c576000600c555b505092915050565b60006003821115612075575080600061202e600283612599565b612039906001612642565b90505b8181101561206f579050806002816120548186612599565b61205e9190612642565b6120689190612599565b905061203c565b50919050565b811561207f575060015b919050565b806001546120929190612642565b6001556001600160a01b0382166000908152600260205260409020546120b9908290612642565b6001600160a01b0383166000818152600260205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061210a9085815260200190565b60405180910390a35050565b60008183106121255781612127565b825b9392505050565b6001600160a01b03821660009081526002602052604090205461215290829061254d565b6001600160a01b03831660009081526002602052604090205560015461217990829061254d565b6001556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161210a565b60006121d3600160701b6001600160701b03841661265a565b92915050565b60006121276001600160701b03831684612689565b6001600160a01b038116811461220357600080fd5b50565b60008060008060006080868803121561221e57600080fd5b85359450602086013593506040860135612237816121ee565b9250606086013567ffffffffffffffff8082111561225457600080fd5b818801915088601f83011261226857600080fd5b81358181111561227757600080fd5b89602082850101111561228957600080fd5b9699959850939650602001949392505050565b60005b838110156122b757818101518382015260200161229f565b838111156122c6576000848401525b50505050565b60208152600082518060208401526122eb81604085016020870161229c565b601f01601f19169190910160400192915050565b6000806040838503121561231257600080fd5b823561231d816121ee565b946020939093013593505050565b60008060006060848603121561234057600080fd5b833561234b816121ee565b9250602084013561235b816121ee565b929592945050506040919091013590565b6000806040838503121561237f57600080fd5b823561238a816121ee565b9150602083013561239a816121ee565b809150509250929050565b6000602082840312156123b757600080fd5b8135612127816121ee565b600080600080600080600060e0888a0312156123dd57600080fd5b87356123e8816121ee565b965060208801356123f8816121ee565b95506040880135945060608801359350608088013560ff8116811461241c57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60208082526010908201526f14d859995cddd85c0e881313d0d2d15160821b604082015260600190565b60006020828403121561247557600080fd5b8151612127816121ee565b60006020828403121561249257600080fd5b8151801515811461212757600080fd5b6020808252601690820152751059191c995cdcc81a5cc8189b1858dadb1a5cdd195960521b604082015260600190565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60006020828403121561253057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561255f5761255f612537565b500390565b600081600019048311821515161561257e5761257e612537565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826125a8576125a8612583565b500490565b60006000198214156125c1576125c1612537565b5060010190565b600082516125da81846020870161229c565b9190910192915050565b600080604083850312156125f757600080fd5b82519150602083015161239a816121ee565b60008261261857612618612583565b500690565b600063ffffffff8381169083168181101561263a5761263a612537565b039392505050565b6000821982111561265557612655612537565b500190565b60006001600160e01b038281168482168115158284048211161561268057612680612537565b02949350505050565b60006001600160e01b03838116806126a3576126a3612583565b9216919091049291505056fea2646970667358221220b289fe922612a641f273d130b256b09f9eb9f059a5d9c4365bd1c9d47462a7f264736f6c634300080b0033608060405234801561001057600080fd5b506109d6806100206000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b14610098578063d6969857146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b610080366004610748565b610118565b61005b61009336600461076c565b610155565b3480156100a457600080fd5b506100ad610211565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e4366004610807565b61025a565b3480156100f557600080fd5b506100ad610382565b6101066103c7565b610116610111610469565b610501565b565b600080516020610981833981519152546001600160a01b0316336001600160a01b0316141561014d5761014a81610525565b50565b61014a6100fe565b600080516020610981833981519152546001600160a01b0316336001600160a01b031614156102045761018783610525565b6000610191610469565b90506000816001600160a01b031684846040516101af9291906108dd565b600060405180830381855af49150503d80600081146101ea576040519150601f19603f3d011682016040523d82523d6000602084013e6101ef565b606091505b50509050806101fd57600080fd5b5050505050565b61020c6100fe565b505050565b60006102296000805160206109818339815191525490565b6001600160a01b0316336001600160a01b0316141561024f5761024a610469565b905090565b6102576100fe565b90565b600054610100900460ff168061026f5750303b155b8061027d575060005460ff16155b6102e55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff16158015610307576000805461ffff19166101011790555b6103118483610565565b61033c60017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61046108ed565b6000805160206109818339815191521461035857610358610912565b600080516020610981833981519152839055801561037c576000805461ff00191690555b50505050565b600061039a6000805160206109818339815191525490565b6001600160a01b0316336001600160a01b0316141561024f57506000805160206109818339815191525490565b600080516020610981833981519152546001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4016102dc565b60008060007fb2101b231486a8a17a16c101f8dde1145d21799358462f57035a227f25614da360001b905080549150816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fa9190610928565b9250505090565b3660008037600080366000845af43d6000803e808015610520573d6000f35b3d6000fd5b61052e816106a0565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b61059060017fb2101b231486a8a17a16c101f8dde1145d21799358462f57035a227f25614da46108ed565b7fb2101b231486a8a17a16c101f8dde1145d21799358462f57035a227f25614da3146105be576105be610912565b6105c7826106a0565b80511561069c576000826001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190610928565b90506000816001600160a01b03168360405161064e9190610945565b600060405180830381855af49150503d8060008114610689576040519150601f19603f3d011682016040523d82523d6000602084013e61068e565b606091505b505090508061037c57600080fd5b5050565b6001600160a01b0381163b61070f5760405162461bcd60e51b815260206004820152602f60248201527f5570677261646561626c6550726f78793a206e657720666163746f727920697360448201526e081b9bdd08184818dbdb9d1c9858dd608a1b60648201526084016102dc565b7fb2101b231486a8a17a16c101f8dde1145d21799358462f57035a227f25614da355565b6001600160a01b038116811461014a57600080fd5b60006020828403121561075a57600080fd5b813561076581610733565b9392505050565b60008060006040848603121561078157600080fd5b833561078c81610733565b9250602084013567ffffffffffffffff808211156107a957600080fd5b818601915086601f8301126107bd57600080fd5b8135818111156107cc57600080fd5b8760208285010111156107de57600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561081c57600080fd5b833561082781610733565b9250602084013561083781610733565b9150604084013567ffffffffffffffff8082111561085457600080fd5b818601915086601f83011261086857600080fd5b81358181111561087a5761087a6107f1565b604051601f8201601f19908116603f011681019083821181831017156108a2576108a26107f1565b816040528281528960208487010111156108bb57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b8183823760009101908152919050565b60008282101561090d57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561093a57600080fd5b815161076581610733565b6000825160005b81811015610966576020818601810151858301520161094c565b81811115610975576000828501525b50919091019291505056feb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103a26469706673582212209e2de154b93b5d07a3bc5beb531e783b4a519c225a3722509d99e051466523f764736f6c634300080b0033a2646970667358221220f6407083f492fbe3a40ed7b08c6863d99dd4dd9f4abf1af1bd52db4fbe63709864736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2943,
        "contract": "contracts/SafeswapFactory.sol:SafeswapFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2946,
        "contract": "contracts/SafeswapFactory.sol:SafeswapFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 686,
        "contract": "contracts/SafeswapFactory.sol:SafeswapFactory",
        "label": "feeTo",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 688,
        "contract": "contracts/SafeswapFactory.sol:SafeswapFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 690,
        "contract": "contracts/SafeswapFactory.sol:SafeswapFactory",
        "label": "router",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 692,
        "contract": "contracts/SafeswapFactory.sol:SafeswapFactory",
        "label": "admin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 696,
        "contract": "contracts/SafeswapFactory.sol:SafeswapFactory",
        "label": "isBlacklistedStatus",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 700,
        "contract": "contracts/SafeswapFactory.sol:SafeswapFactory",
        "label": "approvePartnerStatus",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 704,
        "contract": "contracts/SafeswapFactory.sol:SafeswapFactory",
        "label": "isBlacklistedToken",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 710,
        "contract": "contracts/SafeswapFactory.sol:SafeswapFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 713,
        "contract": "contracts/SafeswapFactory.sol:SafeswapFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 715,
        "contract": "contracts/SafeswapFactory.sol:SafeswapFactory",
        "label": "implementation",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}