/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Greater,
  GreaterInterface,
} from "../../../mocks/Greater.sol/Greater";

const _abi = [
  {
    inputs: [],
    name: "__nothing",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "balance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decrease",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "doSomethingWithCount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "increase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_balance",
        type: "uint256",
      },
    ],
    name: "setBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610212806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80634a4b9feb1161005b5780634a4b9feb146100c7578063ce6bad36146100e7578063d732d955146100f0578063e8927fbc146100f857600080fd5b806306661abd14610082578063195f9f7d1461009d57806347bb89f0146100a7575b600080fd5b61008b60015481565b60405190815260200160405180910390f35b6100a5610100565b005b61008b6100b5366004610141565b60026020526000908152604090205481565b6100a56100d536600461015a565b60009182526002602052604090912055565b61008b60005481565b6100a561011a565b6100a5610131565b6005600160008282546101139190610192565b9091555050565b6001805490600061012a836101aa565b9190505550565b6001805490600061012a836101c1565b60006020828403121561015357600080fd5b5035919050565b6000806040838503121561016d57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b600082198211156101a5576101a561017c565b500190565b6000816101b9576101b961017c565b506000190190565b60006000198214156101d5576101d561017c565b506001019056fea2646970667358221220db36bd27835d1099395e9f2faf77dddea3042794db18bf89a9656806693917b164736f6c634300080b0033";

type GreaterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GreaterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Greater__factory extends ContractFactory {
  constructor(...args: GreaterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Greater> {
    return super.deploy(overrides || {}) as Promise<Greater>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Greater {
    return super.attach(address) as Greater;
  }
  override connect(signer: Signer): Greater__factory {
    return super.connect(signer) as Greater__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GreaterInterface {
    return new utils.Interface(_abi) as GreaterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Greater {
    return new Contract(address, _abi, signerOrProvider) as Greater;
  }
}
