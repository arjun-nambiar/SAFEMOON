/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ISafeswapCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISafeswapCallee__factory>;
    getContractFactory(
      name: "ISafeswapERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISafeswapERC20__factory>;
    getContractFactory(
      name: "ISafeswapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISafeswapFactory__factory>;
    getContractFactory(
      name: "ISafeswapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISafeswapPair__factory>;
    getContractFactory(
      name: "OptimizedTransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimizedTransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "UpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableProxy__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "MockFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFactory__factory>;
    getContractFactory(
      name: "Greater",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Greater__factory>;
    getContractFactory(
      name: "NewGreater",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NewGreater__factory>;
    getContractFactory(
      name: "SafeswapERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeswapERC20__factory>;
    getContractFactory(
      name: "SafeswapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeswapFactory__factory>;
    getContractFactory(
      name: "ISafeswapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISafeswapRouter__factory>;
    getContractFactory(
      name: "SafeswapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeswapPair__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;

    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ISafeswapCallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISafeswapCallee>;
    getContractAt(
      name: "ISafeswapERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISafeswapERC20>;
    getContractAt(
      name: "ISafeswapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISafeswapFactory>;
    getContractAt(
      name: "ISafeswapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISafeswapPair>;
    getContractAt(
      name: "OptimizedTransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimizedTransparentUpgradeableProxy>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "UpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableProxy>;
    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "MockFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFactory>;
    getContractAt(
      name: "Greater",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Greater>;
    getContractAt(
      name: "NewGreater",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NewGreater>;
    getContractAt(
      name: "SafeswapERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeswapERC20>;
    getContractAt(
      name: "SafeswapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeswapFactory>;
    getContractAt(
      name: "ISafeswapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISafeswapRouter>;
    getContractAt(
      name: "SafeswapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeswapPair>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
