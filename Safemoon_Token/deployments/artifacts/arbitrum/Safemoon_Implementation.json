{
  "address": "0xA121846c6ac296BB27297712c3eA140f8ae60e2f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ignoreAddress",
          "type": "address"
        }
      ],
      "name": "AddIgnoreCollectBNBAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minTokensBeforeSwap",
          "type": "uint256"
        }
      ],
      "name": "MinTokensBeforeSwapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "PauseContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ignoreAddress",
          "type": "address"
        }
      ],
      "name": "RemoveIgnoreCollectBNBAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "SetSFMPair",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bnbSwapped",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenReceived",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bnbIntoLiquidity",
          "type": "uint256"
        }
      ],
      "name": "SwapAndEvolve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SwapAndEvolveEnabledUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "WhitelistPause",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WBNB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_burnAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_defaultFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ecoSystemFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "taxFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ownerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burnFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "ecoSystem",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_maxTxAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "accountTier",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ecoSystemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taxFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ownerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burnFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "ecoSystem",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct Safemoon.FeeTier",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addListIgnoreCollectBNBOnTransferAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ecoSystemFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidityFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_taxFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ownerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_burnFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_ecoSystem",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "addTier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "blacklistAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeBurnAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "excludeFromFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "excludeFromReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "excludeWhitelistedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tierIndex",
          "type": "uint256"
        }
      ],
      "name": "feeTier",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ecoSystemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taxFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ownerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burnFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "ecoSystem",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct Safemoon.FeeTier",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTiersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "includeInFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "includeInReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "initRouterAndPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcludedFromFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcludedFromReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMigrationStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isSFMPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "listIgnoreCollectBNBAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numOfBnbToSwapAndEvolve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numTokensToCollectBNB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "deductTransferFee",
          "type": "bool"
        }
      ],
      "name": "reflectionFromToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tierIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "deductTransferFee",
          "type": "bool"
        }
      ],
      "name": "reflectionFromTokenInTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "removeListIgnoreCollectBNBOnTransferAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_burn",
          "type": "address"
        }
      ],
      "name": "setBridgeBurnAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tierIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_burnFee",
          "type": "uint256"
        }
      ],
      "name": "setBurnFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setDefaultSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tierIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_ecoSystem",
          "type": "address"
        }
      ],
      "name": "setEcoSystemFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tierIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ecoSystemFee",
          "type": "uint256"
        }
      ],
      "name": "setEcoSystemFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tierIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidityFee",
          "type": "uint256"
        }
      ],
      "name": "setLiquidityFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxTxPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxTxPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migration",
          "type": "address"
        }
      ],
      "name": "setMigrationAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numBnb",
          "type": "uint256"
        }
      ],
      "name": "setNumOfBnbToSwapAndEvolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numToken",
          "type": "uint256"
        }
      ],
      "name": "setNumberOfTokenToCollectBNB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tierIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwnerFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tierIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ownerFee",
          "type": "uint256"
        }
      ],
      "name": "setOwnerFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setSFMPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setSwapAndEvolveEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tierIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_taxFee",
          "type": "uint256"
        }
      ],
      "name": "setTaxFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wl",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setWhitelistMintBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setWhitelistPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAndEvolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAndEvolveEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAndLiquifyEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAmount",
          "type": "uint256"
        }
      ],
      "name": "tokenFromReflection",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unBlacklistAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newBurnAddress",
          "type": "address"
        }
      ],
      "name": "updateBurnAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapV2Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapV2Pair",
          "type": "address"
        }
      ],
      "name": "updateRouterAndPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tierIndex",
          "type": "uint256"
        }
      ],
      "name": "whitelistAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistPause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawBnb",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x165144ba62358600be1e16d8256237d4add6551fdab9b0bdb9eeba9a6368ca84",
  "receipt": {
    "to": null,
    "from": "0x8868F1b2aafc2afBF24076Aa6829024A1385A047",
    "contractAddress": "0xA121846c6ac296BB27297712c3eA140f8ae60e2f",
    "transactionIndex": 1,
    "gasUsed": "5322974",
    "logsBloom": "0x
    "blockHash": "0x3b32a8bd74582f72055d5b4a186480dc9abaaef3863990ac359e0ced142dccba",
    "transactionHash": "0x165144ba62358600be1e16d8256237d4add6551fdab9b0bdb9eeba9a6368ca84",
    "logs": [],
    "blockNumber": 35825667,
    "cumulativeGasUsed": "5322974",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cdadaae9cc5587acbefda260d61a4a18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ignoreAddress\",\"type\":\"address\"}],\"name\":\"AddIgnoreCollectBNBAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"PauseContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ignoreAddress\",\"type\":\"address\"}],\"name\":\"RemoveIgnoreCollectBNBAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetSFMPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndEvolve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndEvolveEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"WhitelistPause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_defaultFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ecoSystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ecoSystem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"accountTier\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ecoSystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ecoSystem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Safemoon.FeeTier\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addListIgnoreCollectBNBOnTransferAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ecoSystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ecoSystem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeBurnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"excludeWhitelistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"}],\"name\":\"feeTier\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ecoSystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ecoSystem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Safemoon.FeeTier\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTiersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"initRouterAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrationStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSFMPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listIgnoreCollectBNBAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOfBnbToSwapAndEvolve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensToCollectBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromTokenInTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeListIgnoreCollectBNBOnTransferAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burn\",\"type\":\"address\"}],\"name\":\"setBridgeBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDefaultSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ecoSystem\",\"type\":\"address\"}],\"name\":\"setEcoSystemFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ecoSystemFee\",\"type\":\"uint256\"}],\"name\":\"setEcoSystemFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migration\",\"type\":\"address\"}],\"name\":\"setMigrationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numBnb\",\"type\":\"uint256\"}],\"name\":\"setNumOfBnbToSwapAndEvolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numToken\",\"type\":\"uint256\"}],\"name\":\"setNumberOfTokenToCollectBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwnerFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerFee\",\"type\":\"uint256\"}],\"name\":\"setOwnerFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setSFMPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndEvolveEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wl\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhitelistMintBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhitelistPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndEvolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndEvolveEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unBlacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBurnAddress\",\"type\":\"address\"}],\"name\":\"updateBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Pair\",\"type\":\"address\"}],\"name\":\"updateRouterAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"migrate(address,uint256)\":{\"details\":\"Creates `amount` tokens and assigns them to `account`, increasing the total supply. Emits a {Transfer} event with `from` set to the zero address. Requirements: - `account` cannot be the zero address.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_rTotalExcluded\":{\"details\":\"We create 2 variables _rTotalExcluded and _tTotalExcluded that store total t and r excluded So for any actions such as add, remove exclude wallet or increase, decrease exclude amount, we will update _rTotalExcluded and _tTotalExcluded and in _getCurrentSupply() function, we remove for loop by using _rTotalExcluded and _tTotalExcluded But this contract using proxy pattern, so when we upgrade contract,  we need to call updateTotalExcluded() to init value of _rTotalExcluded and _tTotalExcluded\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Safemoon.sol\":\"Safemoon\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Safemoon.sol\":{\"content\":\"/**\\n *Submitted for verification at BscScan.com on 2022-05-29\\n */\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"./SafemoonLib.sol\\\";\\n\\ncontract Safemoon is ISafemoon, Initializable, ContextUpgradeable, OwnableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    struct FeeTier {\\n        uint256 ecoSystemFee;\\n        uint256 liquidityFee;\\n        uint256 taxFee;\\n        uint256 ownerFee;\\n        uint256 burnFee;\\n        address ecoSystem;\\n        address owner;\\n    }\\n\\n    struct FeeValues {\\n        uint256 rAmount;\\n        uint256 rTransferAmount;\\n        uint256 rFee;\\n        uint256 tTransferAmount;\\n        uint256 tEchoSystem;\\n        uint256 tLiquidity;\\n        uint256 tFee;\\n        uint256 tOwner;\\n        uint256 tBurn;\\n    }\\n\\n    struct tFeeValues {\\n        uint256 tTransferAmount;\\n        uint256 tEchoSystem;\\n        uint256 tLiquidity;\\n        uint256 tFee;\\n        uint256 tOwner;\\n        uint256 tBurn;\\n    }\\n\\n    mapping(address => uint256) private _rOwned;\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) private _isExcluded;\\n    mapping(address => bool) private _isBlacklisted;\\n    mapping(address => uint256) private _accountsTier;\\n\\n    address[] private _excluded;\\n\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private _tTotal;\\n    uint256 private _rTotal;\\n    uint256 private _tFeeTotal;\\n    uint256 private _maxFee;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    FeeTier public _defaultFees;\\n    FeeTier private _previousFees;\\n    FeeTier private _emptyFees;\\n\\n    FeeTier[] private feeTiers;\\n\\n    IUniswapV2Router02 public uniswapV2Router;\\n    address public uniswapV2Pair;\\n    address public WBNB;\\n    address private migration;\\n    address private _initializerAccount;\\n    address public _burnAddress;\\n\\n    bool inSwapAndLiquify;\\n    bool public swapAndLiquifyEnabled;\\n\\n    uint256 public _maxTxAmount;\\n    uint256 private numTokensSellToAddToLiquidity;\\n\\n    bool private _upgraded;\\n\\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\\n\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    modifier lockUpgrade() {\\n        require(!_upgraded, \\\"Safemoon: Already upgraded\\\");\\n        _;\\n        _upgraded = true;\\n    }\\n\\n    modifier checkTierIndex(uint256 _index) {\\n        require(feeTiers.length > _index, \\\"Safemoon: Invalid tier index\\\");\\n        _;\\n    }\\n\\n    modifier preventBlacklisted(address _account, string memory errorMsg) {\\n        require(!_isBlacklisted[_account], errorMsg);\\n        _;\\n    }\\n\\n    modifier isRouter(address _sender) {\\n        {\\n            uint32 size;\\n            assembly {\\n                size := extcodesize(_sender)\\n            }\\n            if (size > 0) {\\n                uint256 senderTier = _accountsTier[_sender];\\n                if (senderTier == 0) {\\n                    IUniswapV2Router02 _routerCheck = IUniswapV2Router02(_sender);\\n                    try _routerCheck.factory() returns (address factory) {\\n                        _accountsTier[_sender] = 1;\\n                    } catch {}\\n                }\\n            }\\n        }\\n\\n        _;\\n    }\\n\\n    uint256 public numTokensToCollectBNB;\\n    uint256 public numOfBnbToSwapAndEvolve;\\n\\n    bool inSwapAndEvolve;\\n    bool public swapAndEvolveEnabled;\\n\\n    /**\\n     * @dev\\n     * We create 2 variables _rTotalExcluded and _tTotalExcluded that store total t and r excluded\\n     * So for any actions such as add, remove exclude wallet or increase, decrease exclude amount, we will update\\n     * _rTotalExcluded and _tTotalExcluded\\n     * and in _getCurrentSupply() function, we remove for loop by using _rTotalExcluded and _tTotalExcluded\\n     * But this contract using proxy pattern, so when we upgrade contract,\\n     *  we need to call updateTotalExcluded() to init value of _rTotalExcluded and _tTotalExcluded\\n     */\\n    uint256 private _rTotalExcluded;\\n    uint256 private _tTotalExcluded;\\n\\n    mapping(address => bool) public listIgnoreCollectBNBAddresses; // list pairs addresses that not call collectBNB function\\n    address public bridgeBurnAddress;\\n    mapping(address => bool) public whitelistMint;\\n    bool public isPaused;\\n    mapping(address => bool) public whitelistPause;\\n    mapping(address => bool) public isSFMPair;\\n\\n    event SwapAndEvolveEnabledUpdated(bool enabled);\\n    event SwapAndEvolve(uint256 bnbSwapped, uint256 tokenReceived, uint256 bnbIntoLiquidity);\\n    event AddIgnoreCollectBNBAddress(address ignoreAddress);\\n    event RemoveIgnoreCollectBNBAddress(address ignoreAddress);\\n    event WhitelistPause(address user, bool value);\\n    event SetSFMPair(address pair, bool value);\\n    event PauseContract(bool value);\\n\\n    modifier onlyWhitelistMint() {\\n        require(whitelistMint[msg.sender], \\\"Invalid\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!isPaused || whitelistPause[msg.sender], \\\"Paused\\\");\\n        _;\\n    }\\n\\n    function initialize() public initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Safemoon_v2_init_unchained();\\n    }\\n\\n    function __Safemoon_v2_init_unchained() internal initializer {\\n        _name = \\\"SafeMoon\\\";\\n        _symbol = \\\"SFM\\\";\\n        _decimals = 9;\\n\\n        _tTotal = 1000000 * 10**6 * 10**9;\\n        _rTotal = (MAX - (MAX % _tTotal));\\n        _maxFee = 1000;\\n\\n        // swapAndLiquifyEnabled = true;\\n\\n        _maxTxAmount = 5000 * 10**6 * 10**9;\\n        numTokensSellToAddToLiquidity = 500 * 10**6 * 10**9;\\n\\n        _burnAddress = 0x000000000000000000000000000000000000dEaD;\\n        _initializerAccount = _msgSender();\\n        _rOwned[_initializerAccount] = _rTotal;\\n        //exclude owner and this contract from fee\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        //\\n        __Safemoon_tiers_init();\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function initRouterAndPair(address _router) external onlyOwner {\\n        uniswapV2Router = IUniswapV2Router02(_router);\\n        WBNB = uniswapV2Router.WETH();\\n        // Create a uniswap pair for this new token\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), WBNB, address(this));\\n    }\\n\\n    function __Safemoon_tiers_init() internal initializer {\\n        _defaultFees = _addTier(0, 500, 500, 0, 0, address(0), address(0));\\n        _addTier(50, 50, 100, 0, 0, address(0), address(0));\\n        _addTier(50, 50, 100, 100, 0, address(0), address(0));\\n        _addTier(100, 125, 125, 150, 0, address(0), address(0));\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override whenNotPaused returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\")\\n        );\\n        return true;\\n    }\\n\\n    function isExcludedFromReward(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    function totalFees() public view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function reflectionFromTokenInTiers(\\n        uint256 tAmount,\\n        uint256 _tierIndex,\\n        bool deductTransferFee\\n    ) public view returns (uint256) {\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            FeeValues memory _values = _getValues(tAmount, _tierIndex);\\n            return _values.rAmount;\\n        } else {\\n            FeeValues memory _values = _getValues(tAmount, _tierIndex);\\n            return _values.rTransferAmount;\\n        }\\n    }\\n\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {\\n        return reflectionFromTokenInTiers(tAmount, 0, deductTransferFee);\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate = _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\\n    // or when increase, decrease exclude value\\n    function excludeFromReward(address account) public onlyOwner {\\n        require(!_isExcluded[account], \\\"Invalid\\\");\\n        if (_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n            _tTotalExcluded = _tTotalExcluded.add(_tOwned[account]);\\n            _rTotalExcluded = _rTotalExcluded.add(_rOwned[account]);\\n        }\\n\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\\n    // or when increase, decrease exclude value\\n    function includeInReward(address account) external onlyOwner {\\n        require(_isExcluded[account], \\\"Invalid\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _rOwned[account] = _tOwned[account] * _getRate();\\n                _tTotalExcluded = _tTotalExcluded.sub(_tOwned[account]);\\n                _rTotalExcluded = _rTotalExcluded.sub(_rOwned[account]);\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function excludeFromFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = true;\\n    }\\n\\n    function includeInFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = false;\\n    }\\n\\n    function whitelistAddress(address _account, uint256 _tierIndex)\\n        public\\n        onlyOwner\\n        checkTierIndex(_tierIndex)\\n        preventBlacklisted(_account, \\\"Safemoon: Selected account is in blacklist\\\")\\n    {\\n        require(_account != address(0), \\\"Safemoon: Invalid address\\\");\\n        _accountsTier[_account] = _tierIndex;\\n    }\\n\\n    function excludeWhitelistedAddress(address _account) public onlyOwner {\\n        require(_account != address(0), \\\"Safemoon: Invalid address\\\");\\n        require(_accountsTier[_account] > 0, \\\"Safemoon: Account is not in whitelist\\\");\\n        _accountsTier[_account] = 0;\\n    }\\n\\n    function accountTier(address _account) public view returns (FeeTier memory) {\\n        return feeTiers[_accountsTier[_account]];\\n    }\\n\\n    function isWhitelisted(address _account) public view returns (bool) {\\n        return _accountsTier[_account] > 0;\\n    }\\n\\n    function checkFees(FeeTier memory _tier) internal view returns (FeeTier memory) {\\n        uint256 _fees = _tier.ecoSystemFee.add(_tier.liquidityFee).add(_tier.taxFee).add(_tier.ownerFee).add(\\n            _tier.burnFee\\n        );\\n        require(_fees <= _maxFee, \\\"Safemoon: Fees exceeded max limitation\\\");\\n\\n        return _tier;\\n    }\\n\\n    function checkFeesChanged(\\n        FeeTier memory _tier,\\n        uint256 _oldFee,\\n        uint256 _newFee\\n    ) internal view {\\n        uint256 _fees = _tier\\n            .ecoSystemFee\\n            .add(_tier.liquidityFee)\\n            .add(_tier.taxFee)\\n            .add(_tier.ownerFee)\\n            .add(_tier.burnFee)\\n            .sub(_oldFee)\\n            .add(_newFee);\\n\\n        require(_fees <= _maxFee, \\\"Safemoon: Fees exceeded max limitation\\\");\\n    }\\n\\n    function setEcoSystemFeePercent(uint256 _tierIndex, uint256 _ecoSystemFee)\\n        external\\n        onlyOwner\\n        checkTierIndex(_tierIndex)\\n    {\\n        FeeTier memory tier = feeTiers[_tierIndex];\\n        checkFeesChanged(tier, tier.ecoSystemFee, _ecoSystemFee);\\n        feeTiers[_tierIndex].ecoSystemFee = _ecoSystemFee;\\n        if (_tierIndex == 0) {\\n            _defaultFees.ecoSystemFee = _ecoSystemFee;\\n        }\\n    }\\n\\n    function setLiquidityFeePercent(uint256 _tierIndex, uint256 _liquidityFee)\\n        external\\n        onlyOwner\\n        checkTierIndex(_tierIndex)\\n    {\\n        FeeTier memory tier = feeTiers[_tierIndex];\\n        checkFeesChanged(tier, tier.liquidityFee, _liquidityFee);\\n        feeTiers[_tierIndex].liquidityFee = _liquidityFee;\\n        if (_tierIndex == 0) {\\n            _defaultFees.liquidityFee = _liquidityFee;\\n        }\\n    }\\n\\n    function setTaxFeePercent(uint256 _tierIndex, uint256 _taxFee) external onlyOwner checkTierIndex(_tierIndex) {\\n        FeeTier memory tier = feeTiers[_tierIndex];\\n        checkFeesChanged(tier, tier.taxFee, _taxFee);\\n        feeTiers[_tierIndex].taxFee = _taxFee;\\n        if (_tierIndex == 0) {\\n            _defaultFees.taxFee = _taxFee;\\n        }\\n    }\\n\\n    function setOwnerFeePercent(uint256 _tierIndex, uint256 _ownerFee) external onlyOwner checkTierIndex(_tierIndex) {\\n        FeeTier memory tier = feeTiers[_tierIndex];\\n        checkFeesChanged(tier, tier.ownerFee, _ownerFee);\\n        feeTiers[_tierIndex].ownerFee = _ownerFee;\\n        if (_tierIndex == 0) {\\n            _defaultFees.ownerFee = _ownerFee;\\n        }\\n    }\\n\\n    function setBurnFeePercent(uint256 _tierIndex, uint256 _burnFee) external onlyOwner checkTierIndex(_tierIndex) {\\n        FeeTier memory tier = feeTiers[_tierIndex];\\n        checkFeesChanged(tier, tier.burnFee, _burnFee);\\n        feeTiers[_tierIndex].burnFee = _burnFee;\\n        if (_tierIndex == 0) {\\n            _defaultFees.burnFee = _burnFee;\\n        }\\n    }\\n\\n    function setEcoSystemFeeAddress(uint256 _tierIndex, address _ecoSystem)\\n        external\\n        onlyOwner\\n        checkTierIndex(_tierIndex)\\n    {\\n        require(_ecoSystem != address(0), \\\"Safemoon: Address Zero is not allowed\\\");\\n        excludeFromReward(_ecoSystem);\\n        feeTiers[_tierIndex].ecoSystem = _ecoSystem;\\n        if (_tierIndex == 0) {\\n            _defaultFees.ecoSystem = _ecoSystem;\\n        }\\n    }\\n\\n    function setOwnerFeeAddress(uint256 _tierIndex, address _owner) external onlyOwner checkTierIndex(_tierIndex) {\\n        require(_owner != address(0), \\\"Safemoon: Address Zero is not allowed\\\");\\n        excludeFromReward(_owner);\\n        feeTiers[_tierIndex].owner = _owner;\\n        if (_tierIndex == 0) {\\n            _defaultFees.owner = _owner;\\n        }\\n    }\\n\\n    function addTier(\\n        uint256 _ecoSystemFee,\\n        uint256 _liquidityFee,\\n        uint256 _taxFee,\\n        uint256 _ownerFee,\\n        uint256 _burnFee,\\n        address _ecoSystem,\\n        address _owner\\n    ) public onlyOwner {\\n        _addTier(_ecoSystemFee, _liquidityFee, _taxFee, _ownerFee, _burnFee, _ecoSystem, _owner);\\n    }\\n\\n    function _addTier(\\n        uint256 _ecoSystemFee,\\n        uint256 _liquidityFee,\\n        uint256 _taxFee,\\n        uint256 _ownerFee,\\n        uint256 _burnFee,\\n        address _ecoSystem,\\n        address _owner\\n    ) internal returns (FeeTier memory) {\\n        FeeTier memory _newTier = checkFees(\\n            FeeTier(_ecoSystemFee, _liquidityFee, _taxFee, _ownerFee, _burnFee, _ecoSystem, _owner)\\n        );\\n        excludeFromReward(_ecoSystem);\\n        excludeFromReward(_owner);\\n        feeTiers.push(_newTier);\\n\\n        return _newTier;\\n    }\\n\\n    function feeTier(uint256 _tierIndex) public view checkTierIndex(_tierIndex) returns (FeeTier memory) {\\n        return feeTiers[_tierIndex];\\n    }\\n\\n    function blacklistAddress(address account) public onlyOwner {\\n        _isBlacklisted[account] = true;\\n        _accountsTier[account] = 0;\\n    }\\n\\n    function unBlacklistAddress(address account) public onlyOwner {\\n        _isBlacklisted[account] = false;\\n    }\\n\\n    function updateRouterAndPair(address _uniswapV2Router, address _uniswapV2Pair) public onlyOwner {\\n        uniswapV2Router = IUniswapV2Router02(_uniswapV2Router);\\n        uniswapV2Pair = _uniswapV2Pair;\\n        WBNB = uniswapV2Router.WETH();\\n    }\\n\\n    function setDefaultSettings() external onlyOwner {\\n        swapAndLiquifyEnabled = false;\\n        swapAndEvolveEnabled = true;\\n    }\\n\\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {\\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**4);\\n    }\\n\\n    function setSwapAndEvolveEnabled(bool _enabled) public onlyOwner {\\n        swapAndEvolveEnabled = _enabled;\\n        emit SwapAndEvolveEnabledUpdated(_enabled);\\n    }\\n\\n    //to receive BNB from uniswapV2Router when swapping\\n    receive() external payable {}\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal.sub(rFee);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n    }\\n\\n    function _getValues(uint256 tAmount, uint256 _tierIndex) private view returns (FeeValues memory) {\\n        tFeeValues memory tValues = _getTValues(tAmount, _tierIndex);\\n        uint256 tTransferFee = tValues.tLiquidity.add(tValues.tEchoSystem).add(tValues.tOwner).add(tValues.tBurn);\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\n            tAmount,\\n            tValues.tFee,\\n            tTransferFee,\\n            _getRate()\\n        );\\n        return\\n            FeeValues(\\n                rAmount,\\n                rTransferAmount,\\n                rFee,\\n                tValues.tTransferAmount,\\n                tValues.tEchoSystem,\\n                tValues.tLiquidity,\\n                tValues.tFee,\\n                tValues.tOwner,\\n                tValues.tBurn\\n            );\\n    }\\n\\n    function _getTValues(uint256 tAmount, uint256 _tierIndex) private view returns (tFeeValues memory) {\\n        FeeTier memory tier = feeTiers[_tierIndex];\\n        tFeeValues memory tValues = tFeeValues(\\n            0,\\n            calculateFee(tAmount, tier.ecoSystemFee),\\n            calculateFee(tAmount, tier.liquidityFee),\\n            calculateFee(tAmount, tier.taxFee),\\n            calculateFee(tAmount, tier.ownerFee),\\n            calculateFee(tAmount, tier.burnFee)\\n        );\\n\\n        tValues.tTransferAmount = tAmount\\n            .sub(tValues.tEchoSystem)\\n            .sub(tValues.tFee)\\n            .sub(tValues.tLiquidity)\\n            .sub(tValues.tOwner)\\n            .sub(tValues.tBurn);\\n\\n        return tValues;\\n    }\\n\\n    function _getRValues(\\n        uint256 tAmount,\\n        uint256 tFee,\\n        uint256 tTransferFee,\\n        uint256 currentRate\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rFee = tFee.mul(currentRate);\\n        uint256 rTransferFee = tTransferFee.mul(currentRate);\\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTransferFee);\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function _getRate() private view returns (uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\n        if (_rTotalExcluded > _rTotal || _tTotalExcluded > _tTotal) {\\n            return (_rTotal, _tTotal);\\n        }\\n        uint256 rSupply = _rTotal.sub(_rTotalExcluded);\\n        uint256 tSupply = _tTotal.sub(_tTotalExcluded);\\n\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n\\n        return (rSupply, tSupply);\\n    }\\n\\n    function calculateFee(uint256 _amount, uint256 _fee) private pure returns (uint256) {\\n        if (_fee == 0) return 0;\\n        return _amount.mul(_fee).div(10**4);\\n    }\\n\\n    function removeAllFee() private {\\n        _previousFees = feeTiers[0];\\n        feeTiers[0] = _emptyFees;\\n    }\\n\\n    function restoreAllFee() private {\\n        feeTiers[0] = _previousFees;\\n    }\\n\\n    function isExcludedFromFee(address account) public view returns (bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function isBlacklisted(address account) public view returns (bool) {\\n        return _isBlacklisted[account];\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    )\\n        private\\n        preventBlacklisted(owner, \\\"Safemoon: Owner address is blacklisted\\\")\\n        preventBlacklisted(spender, \\\"Safemoon: Spender address is blacklisted\\\")\\n    {\\n        require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        private\\n        preventBlacklisted(_msgSender(), \\\"Safemoon: Address is blacklisted\\\")\\n        preventBlacklisted(from, \\\"Safemoon: From address is blacklisted\\\")\\n        preventBlacklisted(to, \\\"Safemoon: To address is blacklisted\\\")\\n        isRouter(_msgSender())\\n    {\\n        require(from != address(0), \\\"BEP20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"BEP20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        require(_canAction(from, to), \\\"Paused\\\");\\n\\n        if (from != owner() && to != owner())\\n            require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\n\\n        // is the token balance of this contract address over the min number of\\n        // tokens that we need to initiate a swap + liquidity lock?\\n        // also, don't get caught in a circular liquidity event.\\n        // also, don't swap & liquify if sender is uniswap pair.\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n\\n        if (contractTokenBalance >= _maxTxAmount) {\\n            contractTokenBalance = _maxTxAmount;\\n        }\\n\\n        bool overMinTokenBalance = contractTokenBalance >= numTokensToCollectBNB;\\n        if (\\n            overMinTokenBalance &&\\n            !inSwapAndLiquify &&\\n            swapAndEvolveEnabled &&\\n            !_isInCollectBNBWhitelist(from) &&\\n            !_isInCollectBNBWhitelist(to)\\n        ) {\\n            contractTokenBalance = numTokensToCollectBNB;\\n            collectBNB(contractTokenBalance);\\n        }\\n\\n        //indicates if fee should be deducted from transfer\\n        bool takeFee = true;\\n\\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\n            takeFee = false;\\n        }\\n\\n        uint256 tierIndex = 0;\\n\\n        if (takeFee) {\\n            tierIndex = _accountsTier[from];\\n\\n            if (_msgSender() != from) {\\n                tierIndex = _accountsTier[_msgSender()];\\n            }\\n        }\\n\\n        //transfer amount, it will take tax, burn, liquidity fee\\n        _tokenTransfer(from, to, amount, tierIndex, takeFee);\\n    }\\n\\n    function _canAction(address from, address to) private view returns (bool) {\\n        if (!isPaused) {\\n            return true;\\n        }\\n        if (whitelistPause[from] && whitelistPause[to]) {\\n            return true;\\n        }\\n        if (whitelistPause[from] && !isSFMPair[from]) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function collectBNB(uint256 contractTokenBalance) private lockTheSwap {\\n        swapTokensForBnb(contractTokenBalance);\\n    }\\n\\n    function swapTokensForBnb(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -> wbnb\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        ISafeSwapTradeRouter tradeRouter = ISafeSwapTradeRouter(uniswapV2Router.routerTrade());\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // get feeAmount\\n        uint256 feeAmount = tradeRouter.getSwapFees(tokenAmount, path);\\n        ISafeSwapTradeRouter.Trade memory trade = ISafeSwapTradeRouter.Trade({\\n            amountIn: tokenAmount,\\n            amountOut: 0,\\n            path: path,\\n            to: payable(address(this)),\\n            deadline: block.timestamp\\n        });\\n        tradeRouter.swapExactTokensForETHAndFeeAmount{ value: feeAmount }(trade);\\n    }\\n\\n    function swapAndEvolve() public onlyOwner lockTheSwap {\\n        // split the contract balance into halves\\n        uint256 contractBnbBalance = address(this).balance;\\n        require(contractBnbBalance >= numOfBnbToSwapAndEvolve, \\\"BNB balance is not reach for S&E Threshold\\\");\\n\\n        contractBnbBalance = numOfBnbToSwapAndEvolve;\\n\\n        uint256 half = contractBnbBalance.div(2);\\n        uint256 otherHalf = contractBnbBalance.sub(half);\\n\\n        // capture the contract's current BNB balance.\\n        // this is so that we can capture exactly the amount of BNB that the\\n        // swap creates, and not make the liquidity event include any BNB that\\n        // has been manually sent to the contract\\n        uint256 initialBalance = ISafemoon(address(this)).balanceOf(msg.sender);\\n        // swap BNB for Tokens\\n        swapBnbForTokens(half);\\n\\n        // how much BNB did we just swap into?\\n        uint256 newBalance = ISafemoon(address(this)).balanceOf(msg.sender);\\n        uint256 swapeedToken = newBalance.sub(initialBalance);\\n\\n        _approve(msg.sender, address(this), swapeedToken);\\n        ISafemoon(address(this)).transferFrom(msg.sender, address(this), swapeedToken);\\n        // add liquidity to uniswap\\n        addLiquidity(swapeedToken, otherHalf);\\n        emit SwapAndEvolve(half, swapeedToken, otherHalf);\\n    }\\n\\n    function swapBnbForTokens(uint256 bnbAmount) private {\\n        // generate the uniswap pair path of token -> wbnb\\n        address[] memory path = new address[](2);\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = address(this);\\n\\n        ISafeSwapTradeRouter tradeRouter = ISafeSwapTradeRouter(uniswapV2Router.routerTrade());\\n        _approve(owner(), address(uniswapV2Router), bnbAmount);\\n\\n        // get feeAmount\\n        uint256 feeAmount = tradeRouter.getSwapFees(bnbAmount, path);\\n        ISafeSwapTradeRouter.Trade memory trade = ISafeSwapTradeRouter.Trade({\\n            amountIn: bnbAmount,\\n            amountOut: 0,\\n            path: path,\\n            to: payable(owner()),\\n            deadline: block.timestamp\\n        });\\n        tradeRouter.swapExactETHForTokensWithFeeAmount{ value: bnbAmount + feeAmount }(trade, feeAmount);\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // add the liquidity\\n        uniswapV2Router.addLiquidityETH{ value: bnbAmount }(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            owner(),\\n            block.timestamp\\n        );\\n    }\\n\\n    //this method is responsible for taking all fee, if takeFee is true\\n    function _tokenTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 tierIndex,\\n        bool takeFee\\n    ) private {\\n        if (!takeFee) removeAllFee();\\n\\n        if (!_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferStandard(sender, recipient, amount, tierIndex);\\n        } else if (_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferFromExcluded(sender, recipient, amount, tierIndex);\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferToExcluded(sender, recipient, amount, tierIndex);\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferBothExcluded(sender, recipient, amount, tierIndex);\\n        }\\n\\n        if (!takeFee) restoreAllFee();\\n    }\\n\\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\\n    // or when increase, decrease exclude value\\n    function _transferBothExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount,\\n        uint256 tierIndex\\n    ) private {\\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n//        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(_values.tTransferAmount);\\n//        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\\n\\n        if (_values.tTransferAmount > tAmount) {\\n            uint256 tmpValue = _values.tTransferAmount - tAmount;\\n            _tTotalExcluded = _tTotalExcluded.add(tmpValue);\\n        } else {\\n            uint256 tmpValue = tAmount - _values.tTransferAmount;\\n            _tTotalExcluded = _tTotalExcluded.sub(tmpValue);\\n        }\\n        if (_values.rTransferAmount > _values.rAmount) {\\n            uint256 tmpValue = _values.rTransferAmount - _values.rAmount;\\n            _rTotalExcluded = _rTotalExcluded.add(tmpValue);\\n        } else {\\n            uint256 tmpValue = _values.rAmount - _values.rTransferAmount;\\n            _rTotalExcluded = _rTotalExcluded.sub(tmpValue);\\n        }\\n        //        _tTotalExcluded = _tTotalExcluded.add(_values.tTransferAmount).sub(tAmount);\\n        //        _rTotalExcluded = _rTotalExcluded.add(_values.rTransferAmount).sub(_values.rAmount);\\n\\n        _takeFees(sender, _values, tierIndex);\\n        _reflectFee(_values.rFee, _values.tFee);\\n        emit Transfer(sender, recipient, _values.tTransferAmount);\\n    }\\n\\n    function _transferStandard(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount,\\n        uint256 tierIndex\\n    ) private {\\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\\n        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\\n        _takeFees(sender, _values, tierIndex);\\n        _reflectFee(_values.rFee, _values.tFee);\\n        emit Transfer(sender, recipient, _values.tTransferAmount);\\n    }\\n\\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\\n    // or when increase, decrease exclude value\\n    function _transferToExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount,\\n        uint256 tierIndex\\n    ) private {\\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\\n        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(_values.tTransferAmount);\\n//        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\\n        _tTotalExcluded = _tTotalExcluded.add(_values.tTransferAmount);\\n        _rTotalExcluded = _rTotalExcluded.add(_values.rTransferAmount);\\n\\n        _takeFees(sender, _values, tierIndex);\\n        _reflectFee(_values.rFee, _values.tFee);\\n        emit Transfer(sender, recipient, _values.tTransferAmount);\\n    }\\n\\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\\n    // or when increase, decrease exclude value\\n    function _transferFromExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount,\\n        uint256 tierIndex\\n    ) private {\\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n//        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\\n        _tTotalExcluded = _tTotalExcluded.sub(tAmount);\\n        _rTotalExcluded = _rTotalExcluded.sub(_values.rAmount);\\n\\n        _takeFees(sender, _values, tierIndex);\\n        _reflectFee(_values.rFee, _values.tFee);\\n        emit Transfer(sender, recipient, _values.tTransferAmount);\\n    }\\n\\n    function _takeFees(\\n        address sender,\\n        FeeValues memory values,\\n        uint256 tierIndex\\n    ) private {\\n        _takeFee(sender, values.tLiquidity, address(this));\\n        _takeFee(sender, values.tEchoSystem, feeTiers[tierIndex].ecoSystem);\\n        _takeFee(sender, values.tOwner, feeTiers[tierIndex].owner);\\n        _takeBurn(sender, values.tBurn);\\n    }\\n\\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\\n    // or when increase, decrease exclude value\\n    function _takeFee(\\n        address sender,\\n        uint256 tAmount,\\n        address recipient\\n    ) private {\\n        if (recipient == address(0)) return;\\n        if (tAmount == 0) return;\\n\\n        uint256 currentRate = _getRate();\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        _rOwned[recipient] = _rOwned[recipient].add(rAmount);\\n\\n        if (_isExcluded[recipient]) {\\n            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\\n            _tTotalExcluded = _tTotalExcluded.add(tAmount);\\n            _rTotalExcluded = _rTotalExcluded.add(rAmount);\\n        }\\n\\n        emit Transfer(sender, recipient, tAmount);\\n    }\\n\\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\\n    // or when increase, decrease exclude value\\n    function _takeBurn(address sender, uint256 _amount) private {\\n        if (_amount == 0) return;\\n        _tOwned[_burnAddress] = _tOwned[_burnAddress].add(_amount);\\n        uint256 _rAmount = _amount * _getRate();\\n        _rOwned[_burnAddress] = _rOwned[_burnAddress].add(_rAmount);\\n        if (_isExcluded[_burnAddress]) {\\n            _rTotalExcluded = _rTotalExcluded.add(_rAmount);\\n            _tTotalExcluded = _tTotalExcluded.add(_amount);\\n        }\\n\\n        emit Transfer(sender, _burnAddress, _amount);\\n    }\\n\\n    function setMigrationAddress(address _migration) public onlyOwner {\\n        migration = _migration;\\n    }\\n\\n    function isMigrationStarted() external view override returns (bool) {\\n        return migration != address(0);\\n    }\\n\\n    function migrate(address account, uint256 amount)\\n        external\\n        override\\n        preventBlacklisted(account, \\\"Safemoon: Migrated account is blacklisted\\\")\\n    {\\n        require(migration != address(0), \\\"Safemoon: Migration is not started\\\");\\n        require(_msgSender() == migration, \\\"Safemoon: Not Allowed\\\");\\n        _migrate(account, amount);\\n    }\\n\\n    function _migrate(address account, uint256 amount) private {\\n        require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\n\\n        _tokenTransfer(_initializerAccount, account, amount, 0, false);\\n    }\\n\\n    function feeTiersLength() public view returns (uint256) {\\n        return feeTiers.length;\\n    }\\n\\n    function updateBurnAddress(address _newBurnAddress) external onlyOwner {\\n        _burnAddress = _newBurnAddress;\\n        excludeFromReward(_newBurnAddress);\\n    }\\n\\n    function withdrawToken(address _token, uint256 _amount) public onlyOwner {\\n        ISafemoon(_token).transfer(msg.sender, _amount);\\n    }\\n\\n    function setNumberOfTokenToCollectBNB(uint256 _numToken) public onlyOwner {\\n        numTokensToCollectBNB = _numToken;\\n    }\\n\\n    function setNumOfBnbToSwapAndEvolve(uint256 _numBnb) public onlyOwner {\\n        numOfBnbToSwapAndEvolve = _numBnb;\\n    }\\n\\n    function withdrawBnb(uint256 _amount) public onlyOwner {\\n        payable(msg.sender).transfer(_amount);\\n    }\\n\\n    function addListIgnoreCollectBNBOnTransferAddresses(address[] calldata _addresses) external onlyOwner {\\n        uint256 len = _addresses.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address addr = _addresses[i];\\n            if (listIgnoreCollectBNBAddresses[addr]) continue;\\n\\n            listIgnoreCollectBNBAddresses[addr] = true;\\n            emit AddIgnoreCollectBNBAddress(addr);\\n        }\\n    }\\n\\n    function removeListIgnoreCollectBNBOnTransferAddresses(address[] calldata _addresses) external onlyOwner {\\n        uint256 len = _addresses.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address addr = _addresses[i];\\n            if (!listIgnoreCollectBNBAddresses[addr]) continue;\\n\\n            listIgnoreCollectBNBAddresses[addr] = false;\\n            emit RemoveIgnoreCollectBNBAddress(addr);\\n        }\\n    }\\n\\n    function _isInCollectBNBWhitelist(address _addr) private view returns (bool) {\\n        return listIgnoreCollectBNBAddresses[_addr];\\n    }\\n\\n    function setBridgeBurnAddress(address _burn) public onlyOwner {\\n        bridgeBurnAddress = _burn;\\n    }\\n\\n    function setWhitelistMintBurn(address _wl, bool value) public onlyOwner {\\n        whitelistMint[_wl] = value;\\n    }\\n\\n    function mint(address user, uint256 amount) public whenNotPaused onlyWhitelistMint {\\n        if (msg.sender != owner()) {\\n            require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\n        }\\n        _tokenTransfer(bridgeBurnAddress, user, amount, 0, false);\\n    }\\n\\n    function burn(uint256 amount) public whenNotPaused onlyWhitelistMint {\\n        if (msg.sender != owner()) {\\n            require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\n        }\\n        _tokenTransfer(msg.sender, bridgeBurnAddress, amount, 0, false);\\n    }\\n\\n    function setWhitelistPause(address user, bool value) public onlyOwner {\\n        whitelistPause[user] = value;\\n        emit WhitelistPause(user, value);\\n    }\\n\\n    function setPause(bool value) public onlyOwner {\\n        isPaused = value;\\n    }\\n\\n    function setSFMPair(address pair, bool value) public onlyOwner {\\n        isSFMPair[pair] = value;\\n        emit SetSFMPair(pair, value);\\n    }\\n}\",\"keccak256\":\"0x7484c9c2c6cc06153802a57b38d80f9113f9800a674b8a70868d2f26afcd5eed\",\"license\":\"UNLICENSED\"},\"contracts/SafemoonLib.sol\":{\"content\":\"/**\\n *Submitted for verification at BscScan.com on 2022-05-29\\n */\\n\\npragma solidity 0.8.11;\\n\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {}\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\\ninterface ISafemoon {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function migrate(address account, uint256 amount) external;\\n\\n    function isMigrationStarted() external view returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        address to\\n    ) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function routerTrade() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {}\\n\\ninterface ISafeSwapTradeRouter {\\n    struct Trade {\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        address[] path;\\n        address payable to;\\n        uint256 deadline;\\n    }\\n\\n    function setRouter(address _router) external;\\n\\n    function setFeePercent(uint256 _feePercent) external;\\n\\n    function sePercent(uint256 _percent) external;\\n\\n    function addFfsWhitelist(address _wl) external;\\n\\n    function removeFfsWhitelist(address _wl) external;\\n\\n    function setFeeJar(address _feeJar) external;\\n\\n    function swapExactTokensForETHAndFeeAmount(Trade calldata trade) external payable;\\n\\n    function swapTokensForExactETHAndFeeAmount(Trade calldata trade) external payable;\\n\\n    function swapExactETHForTokensWithFeeAmount(Trade calldata trade, uint256 _feeAmount) external payable;\\n\\n    function swapETHForExactTokensWithFeeAmount(Trade calldata trade, uint256 _feeAmount) external payable;\\n\\n    function swapExactTokensForTokensWithFeeAmount(Trade calldata trade) external payable;\\n\\n    function swapTokensForExactTokensWithFeeAmount(Trade calldata trade) external payable;\\n\\n    function getSwapFee(\\n        uint256 amountIn,\\n        uint256 _amountOut,\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (uint256 _fee);\\n\\n    function getSwapFees(uint256 amountIn, address[] memory path) external view returns (uint256 _fees);\\n}\",\"keccak256\":\"0x90dc8247063d11cd225ca957ed2c9056164e69a287b830ce72c718511e438aec\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615f5180620000216000396000f3fe60806040526004361061046c5760003560e01c8063674a31121161024a578063bd3900c011610139578063dd62ed3e116100b6578063f2fde38b1161007a578063f2fde38b14610ee7578063f3290d7514610f07578063f3bf2f6114610f27578063fe575a8714610f47578063fff3e1ba14610f8057600080fd5b8063dd62ed3e14610dc5578063dfd66cb314610e0b578063ea2f0b3714610e87578063ee28088114610ea7578063f2d58c2314610ec757600080fd5b8063d0124920116100fd578063d012492014610d15578063d40cf65914610d45578063d543dbeb14610d65578063d66329b014610d85578063dbc914c714610da557600080fd5b8063bd3900c014610c65578063bedb86fb14610c85578063bf26646914610ca5578063bf610d7e14610cc5578063c4f8414614610cf557600080fd5b80638af319c7116101c757806395d89b411161018b57806395d89b4114610bd65780639e281a9814610beb578063a9059cbb14610c0b578063ad68ebf714610c2b578063b187bd2614610c4b57600080fd5b80638af319c714610b435780638d50d49914610b635780638da5cb5b14610b785780638dd9500214610b965780638fc3d4b814610bb657600080fd5b80637ed948f71161020e5780637ed948f714610a8f578063810315b914610aaf5780638129fc1c14610adf57806388f8202014610af45780638abec60614610b2d57600080fd5b8063674a311214610a045780636bd89cdd14610a2457806370a0823114610a44578063715018a614610a645780637d1db4a514610a7957600080fd5b80633685d4191161036657806349bd5a5e116102e35780635342acb4116102a75780635342acb41461095657806355724b3a1461098f57806360d0eb73146109ae5780636130d38f146109ce5780636531c58c146109ee57600080fd5b806349bd5a5e146108b55780634a581829146108d55780634a74bb02146108f55780634ffc14251461091657806352390c021461093657600080fd5b806342966c681161032a57806342966c6814610815578063437823ec146108355780634549b03914610855578063459c979b146108755780634732a7dc1461089557600080fd5b80633685d4191461075d57806339aa1bba1461077d5780633af32abf1461079d57806340b28c2f146107d557806340c10f19146107f557600080fd5b8063200c7295116103f457806330b263ba116103b857806330b263ba146106bb578063313ce567146106db57806332c2d90c146106fd57806332e6cd411461071d57806334dd8da91461073d57600080fd5b8063200c72951461060b57806323b872dd1461062b5780632d8381191461064b5780632f3aaeb21461066b578063301273341461069b57600080fd5b806313114a9d1161043b57806313114a9d14610514578063132af75c14610529578063140c57591461053e5780631694505e146105be57806318160ddd146105f657600080fd5b806306fdde0314610478578063095ea7b3146104a357806310844953146104d357806311b32601146104f557600080fd5b3661047357005b600080fd5b34801561048457600080fd5b5061048d610fa0565b60405161049a9190615678565b60405180910390f35b3480156104af57600080fd5b506104c36104be3660046156e2565b611032565b604051901515815260200161049a565b3480156104df57600080fd5b506104f36104ee36600461570e565b611090565b005b34801561050157600080fd5b506089545b60405190815260200161049a565b34801561052057600080fd5b50606f54610506565b34801561053557600080fd5b506104f3611199565b34801561054a57600080fd5b5061055e61055936600461572b565b6111e1565b60405161049a9190815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301516001600160a01b039081169183019190915260c092830151169181019190915260e00190565b3480156105ca57600080fd5b50608a546105de906001600160a01b031681565b6040516001600160a01b03909116815260200161049a565b34801561060257600080fd5b50606d54610506565b34801561061757600080fd5b506104f36106263660046156e2565b611295565b34801561063757600080fd5b506104c3610646366004615744565b6113aa565b34801561065757600080fd5b5061050661066636600461572b565b611414565b34801561067757600080fd5b506104c361068636600461570e565b609c6020526000908152604090205460ff1681565b3480156106a757600080fd5b5061055e6106b636600461570e565b611491565b3480156106c757600080fd5b506104f36106d6366004615785565b61153a565b3480156106e757600080fd5b5060735460405160ff909116815260200161049a565b34801561070957600080fd5b506104f36107183660046157b5565b611652565b34801561072957600080fd5b506099546105de906001600160a01b031681565b34801561074957600080fd5b506104f36107583660046157d2565b6116cf565b34801561076957600080fd5b506104f361077836600461570e565b611724565b34801561078957600080fd5b506104f3610798366004615785565b611946565b3480156107a957600080fd5b506104c36107b836600461570e565b6001600160a01b03166000908152606b6020526040902054151590565b3480156107e157600080fd5b506104f36107f036600461580b565b611a57565b34801561080157600080fd5b506104f36108103660046156e2565b611b32565b34801561082157600080fd5b506104f361083036600461572b565b611bec565b34801561084157600080fd5b506104f361085036600461570e565b611caa565b34801561086157600080fd5b50610506610870366004615839565b611cf8565b34801561088157600080fd5b506104f361089036600461572b565b611d06565b3480156108a157600080fd5b506104f36108b036600461570e565b611d5d565b3480156108c157600080fd5b50608b546105de906001600160a01b031681565b3480156108e157600080fd5b506104f36108f03660046157d2565b611da9565b34801561090157600080fd5b50608f546104c390600160a81b900460ff1681565b34801561092257600080fd5b506104f361093136600461585e565b611e37565b34801561094257600080fd5b506104f361095136600461570e565b611e7a565b34801561096257600080fd5b506104c361097136600461570e565b6001600160a01b031660009081526068602052604090205460ff1690565b34801561099b57600080fd5b506095546104c390610100900460ff1681565b3480156109ba57600080fd5b50608d546001600160a01b031615156104c3565b3480156109da57600080fd5b506104f36109e93660046157d2565b611fd6565b3480156109fa57600080fd5b5061050660935481565b348015610a1057600080fd5b506104f3610a1f36600461572b565b61205c565b348015610a3057600080fd5b506104f3610a3f36600461570e565b61208b565b348015610a5057600080fd5b50610506610a5f36600461570e565b6120d9565b348015610a7057600080fd5b506104f3612138565b348015610a8557600080fd5b5061050660905481565b348015610a9b57600080fd5b506104f3610aaa3660046158c7565b6121ac565b348015610abb57600080fd5b506104c3610aca36600461570e565b609d6020526000908152604090205460ff1681565b348015610aeb57600080fd5b506104f361229b565b348015610b0057600080fd5b506104c3610b0f36600461570e565b6001600160a01b031660009081526069602052604090205460ff1690565b348015610b3957600080fd5b5061050660945481565b348015610b4f57600080fd5b506104f3610b5e3660046158c7565b612328565b348015610b6f57600080fd5b506104f3612418565b348015610b8457600080fd5b506033546001600160a01b03166105de565b348015610ba257600080fd5b50608c546105de906001600160a01b031681565b348015610bc257600080fd5b506104f3610bd1366004615785565b612698565b348015610be257600080fd5b5061048d6127ac565b348015610bf757600080fd5b506104f3610c063660046156e2565b6127bb565b348015610c1757600080fd5b506104c3610c263660046156e2565b612856565b348015610c3757600080fd5b506104f3610c463660046156e2565b612863565b348015610c5757600080fd5b50609b546104c39060ff1681565b348015610c7157600080fd5b50608f546105de906001600160a01b031681565b348015610c9157600080fd5b506104f3610ca03660046157b5565b612982565b348015610cb157600080fd5b50610506610cc03660046158ec565b6129bf565b348015610cd157600080fd5b506104c3610ce036600461570e565b609a6020526000908152604090205460ff1681565b348015610d0157600080fd5b506104f3610d1036600461570e565b612a47565b348015610d2157600080fd5b506104c3610d3036600461570e565b60986020526000908152604090205460ff1681565b348015610d5157600080fd5b506104f3610d6036600461570e565b612a93565b348015610d7157600080fd5b506104f3610d8036600461572b565b612ade565b348015610d9157600080fd5b506104f3610da0366004615785565b612b2f565b348015610db157600080fd5b506104f3610dc0366004615925565b612c43565b348015610dd157600080fd5b50610506610de036600461580b565b6001600160a01b03918216600090815260676020908152604080832093909416825291909152205490565b348015610e1757600080fd5b50607454607554607654607754607854607954607a54610e469695949392916001600160a01b03908116911687565b60408051978852602088019690965294860193909352606085019190915260808401526001600160a01b0390811660a08401521660c082015260e00161049a565b348015610e9357600080fd5b506104f3610ea236600461570e565b612d33565b348015610eb357600080fd5b506104f3610ec236600461570e565b612d7e565b348015610ed357600080fd5b506104f3610ee2366004615785565b612f46565b348015610ef357600080fd5b506104f3610f0236600461570e565b613058565b348015610f1357600080fd5b506104f3610f2236600461570e565b613143565b348015610f3357600080fd5b506104f3610f42366004615925565b61319c565b348015610f5357600080fd5b506104c3610f6236600461570e565b6001600160a01b03166000908152606a602052604090205460ff1690565b348015610f8c57600080fd5b506104f3610f9b36600461572b565b613290565b606060718054610faf9061599a565b80601f0160208091040260200160405190810160405280929190818152602001828054610fdb9061599a565b80156110285780601f10610ffd57610100808354040283529160200191611028565b820191906000526020600020905b81548152906001019060200180831161100b57829003601f168201915b5050505050905090565b609b5460009060ff1615806110565750336000908152609c602052604090205460ff165b61107b5760405162461bcd60e51b8152600401611072906159cf565b60405180910390fd5b6110863384846132bf565b5060015b92915050565b6033546001600160a01b031633146110ba5760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03811661110c5760405162461bcd60e51b8152602060048201526019602482015278536166656d6f6f6e3a20496e76616c6964206164647265737360381b6044820152606401611072565b6001600160a01b0381166000908152606b602052604090205461117f5760405162461bcd60e51b815260206004820152602560248201527f536166656d6f6f6e3a204163636f756e74206973206e6f7420696e2077686974604482015264195b1a5cdd60da1b6064820152608401611072565b6001600160a01b03166000908152606b6020526040812055565b6033546001600160a01b031633146111c35760405162461bcd60e51b8152600401611072906159ef565b608f805460ff60a81b191690556095805461ff001916610100179055565b6111e9615590565b6089548290811061120c5760405162461bcd60e51b815260040161107290615a24565b6089838154811061121f5761121f615a5b565b60009182526020918290206040805160e081018252600790930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260058201546001600160a01b0390811660a083015260069092015490911660c082015291505b50919050565b6033546001600160a01b031633146112bf5760405162461bcd60e51b8152600401611072906159ef565b608954819081106112e25760405162461bcd60e51b815260040161107290615a24565b826040518060600160405280602a8152602001615ef2602a91396001600160a01b0382166000908152606a6020526040902054819060ff16156113385760405162461bcd60e51b81526004016110729190615678565b506001600160a01b03851661138b5760405162461bcd60e51b8152602060048201526019602482015278536166656d6f6f6e3a20496e76616c6964206164647265737360381b6044820152606401611072565b5050506001600160a01b039091166000908152606b6020526040902055565b60006113b7848484613495565b611409843361140485604051806060016040528060288152602001615e38602891396001600160a01b038a166000908152606760209081526040808320338452909152902054919061394e565b6132bf565b5060015b9392505050565b6000606e5482111561147b5760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201526965666c656374696f6e7360b01b6064820152608401611072565b6000611485613985565b905061140d83826139a8565b611499615590565b6001600160a01b0382166000908152606b60205260409020546089805490919081106114c7576114c7615a5b565b60009182526020918290206040805160e081018252600790930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260058201546001600160a01b0390811660a083015260069092015490911660c082015292915050565b6033546001600160a01b031633146115645760405162461bcd60e51b8152600401611072906159ef565b608954829081106115875760405162461bcd60e51b815260040161107290615a24565b60006089848154811061159c5761159c615a5b565b60009182526020918290206040805160e0810182526007909302909101805483526001810154938301939093526002830154908201819052600383015460608301526004830154608083015260058301546001600160a01b0390811660a084015260069093015490921660c0820152915061161990829085613a03565b826089858154811061162d5761162d615a5b565b60009182526020909120600260079092020101558361164c5760768390555b50505050565b6033546001600160a01b0316331461167c5760405162461bcd60e51b8152600401611072906159ef565b609580548215156101000261ff00199091161790556040517ef279ea7539cc7cc5311702e24242fe836f7f94e8e329be09530ade3dd254c3906116c490831515815260200190565b60405180910390a150565b6033546001600160a01b031633146116f95760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03919091166000908152609a60205260409020805460ff1916911515919091179055565b6033546001600160a01b0316331461174e5760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03811660009081526069602052604090205460ff166117865760405162461bcd60e51b815260040161107290615a71565b60005b606c5481101561194257816001600160a01b0316606c82815481106117b0576117b0615a5b565b6000918252602090912001546001600160a01b0316141561193057606c80546117db90600190615aa8565b815481106117eb576117eb615a5b565b600091825260209091200154606c80546001600160a01b03909216918390811061181757611817615a5b565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061184d613985565b6001600160a01b0383166000908152606660205260409020546118709190615abf565b6001600160a01b0383166000908152606560209081526040808320939093556066905220546097546118a191613a70565b6097556001600160a01b0382166000908152606560205260409020546096546118c991613a70565b6096556001600160a01b038216600090815260666020908152604080832083905560699091529020805460ff19169055606c80548061190a5761190a615ade565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b8061193a81615af4565b915050611789565b5050565b6033546001600160a01b031633146119705760405162461bcd60e51b8152600401611072906159ef565b608954829081106119935760405162461bcd60e51b815260040161107290615a24565b6000608984815481106119a8576119a8615a5b565b60009182526020918290206040805160e08101825260079093029091018054808452600182015494840194909452600281015491830191909152600381015460608301526004810154608083015260058101546001600160a01b0390811660a08401526006909101541660c08201529150611a2590829085613a03565b8260898581548110611a3957611a39615a5b565b60009182526020909120600790910201558361164c57505060745550565b6033546001600160a01b03163314611a815760405162461bcd60e51b8152600401611072906159ef565b608a80546001600160a01b038085166001600160a01b03199283168117909355608b805491851691909216179055604080516315ab88c960e31b8152905163ad5c4648916004808201926020929091908290030181865afa158015611aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0e9190615b0f565b608c80546001600160a01b0319166001600160a01b03929092169190911790555050565b609b5460ff161580611b535750336000908152609c602052604090205460ff165b611b6f5760405162461bcd60e51b8152600401611072906159cf565b336000908152609a602052604090205460ff16611b9e5760405162461bcd60e51b815260040161107290615a71565b6033546001600160a01b03163314611bd257609054811115611bd25760405162461bcd60e51b815260040161107290615b2c565b609954611942906001600160a01b03168383600080613acc565b609b5460ff161580611c0d5750336000908152609c602052604090205460ff165b611c295760405162461bcd60e51b8152600401611072906159cf565b336000908152609a602052604090205460ff16611c585760405162461bcd60e51b815260040161107290615a71565b6033546001600160a01b03163314611c8c57609054811115611c8c5760405162461bcd60e51b815260040161107290615b2c565b609954611ca79033906001600160a01b031683600080613acc565b50565b6033546001600160a01b03163314611cd45760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03166000908152606860205260409020805460ff19166001179055565b600061140d836000846129bf565b6033546001600160a01b03163314611d305760405162461bcd60e51b8152600401611072906159ef565b604051339082156108fc029083906000818181858888f19350505050158015611942573d6000803e3d6000fd5b6033546001600160a01b03163314611d875760405162461bcd60e51b8152600401611072906159ef565b608d80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314611dd35760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b0382166000818152609c6020908152604091829020805460ff19168515159081179091558251938452908301527fe5532272281c5b79ae737a18f13faaf65c6d39fbebe8e5d5c9d842475d5d36fb91015b60405180910390a15050565b6033546001600160a01b03163314611e615760405162461bcd60e51b8152600401611072906159ef565b611e7087878787878787613c3a565b5050505050505050565b6033546001600160a01b03163314611ea45760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03811660009081526069602052604090205460ff1615611edd5760405162461bcd60e51b815260040161107290615a71565b6001600160a01b03811660009081526065602052604090205415611f70576001600160a01b038116600090815260656020526040902054611f1d90611414565b6001600160a01b0382166000908152606660205260409020819055609754611f4491613e0e565b6097556001600160a01b038116600090815260656020526040902054609654611f6c91613e0e565b6096555b6001600160a01b03166000818152606960205260408120805460ff19166001908117909155606c805491820181559091527f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe0160180546001600160a01b0319169091179055565b6033546001600160a01b031633146120005760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b0382166000818152609d6020908152604091829020805460ff19168515159081179091558251938452908301527f7bbec7f46aba5f3c18434ab4aba04fa47673a668c615724e7344386e8b62e02c9101611e2b565b6033546001600160a01b031633146120865760405162461bcd60e51b8152600401611072906159ef565b609355565b6033546001600160a01b031633146120b55760405162461bcd60e51b8152600401611072906159ef565b608f80546001600160a01b0319166001600160a01b038316179055611ca781611e7a565b6001600160a01b03811660009081526069602052604081205460ff161561211657506001600160a01b031660009081526066602052604090205490565b6001600160a01b03821660009081526065602052604090205461108a90611414565b6033546001600160a01b031633146121625760405162461bcd60e51b8152600401611072906159ef565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031633146121d65760405162461bcd60e51b8152600401611072906159ef565b608954829081106121f95760405162461bcd60e51b815260040161107290615a24565b6001600160a01b03821661221f5760405162461bcd60e51b815260040161107290615b74565b61222882611e7a565b816089848154811061223c5761223c615a5b565b906000526020600020906007020160050160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826000141561229657607980546001600160a01b0319166001600160a01b0384161790555b505050565b600054610100900460ff16806122b05750303b155b806122be575060005460ff16155b6122da5760405162461bcd60e51b815260040161107290615bb9565b600054610100900460ff161580156122fc576000805461ffff19166101011790555b612304613e6d565b61230c613ee1565b612314613f99565b8015611ca7576000805461ff001916905550565b6033546001600160a01b031633146123525760405162461bcd60e51b8152600401611072906159ef565b608954829081106123755760405162461bcd60e51b815260040161107290615a24565b6001600160a01b03821661239b5760405162461bcd60e51b815260040161107290615b74565b6123a482611e7a565b81608984815481106123b8576123b8615a5b565b906000526020600020906007020160060160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826000141561229657607a80546001600160a01b0384166001600160a01b0319909116179055505050565b6033546001600160a01b031633146124425760405162461bcd60e51b8152600401611072906159ef565b608f805460ff60a01b1916600160a01b17905560945447908110156124bc5760405162461bcd60e51b815260206004820152602a60248201527f424e422062616c616e6365206973206e6f7420726561636820666f722053264560448201526908151a1c995cda1bdb1960b21b6064820152608401611072565b5060945460006124cd8260026139a8565b905060006124db8383613a70565b6040516370a0823160e01b815233600482015290915060009030906370a0823190602401602060405180830381865afa15801561251c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125409190615c07565b905061254b83614170565b6040516370a0823160e01b815233600482015260009030906370a0823190602401602060405180830381865afa158015612589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ad9190615c07565b905060006125bb8284613a70565b90506125c83330836132bf565b6040516323b872dd60e01b8152336004820152306024820181905260448201839052906323b872dd906064016020604051808303816000875af1158015612613573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126379190615c20565b506126428185614419565b60408051868152602081018390529081018590527f08261edc7b257da79c22afdc1c7064b198c7abe8fdd21070ac0b55e0351804a39060600160405180910390a15050608f805460ff60a01b1916905550505050565b6033546001600160a01b031633146126c25760405162461bcd60e51b8152600401611072906159ef565b608954829081106126e55760405162461bcd60e51b815260040161107290615a24565b6000608984815481106126fa576126fa615a5b565b60009182526020918290206040805160e0810182526007909302909101805483526001810154938301939093526002830154908201526003820154606082015260048201546080820181905260058301546001600160a01b0390811660a084015260069093015490921660c0820152915061277790829085613a03565b826089858154811061278b5761278b615a5b565b60009182526020909120600460079092020101558361164c57505060785550565b606060728054610faf9061599a565b6033546001600160a01b031633146127e55760405162461bcd60e51b8152600401611072906159ef565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015612832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122969190615c20565b6000611086338484613495565b81604051806060016040528060298152602001615ec9602991396001600160a01b0382166000908152606a6020526040902054819060ff16156128b95760405162461bcd60e51b81526004016110729190615678565b50608d546001600160a01b031661291d5760405162461bcd60e51b815260206004820152602260248201527f536166656d6f6f6e3a204d6967726174696f6e206973206e6f74207374617274604482015261195960f21b6064820152608401611072565b608d546001600160a01b0316336001600160a01b0316146129785760405162461bcd60e51b815260206004820152601560248201527414d859995b5bdbdb8e88139bdd08105b1b1bddd959605a1b6044820152606401611072565b61164c84846144e7565b6033546001600160a01b031633146129ac5760405162461bcd60e51b8152600401611072906159ef565b609b805460ff1916911515919091179055565b6000606d54841115612a135760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e74206d757374206265206c657373207468616e20737570706c79006044820152606401611072565b81612a2e576000612a248585614557565b51915061140d9050565b6000612a3a8585614557565b60200151915061140d9050565b6033546001600160a01b03163314612a715760405162461bcd60e51b8152600401611072906159ef565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314612abd5760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03166000908152606a60205260409020805460ff19169055565b6033546001600160a01b03163314612b085760405162461bcd60e51b8152600401611072906159ef565b612b29612710612b2383606d5461466a90919063ffffffff16565b906139a8565b60905550565b6033546001600160a01b03163314612b595760405162461bcd60e51b8152600401611072906159ef565b60895482908110612b7c5760405162461bcd60e51b815260040161107290615a24565b600060898481548110612b9157612b91615a5b565b60009182526020918290206040805160e0810182526007909302909101805483526001810154938301939093526002830154908201526003820154606082018190526004830154608083015260058301546001600160a01b0390811660a084015260069093015490921660c08201529150612c0e90829085613a03565b8260898581548110612c2257612c22615a5b565b60009182526020909120600360079092020101558361164c57505060775550565b6033546001600160a01b03163314612c6d5760405162461bcd60e51b8152600401611072906159ef565b8060005b8181101561164c576000848483818110612c8d57612c8d615a5b565b9050602002016020810190612ca2919061570e565b6001600160a01b03811660009081526098602052604090205490915060ff16612ccb5750612d21565b6001600160a01b038116600081815260986020908152604091829020805460ff1916905590519182527fe2c466310358d7b1b0084cd125246685e6901a43cb196a7231cac996791f037f910160405180910390a1505b80612d2b81615af4565b915050612c71565b6033546001600160a01b03163314612d5d5760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03166000908152606860205260409020805460ff19169055565b6033546001600160a01b03163314612da85760405162461bcd60e51b8152600401611072906159ef565b608a80546001600160a01b0319166001600160a01b038316908117909155604080516315ab88c960e31b8152905163ad5c4648916004808201926020929091908290030181865afa158015612e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e259190615b0f565b608c80546001600160a01b0319166001600160a01b03928316179055608a546040805163c45a015560e01b81529051919092169163c45a01559160048083019260209291908290030181865afa158015612e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea79190615b0f565b608c54604051630edef2e760e31b815230600482018190526001600160a01b03928316602483015260448201529116906376f79738906064016020604051808303816000875af1158015612eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f239190615b0f565b608b80546001600160a01b0319166001600160a01b039290921691909117905550565b6033546001600160a01b03163314612f705760405162461bcd60e51b8152600401611072906159ef565b60895482908110612f935760405162461bcd60e51b815260040161107290615a24565b600060898481548110612fa857612fa8615a5b565b60009182526020918290206040805160e0810182526007909302909101805483526001810154938301849052600281015491830191909152600381015460608301526004810154608083015260058101546001600160a01b0390811660a08401526006909101541660c0820152915061302390829085613a03565b826089858154811061303757613037615a5b565b60009182526020909120600160079092020101558361164c57505060755550565b6033546001600160a01b031633146130825760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b0381166130e75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611072565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b0316331461316d5760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03166000908152606a60209081526040808320805460ff19166001179055606b909152812055565b6033546001600160a01b031633146131c65760405162461bcd60e51b8152600401611072906159ef565b8060005b8181101561164c5760008484838181106131e6576131e6615a5b565b90506020020160208101906131fb919061570e565b6001600160a01b03811660009081526098602052604090205490915060ff1615613225575061327e565b6001600160a01b038116600081815260986020908152604091829020805460ff1916600117905590519182527fcf9d8a4ed16c4e921c6462e01033caab94999c1064e6926f765455d51fae70e4910160405180910390a1505b8061328881615af4565b9150506131ca565b6033546001600160a01b031633146132ba5760405162461bcd60e51b8152600401611072906159ef565b609455565b82604051806060016040528060268152602001615e83602691396001600160a01b0382166000908152606a6020526040902054819060ff16156133155760405162461bcd60e51b81526004016110729190615678565b5083604051806060016040528060288152602001615e10602891396001600160a01b0382166000908152606a6020526040902054819060ff161561336c5760405162461bcd60e51b81526004016110729190615678565b506001600160a01b0387166133cf5760405162461bcd60e51b8152602060048201526024808201527f42455032303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401611072565b6001600160a01b0386166134305760405162461bcd60e51b815260206004820152602260248201527f42455032303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401611072565b6001600160a01b038781166000818152606760209081526040808320948b168084529482529182902089905590518881527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b60408051808201825260208082527f536166656d6f6f6e3a204164647265737320697320626c61636b6c697374656481830152336000818152606a90925292902054819060ff16156134fa5760405162461bcd60e51b81526004016110729190615678565b5084604051806060016040528060258152602001615deb602591396001600160a01b0382166000908152606a6020526040902054819060ff16156135515760405162461bcd60e51b81526004016110729190615678565b5085604051806060016040528060238152602001615e60602391396001600160a01b0382166000908152606a6020526040902054819060ff16156135a85760405162461bcd60e51b81526004016110729190615678565b5033803b63ffffffff811615613660576001600160a01b0382166000908152606b60205260409020548061365e576000839050806001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015613635575060408051601f3d908101601f1916820190925261363291810190615b0f565b60015b61363e5761365c565b506001600160a01b0384166000908152606b60205260409020600190555b505b505b506001600160a01b038a166136c55760405162461bcd60e51b815260206004820152602560248201527f42455032303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401611072565b6001600160a01b0389166137275760405162461bcd60e51b815260206004820152602360248201527f42455032303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401611072565b600088116137895760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401611072565b6137938a8a6146e9565b6137af5760405162461bcd60e51b8152600401611072906159cf565b6033546001600160a01b038b81169116148015906137db57506033546001600160a01b038a8116911614155b15613802576090548811156138025760405162461bcd60e51b815260040161107290615b2c565b600061380d306120d9565b9050609054811061381d57506090545b6093548110801590819061383b5750608f54600160a01b900460ff16155b801561384e5750609554610100900460ff165b801561387357506001600160a01b038c1660009081526098602052604090205460ff16155b801561389857506001600160a01b038b1660009081526098602052604090205460ff16155b156138ab5760935491506138ab826147a2565b6001600160a01b038c1660009081526068602052604090205460019060ff16806138ed57506001600160a01b038c1660009081526068602052604090205460ff165b156138f6575060005b6000811561393157506001600160a01b038d166000818152606b60205260409020549033146139315750336000908152606b60205260409020545b61393e8e8e8e8486613acc565b5050505050505050505050505050565b600081848411156139725760405162461bcd60e51b81526004016110729190615678565b5061397d8385615aa8565b949350505050565b60008060006139926147ce565b90925090506139a182826139a8565b9250505090565b60008082116139f95760405162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f0000000000006044820152606401611072565b61140d8284615c53565b6000613a4c82613a4085613a468860800151613a408a60600151613a408c60400151613a408e602001518f60000151613e0e90919063ffffffff16565b90613e0e565b90613a70565b905060705481111561164c5760405162461bcd60e51b815260040161107290615c67565b600082821115613ac25760405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606401611072565b61140d8284615aa8565b80613ad957613ad9614864565b6001600160a01b03851660009081526069602052604090205460ff16158015613b1b57506001600160a01b03841660009081526069602052604090205460ff16155b15613b3157613b2c85858585614972565b613c26565b6001600160a01b03851660009081526069602052604090205460ff168015613b7257506001600160a01b03841660009081526069602052604090205460ff16155b15613b8357613b2c85858585614a58565b6001600160a01b03851660009081526069602052604090205460ff16158015613bc457506001600160a01b03841660009081526069602052604090205460ff165b15613bd557613b2c85858585614b0a565b6001600160a01b03851660009081526069602052604090205460ff168015613c1557506001600160a01b03841660009081526069602052604090205460ff165b15613c2657613c2685858585614bb8565b80613c3357613c33614d03565b5050505050565b613c42615590565b6000613c916040518060e001604052808b81526020018a8152602001898152602001888152602001878152602001866001600160a01b03168152602001856001600160a01b0316815250614d19565b9050613c9c84611e7a565b613ca583611e7a565b6089805460018101825560009190915281517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266cb60079092029182015560208201517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266cc82015560408201517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266cd82015560608201517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266ce82015560808201517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266cf82015560a08201517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266d0820180546001600160a01b03199081166001600160a01b039384161790915560c08401517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266d190930180549091169290911691909117905598975050505050505050565b600080613e1b8385615cad565b90508381101561140d5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401611072565b600054610100900460ff1680613e825750303b155b80613e90575060005460ff16155b613eac5760405162461bcd60e51b815260040161107290615bb9565b600054610100900460ff16158015612314576000805461ffff19166101011790558015611ca7576000805461ff001916905550565b600054610100900460ff1680613ef65750303b155b80613f04575060005460ff16155b613f205760405162461bcd60e51b815260040161107290615bb9565b600054610100900460ff16158015613f42576000805461ffff19166101011790555b603380546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611ca7576000805461ff001916905550565b600054610100900460ff1680613fae5750303b155b80613fbc575060005460ff16155b613fd85760405162461bcd60e51b815260040161107290615bb9565b600054610100900460ff16158015613ffa576000805461ffff19166101011790555b6040805180820190915260088082526729b0b332a6b7b7b760c11b6020909201918252614029916071916155df565b506040805180820190915260038082526253464d60e81b6020909201918252614054916072916155df565b506073805460ff19166009179055683635c9adc5dea00000606d81905561407d90600019615cc5565b61408990600019615aa8565b606e556103e8607055674563918244f400006090556706f05b59d3b20000609155608f80546001600160a01b03191661dead1790556140c53390565b608e80546001600160a01b0319166001600160a01b03928316908117909155606e5460009182526065602090815260408084209290925560335490931682526068909252818120805460ff199081166001908117909255308352929091208054909216179055614133614d81565b606d546040519081523390600090600080516020615ea98339815191529060200160405180910390a38015611ca7576000805461ff001916905550565b6040805160028082526060820183526000926020830190803683375050608a54604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa1580156141da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141fe9190615b0f565b8160008151811061421157614211615a5b565b60200260200101906001600160a01b031690816001600160a01b031681525050308160018151811061424557614245615a5b565b6001600160a01b03928316602091820292909201810191909152608a546040805163c6b06e2d60e01b81529051600094929092169263c6b06e2d926004808401938290030181865afa15801561429f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142c39190615b0f565b90506142ec6142da6033546001600160a01b031690565b608a546001600160a01b0316856132bf565b604051632254285d60e11b81526000906001600160a01b038316906344a850ba9061431d9087908790600401615d1d565b602060405180830381865afa15801561433a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061435e9190615c07565b905060006040518060a00160405280868152602001600081526020018581526020016143926033546001600160a01b031690565b6001600160a01b03168152602001428152509050826001600160a01b031663a351408783876143c19190615cad565b83856040518463ffffffff1660e01b81526004016143e0929190615d87565b6000604051808303818588803b1580156143f957600080fd5b505af115801561440d573d6000803e3d6000fd5b50505050505050505050565b608a546144319030906001600160a01b0316846132bf565b608a546001600160a01b031663f305d71982308560008061445a6033546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af11580156144c2573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190613c339190615da9565b6001600160a01b03821661453d5760405162461bcd60e51b815260206004820152601f60248201527f42455032303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401611072565b608e54611942906001600160a01b03168383600080613acc565b6145a66040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006145b28484614ea1565b905060006145e18260a00151613a408460800151613a4086602001518760400151613e0e90919063ffffffff16565b905060008060006145ff888660600151866145fa613985565b61500c565b92509250925060405180610120016040528084815260200183815260200182815260200186600001518152602001866020015181526020018660400151815260200186606001518152602001866080015181526020018660a001518152509550505050505092915050565b6000826146795750600061108a565b60006146858385615abf565b9050826146928583615c53565b1461140d5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401611072565b609b5460009060ff166146fe5750600161108a565b6001600160a01b0383166000908152609c602052604090205460ff16801561473e57506001600160a01b0382166000908152609c602052604090205460ff165b1561474b5750600161108a565b6001600160a01b0383166000908152609c602052604090205460ff16801561478c57506001600160a01b0383166000908152609d602052604090205460ff16155b156147995750600161108a565b50600092915050565b608f805460ff60a01b1916600160a01b1790556147be8161505c565b50608f805460ff60a01b19169055565b600080606e5460965411806147e65750606d54609754115b156147f7575050606e54606d549091565b6000614810609654606e54613a7090919063ffffffff16565b9050600061482b609754606d54613a7090919063ffffffff16565b9050614844606d54606e546139a890919063ffffffff16565b82101561485b57606e54606d549350935050509091565b90939092509050565b608960008154811061487857614878615a5b565b6000918252602082206007909102018054607b556001810154607c556002810154607d556003810154607e556004810154607f556005810154608080546001600160a01b03199081166001600160a01b039384161790915560069092015460818054909316911617905560898054608292906148f6576148f6615a5b565b6000918252602090912082546007909202019081556001808301549082015560028083015490820155600380830154908201556004808301549082015560058083015490820180546001600160a01b03199081166001600160a01b03938416179091556006938401549390920180549092169216919091179055565b600061497e8383614557565b80516001600160a01b0387166000908152606560205260409020549192506149a69190613a70565b6001600160a01b03808716600090815260656020908152604080832094909455840151918716815291909120546149dc91613e0e565b6001600160a01b038516600090815260656020526040902055614a00858284615282565b614a1281604001518260c0015161531c565b836001600160a01b0316856001600160a01b0316600080516020615ea98339815191528360600151604051614a4991815260200190565b60405180910390a35050505050565b6000614a648383614557565b6001600160a01b038616600090815260666020526040902054909150614a8a9084613a70565b6001600160a01b03808716600090815260666020908152604080832094909455848101519288168252606590529190912054614ac591613e0e565b6001600160a01b038516600090815260656020526040902055609754614aeb9084613a70565b6097558051609654614afc91613a70565b609655614a00858284615282565b6000614b168383614557565b80516001600160a01b038716600090815260656020526040902054919250614b3e9190613a70565b6001600160a01b0380871660009081526065602090815260408083209490945560608501519288168252606690529190912054614b7a91613e0e565b6001600160a01b0385166000908152606660205260409020556060810151609754614ba491613e0e565b6097556020810151609654614afc91613e0e565b6000614bc48383614557565b6001600160a01b038616600090815260666020526040902054909150614bea9084613a70565b6001600160a01b0380871660009081526066602052604080822093909355606084015191871681529190912054614c2091613e0e565b6001600160a01b0385166000908152606660205260409020556060810151831015614c70576000838260600151614c579190615aa8565b609754909150614c679082613e0e565b60975550614c97565b6000816060015184614c829190615aa8565b609754909150614c929082613a70565b609755505b805160208201511115614cd05780516020820151600091614cb791615aa8565b609654909150614cc79082613e0e565b60965550614cf8565b60208101518151600091614ce391615aa8565b609654909150614cf39082613a70565b609655505b614a00858284615282565b607b60896000815481106148f6576148f6615a5b565b614d21615590565b6000614d568360800151613a408560600151613a408760400151613a4089602001518a60000151613e0e90919063ffffffff16565b9050607054811115614d7a5760405162461bcd60e51b815260040161107290615c67565b5090919050565b600054610100900460ff1680614d965750303b155b80614da4575060005460ff16155b614dc05760405162461bcd60e51b815260040161107290615bb9565b600054610100900460ff16158015614de2576000805461ffff19166101011790555b614df660006101f480600080600080613c3a565b8051607455602081015160755560408101516076556060810151607755608081015160785560a0810151607980546001600160a01b03199081166001600160a01b039384161790915560c090920151607a80549093169116179055614e6360328060646000808080613c3a565b50614e776032806064806000806000613c3a565b50614e8c6064607d8060966000806000613c3a565b508015611ca7576000805461ff001916905550565b614eda6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060898381548110614eef57614eef615a5b565b600091825260208083206040805160e081018252600790940290910180548452600181015484840152600281015484830152600381015460608501526004810154608085015260058101546001600160a01b0390811660a08601526006909101541660c080850191909152815190810190915283815282519294509190820190614f7a908890615340565b8152602001614f8d878560200151615340565b8152602001614fa0878560400151615340565b8152602001614fb3878560600151615340565b8152602001614fc6878560800151615340565b81525090506150028160a00151613a468360800151613a468560400151613a468760600151613a4689602001518e613a7090919063ffffffff16565b8152949350505050565b600080808061501b888661466a565b90506000615029888761466a565b90506000615037888861466a565b9050600061504982613a468686613a70565b939b939a50919850919650505050505050565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061509157615091615a5b565b6001600160a01b03928316602091820292909201810191909152608a54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156150ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061510e9190615b0f565b8160018151811061512157615121615a5b565b6001600160a01b03928316602091820292909201810191909152608a546040805163c6b06e2d60e01b81529051600094929092169263c6b06e2d926004808401938290030181865afa15801561517b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061519f9190615b0f565b608a549091506151ba9030906001600160a01b0316856132bf565b604051632254285d60e11b81526000906001600160a01b038316906344a850ba906151eb9087908790600401615d1d565b602060405180830381865afa158015615208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061522c9190615c07565b6040805160a081018252868152600060208201528082018690523060608201524260808201529051623aa70160e61b8152919250906001600160a01b03841690630ea9c0409084906143e0908590600401615dd7565b615291838360a001513061535f565b6152cf838360800151608984815481106152ad576152ad615a5b565b60009182526020909120600560079092020101546001600160a01b031661535f565b61530d838360e00151608984815481106152eb576152eb615a5b565b60009182526020909120600660079092020101546001600160a01b031661535f565b61229683836101000151615477565b606e546153299083613a70565b606e55606f546153399082613e0e565b606f555050565b60008161534f5750600061108a565b61140d612710612b23858561466a565b6001600160a01b03811661537257505050565b8161537c57505050565b6000615386613985565b90506000615394848361466a565b6001600160a01b0384166000908152606560205260409020549091506153ba9082613e0e565b6001600160a01b03841660009081526065602090815260408083209390935560699052205460ff1615615444576001600160a01b03831660009081526066602052604090205461540a9085613e0e565b6001600160a01b0384166000908152606660205260409020556097546154309085613e0e565b6097556096546154409082613e0e565b6096555b826001600160a01b0316856001600160a01b0316600080516020615ea983398151915286604051614a4991815260200190565b80615480575050565b608f546001600160a01b03166000908152606660205260409020546154a59082613e0e565b608f546001600160a01b03166000908152606660205260408120919091556154cb613985565b6154d59083615abf565b608f546001600160a01b03166000908152606560205260409020549091506154fd9082613e0e565b608f80546001600160a01b03908116600090815260656020908152604080832095909555925490911681526069909152205460ff1615615558576096546155449082613e0e565b6096556097546155549083613e0e565b6097555b608f546040518381526001600160a01b0391821691851690600080516020615ea98339815191529060200160405180910390a3505050565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b8280546155eb9061599a565b90600052602060002090601f01602090048101928261560d5760008555615653565b82601f1061562657805160ff1916838001178555615653565b82800160010185558215615653579182015b82811115615653578251825591602001919060010190615638565b5061565f929150615663565b5090565b5b8082111561565f5760008155600101615664565b600060208083528351808285015260005b818110156156a557858101830151858201604001528201615689565b818111156156b7576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114611ca757600080fd5b600080604083850312156156f557600080fd5b8235615700816156cd565b946020939093013593505050565b60006020828403121561572057600080fd5b813561140d816156cd565b60006020828403121561573d57600080fd5b5035919050565b60008060006060848603121561575957600080fd5b8335615764816156cd565b92506020840135615774816156cd565b929592945050506040919091013590565b6000806040838503121561579857600080fd5b50508035926020909101359150565b8015158114611ca757600080fd5b6000602082840312156157c757600080fd5b813561140d816157a7565b600080604083850312156157e557600080fd5b82356157f0816156cd565b91506020830135615800816157a7565b809150509250929050565b6000806040838503121561581e57600080fd5b8235615829816156cd565b91506020830135615800816156cd565b6000806040838503121561584c57600080fd5b823591506020830135615800816157a7565b600080600080600080600060e0888a03121561587957600080fd5b873596506020880135955060408801359450606088013593506080880135925060a08801356158a7816156cd565b915060c08801356158b7816156cd565b8091505092959891949750929550565b600080604083850312156158da57600080fd5b823591506020830135615800816156cd565b60008060006060848603121561590157600080fd5b8335925060208401359150604084013561591a816157a7565b809150509250925092565b6000806020838503121561593857600080fd5b823567ffffffffffffffff8082111561595057600080fd5b818501915085601f83011261596457600080fd5b81358181111561597357600080fd5b8660208260051b850101111561598857600080fd5b60209290920196919550909350505050565b600181811c908216806159ae57607f821691505b6020821081141561128f57634e487b7160e01b600052602260045260246000fd5b60208082526006908201526514185d5cd95960d21b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f536166656d6f6f6e3a20496e76616c6964207469657220696e64657800000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b602080825260079082015266125b9d985b1a5960ca1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015615aba57615aba615a92565b500390565b6000816000190483118215151615615ad957615ad9615a92565b500290565b634e487b7160e01b600052603160045260246000fd5b6000600019821415615b0857615b08615a92565b5060010190565b600060208284031215615b2157600080fd5b815161140d816156cd565b60208082526028908201527f5472616e7366657220616d6f756e74206578636565647320746865206d6178546040820152673c20b6b7bab73a1760c11b606082015260800190565b60208082526025908201527f536166656d6f6f6e3a2041646472657373205a65726f206973206e6f7420616c6040820152641b1bddd95960da1b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215615c1957600080fd5b5051919050565b600060208284031215615c3257600080fd5b815161140d816157a7565b634e487b7160e01b600052601260045260246000fd5b600082615c6257615c62615c3d565b500490565b60208082526026908201527f536166656d6f6f6e3a2046656573206578636565646564206d6178206c696d696040820152653a30ba34b7b760d11b606082015260800190565b60008219821115615cc057615cc0615a92565b500190565b600082615cd457615cd4615c3d565b500690565b600081518084526020808501945080840160005b83811015615d125781516001600160a01b031687529582019590820190600101615ced565b509495945050505050565b82815260406020820152600061397d6040830184615cd9565b80518252602081015160208301526000604082015160a06040850152615d5f60a0850182615cd9565b6060848101516001600160a01b03169086015260809384015193909401929092525090919050565b604081526000615d9a6040830185615d36565b90508260208301529392505050565b600080600060608486031215615dbe57600080fd5b8351925060208401519150604084015190509250925092565b60208152600061140d6020830184615d3656fe536166656d6f6f6e3a2046726f6d206164647265737320697320626c61636b6c6973746564536166656d6f6f6e3a205370656e646572206164647265737320697320626c61636b6c697374656442455032303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365536166656d6f6f6e3a20546f206164647265737320697320626c61636b6c6973746564536166656d6f6f6e3a204f776e6572206164647265737320697320626c61636b6c6973746564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef536166656d6f6f6e3a204d69677261746564206163636f756e7420697320626c61636b6c6973746564536166656d6f6f6e3a2053656c6563746564206163636f756e7420697320696e20626c61636b6c697374a264697066735822122016a4080195a5c05fbd4c8d65dfe7057440e9458849e9f9d7724446f8ab159cae64736f6c634300080b0033",
  "deployedBytecode": "0x60806040526004361061046c5760003560e01c8063674a31121161024a578063bd3900c011610139578063dd62ed3e116100b6578063f2fde38b1161007a578063f2fde38b14610ee7578063f3290d7514610f07578063f3bf2f6114610f27578063fe575a8714610f47578063fff3e1ba14610f8057600080fd5b8063dd62ed3e14610dc5578063dfd66cb314610e0b578063ea2f0b3714610e87578063ee28088114610ea7578063f2d58c2314610ec757600080fd5b8063d0124920116100fd578063d012492014610d15578063d40cf65914610d45578063d543dbeb14610d65578063d66329b014610d85578063dbc914c714610da557600080fd5b8063bd3900c014610c65578063bedb86fb14610c85578063bf26646914610ca5578063bf610d7e14610cc5578063c4f8414614610cf557600080fd5b80638af319c7116101c757806395d89b411161018b57806395d89b4114610bd65780639e281a9814610beb578063a9059cbb14610c0b578063ad68ebf714610c2b578063b187bd2614610c4b57600080fd5b80638af319c714610b435780638d50d49914610b635780638da5cb5b14610b785780638dd9500214610b965780638fc3d4b814610bb657600080fd5b80637ed948f71161020e5780637ed948f714610a8f578063810315b914610aaf5780638129fc1c14610adf57806388f8202014610af45780638abec60614610b2d57600080fd5b8063674a311214610a045780636bd89cdd14610a2457806370a0823114610a44578063715018a614610a645780637d1db4a514610a7957600080fd5b80633685d4191161036657806349bd5a5e116102e35780635342acb4116102a75780635342acb41461095657806355724b3a1461098f57806360d0eb73146109ae5780636130d38f146109ce5780636531c58c146109ee57600080fd5b806349bd5a5e146108b55780634a581829146108d55780634a74bb02146108f55780634ffc14251461091657806352390c021461093657600080fd5b806342966c681161032a57806342966c6814610815578063437823ec146108355780634549b03914610855578063459c979b146108755780634732a7dc1461089557600080fd5b80633685d4191461075d57806339aa1bba1461077d5780633af32abf1461079d57806340b28c2f146107d557806340c10f19146107f557600080fd5b8063200c7295116103f457806330b263ba116103b857806330b263ba146106bb578063313ce567146106db57806332c2d90c146106fd57806332e6cd411461071d57806334dd8da91461073d57600080fd5b8063200c72951461060b57806323b872dd1461062b5780632d8381191461064b5780632f3aaeb21461066b578063301273341461069b57600080fd5b806313114a9d1161043b57806313114a9d14610514578063132af75c14610529578063140c57591461053e5780631694505e146105be57806318160ddd146105f657600080fd5b806306fdde0314610478578063095ea7b3146104a357806310844953146104d357806311b32601146104f557600080fd5b3661047357005b600080fd5b34801561048457600080fd5b5061048d610fa0565b60405161049a9190615678565b60405180910390f35b3480156104af57600080fd5b506104c36104be3660046156e2565b611032565b604051901515815260200161049a565b3480156104df57600080fd5b506104f36104ee36600461570e565b611090565b005b34801561050157600080fd5b506089545b60405190815260200161049a565b34801561052057600080fd5b50606f54610506565b34801561053557600080fd5b506104f3611199565b34801561054a57600080fd5b5061055e61055936600461572b565b6111e1565b60405161049a9190815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301516001600160a01b039081169183019190915260c092830151169181019190915260e00190565b3480156105ca57600080fd5b50608a546105de906001600160a01b031681565b6040516001600160a01b03909116815260200161049a565b34801561060257600080fd5b50606d54610506565b34801561061757600080fd5b506104f36106263660046156e2565b611295565b34801561063757600080fd5b506104c3610646366004615744565b6113aa565b34801561065757600080fd5b5061050661066636600461572b565b611414565b34801561067757600080fd5b506104c361068636600461570e565b609c6020526000908152604090205460ff1681565b3480156106a757600080fd5b5061055e6106b636600461570e565b611491565b3480156106c757600080fd5b506104f36106d6366004615785565b61153a565b3480156106e757600080fd5b5060735460405160ff909116815260200161049a565b34801561070957600080fd5b506104f36107183660046157b5565b611652565b34801561072957600080fd5b506099546105de906001600160a01b031681565b34801561074957600080fd5b506104f36107583660046157d2565b6116cf565b34801561076957600080fd5b506104f361077836600461570e565b611724565b34801561078957600080fd5b506104f3610798366004615785565b611946565b3480156107a957600080fd5b506104c36107b836600461570e565b6001600160a01b03166000908152606b6020526040902054151590565b3480156107e157600080fd5b506104f36107f036600461580b565b611a57565b34801561080157600080fd5b506104f36108103660046156e2565b611b32565b34801561082157600080fd5b506104f361083036600461572b565b611bec565b34801561084157600080fd5b506104f361085036600461570e565b611caa565b34801561086157600080fd5b50610506610870366004615839565b611cf8565b34801561088157600080fd5b506104f361089036600461572b565b611d06565b3480156108a157600080fd5b506104f36108b036600461570e565b611d5d565b3480156108c157600080fd5b50608b546105de906001600160a01b031681565b3480156108e157600080fd5b506104f36108f03660046157d2565b611da9565b34801561090157600080fd5b50608f546104c390600160a81b900460ff1681565b34801561092257600080fd5b506104f361093136600461585e565b611e37565b34801561094257600080fd5b506104f361095136600461570e565b611e7a565b34801561096257600080fd5b506104c361097136600461570e565b6001600160a01b031660009081526068602052604090205460ff1690565b34801561099b57600080fd5b506095546104c390610100900460ff1681565b3480156109ba57600080fd5b50608d546001600160a01b031615156104c3565b3480156109da57600080fd5b506104f36109e93660046157d2565b611fd6565b3480156109fa57600080fd5b5061050660935481565b348015610a1057600080fd5b506104f3610a1f36600461572b565b61205c565b348015610a3057600080fd5b506104f3610a3f36600461570e565b61208b565b348015610a5057600080fd5b50610506610a5f36600461570e565b6120d9565b348015610a7057600080fd5b506104f3612138565b348015610a8557600080fd5b5061050660905481565b348015610a9b57600080fd5b506104f3610aaa3660046158c7565b6121ac565b348015610abb57600080fd5b506104c3610aca36600461570e565b609d6020526000908152604090205460ff1681565b348015610aeb57600080fd5b506104f361229b565b348015610b0057600080fd5b506104c3610b0f36600461570e565b6001600160a01b031660009081526069602052604090205460ff1690565b348015610b3957600080fd5b5061050660945481565b348015610b4f57600080fd5b506104f3610b5e3660046158c7565b612328565b348015610b6f57600080fd5b506104f3612418565b348015610b8457600080fd5b506033546001600160a01b03166105de565b348015610ba257600080fd5b50608c546105de906001600160a01b031681565b348015610bc257600080fd5b506104f3610bd1366004615785565b612698565b348015610be257600080fd5b5061048d6127ac565b348015610bf757600080fd5b506104f3610c063660046156e2565b6127bb565b348015610c1757600080fd5b506104c3610c263660046156e2565b612856565b348015610c3757600080fd5b506104f3610c463660046156e2565b612863565b348015610c5757600080fd5b50609b546104c39060ff1681565b348015610c7157600080fd5b50608f546105de906001600160a01b031681565b348015610c9157600080fd5b506104f3610ca03660046157b5565b612982565b348015610cb157600080fd5b50610506610cc03660046158ec565b6129bf565b348015610cd157600080fd5b506104c3610ce036600461570e565b609a6020526000908152604090205460ff1681565b348015610d0157600080fd5b506104f3610d1036600461570e565b612a47565b348015610d2157600080fd5b506104c3610d3036600461570e565b60986020526000908152604090205460ff1681565b348015610d5157600080fd5b506104f3610d6036600461570e565b612a93565b348015610d7157600080fd5b506104f3610d8036600461572b565b612ade565b348015610d9157600080fd5b506104f3610da0366004615785565b612b2f565b348015610db157600080fd5b506104f3610dc0366004615925565b612c43565b348015610dd157600080fd5b50610506610de036600461580b565b6001600160a01b03918216600090815260676020908152604080832093909416825291909152205490565b348015610e1757600080fd5b50607454607554607654607754607854607954607a54610e469695949392916001600160a01b03908116911687565b60408051978852602088019690965294860193909352606085019190915260808401526001600160a01b0390811660a08401521660c082015260e00161049a565b348015610e9357600080fd5b506104f3610ea236600461570e565b612d33565b348015610eb357600080fd5b506104f3610ec236600461570e565b612d7e565b348015610ed357600080fd5b506104f3610ee2366004615785565b612f46565b348015610ef357600080fd5b506104f3610f0236600461570e565b613058565b348015610f1357600080fd5b506104f3610f2236600461570e565b613143565b348015610f3357600080fd5b506104f3610f42366004615925565b61319c565b348015610f5357600080fd5b506104c3610f6236600461570e565b6001600160a01b03166000908152606a602052604090205460ff1690565b348015610f8c57600080fd5b506104f3610f9b36600461572b565b613290565b606060718054610faf9061599a565b80601f0160208091040260200160405190810160405280929190818152602001828054610fdb9061599a565b80156110285780601f10610ffd57610100808354040283529160200191611028565b820191906000526020600020905b81548152906001019060200180831161100b57829003601f168201915b5050505050905090565b609b5460009060ff1615806110565750336000908152609c602052604090205460ff165b61107b5760405162461bcd60e51b8152600401611072906159cf565b60405180910390fd5b6110863384846132bf565b5060015b92915050565b6033546001600160a01b031633146110ba5760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03811661110c5760405162461bcd60e51b8152602060048201526019602482015278536166656d6f6f6e3a20496e76616c6964206164647265737360381b6044820152606401611072565b6001600160a01b0381166000908152606b602052604090205461117f5760405162461bcd60e51b815260206004820152602560248201527f536166656d6f6f6e3a204163636f756e74206973206e6f7420696e2077686974604482015264195b1a5cdd60da1b6064820152608401611072565b6001600160a01b03166000908152606b6020526040812055565b6033546001600160a01b031633146111c35760405162461bcd60e51b8152600401611072906159ef565b608f805460ff60a81b191690556095805461ff001916610100179055565b6111e9615590565b6089548290811061120c5760405162461bcd60e51b815260040161107290615a24565b6089838154811061121f5761121f615a5b565b60009182526020918290206040805160e081018252600790930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260058201546001600160a01b0390811660a083015260069092015490911660c082015291505b50919050565b6033546001600160a01b031633146112bf5760405162461bcd60e51b8152600401611072906159ef565b608954819081106112e25760405162461bcd60e51b815260040161107290615a24565b826040518060600160405280602a8152602001615ef2602a91396001600160a01b0382166000908152606a6020526040902054819060ff16156113385760405162461bcd60e51b81526004016110729190615678565b506001600160a01b03851661138b5760405162461bcd60e51b8152602060048201526019602482015278536166656d6f6f6e3a20496e76616c6964206164647265737360381b6044820152606401611072565b5050506001600160a01b039091166000908152606b6020526040902055565b60006113b7848484613495565b611409843361140485604051806060016040528060288152602001615e38602891396001600160a01b038a166000908152606760209081526040808320338452909152902054919061394e565b6132bf565b5060015b9392505050565b6000606e5482111561147b5760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201526965666c656374696f6e7360b01b6064820152608401611072565b6000611485613985565b905061140d83826139a8565b611499615590565b6001600160a01b0382166000908152606b60205260409020546089805490919081106114c7576114c7615a5b565b60009182526020918290206040805160e081018252600790930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260058201546001600160a01b0390811660a083015260069092015490911660c082015292915050565b6033546001600160a01b031633146115645760405162461bcd60e51b8152600401611072906159ef565b608954829081106115875760405162461bcd60e51b815260040161107290615a24565b60006089848154811061159c5761159c615a5b565b60009182526020918290206040805160e0810182526007909302909101805483526001810154938301939093526002830154908201819052600383015460608301526004830154608083015260058301546001600160a01b0390811660a084015260069093015490921660c0820152915061161990829085613a03565b826089858154811061162d5761162d615a5b565b60009182526020909120600260079092020101558361164c5760768390555b50505050565b6033546001600160a01b0316331461167c5760405162461bcd60e51b8152600401611072906159ef565b609580548215156101000261ff00199091161790556040517ef279ea7539cc7cc5311702e24242fe836f7f94e8e329be09530ade3dd254c3906116c490831515815260200190565b60405180910390a150565b6033546001600160a01b031633146116f95760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03919091166000908152609a60205260409020805460ff1916911515919091179055565b6033546001600160a01b0316331461174e5760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03811660009081526069602052604090205460ff166117865760405162461bcd60e51b815260040161107290615a71565b60005b606c5481101561194257816001600160a01b0316606c82815481106117b0576117b0615a5b565b6000918252602090912001546001600160a01b0316141561193057606c80546117db90600190615aa8565b815481106117eb576117eb615a5b565b600091825260209091200154606c80546001600160a01b03909216918390811061181757611817615a5b565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061184d613985565b6001600160a01b0383166000908152606660205260409020546118709190615abf565b6001600160a01b0383166000908152606560209081526040808320939093556066905220546097546118a191613a70565b6097556001600160a01b0382166000908152606560205260409020546096546118c991613a70565b6096556001600160a01b038216600090815260666020908152604080832083905560699091529020805460ff19169055606c80548061190a5761190a615ade565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b8061193a81615af4565b915050611789565b5050565b6033546001600160a01b031633146119705760405162461bcd60e51b8152600401611072906159ef565b608954829081106119935760405162461bcd60e51b815260040161107290615a24565b6000608984815481106119a8576119a8615a5b565b60009182526020918290206040805160e08101825260079093029091018054808452600182015494840194909452600281015491830191909152600381015460608301526004810154608083015260058101546001600160a01b0390811660a08401526006909101541660c08201529150611a2590829085613a03565b8260898581548110611a3957611a39615a5b565b60009182526020909120600790910201558361164c57505060745550565b6033546001600160a01b03163314611a815760405162461bcd60e51b8152600401611072906159ef565b608a80546001600160a01b038085166001600160a01b03199283168117909355608b805491851691909216179055604080516315ab88c960e31b8152905163ad5c4648916004808201926020929091908290030181865afa158015611aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0e9190615b0f565b608c80546001600160a01b0319166001600160a01b03929092169190911790555050565b609b5460ff161580611b535750336000908152609c602052604090205460ff165b611b6f5760405162461bcd60e51b8152600401611072906159cf565b336000908152609a602052604090205460ff16611b9e5760405162461bcd60e51b815260040161107290615a71565b6033546001600160a01b03163314611bd257609054811115611bd25760405162461bcd60e51b815260040161107290615b2c565b609954611942906001600160a01b03168383600080613acc565b609b5460ff161580611c0d5750336000908152609c602052604090205460ff165b611c295760405162461bcd60e51b8152600401611072906159cf565b336000908152609a602052604090205460ff16611c585760405162461bcd60e51b815260040161107290615a71565b6033546001600160a01b03163314611c8c57609054811115611c8c5760405162461bcd60e51b815260040161107290615b2c565b609954611ca79033906001600160a01b031683600080613acc565b50565b6033546001600160a01b03163314611cd45760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03166000908152606860205260409020805460ff19166001179055565b600061140d836000846129bf565b6033546001600160a01b03163314611d305760405162461bcd60e51b8152600401611072906159ef565b604051339082156108fc029083906000818181858888f19350505050158015611942573d6000803e3d6000fd5b6033546001600160a01b03163314611d875760405162461bcd60e51b8152600401611072906159ef565b608d80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314611dd35760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b0382166000818152609c6020908152604091829020805460ff19168515159081179091558251938452908301527fe5532272281c5b79ae737a18f13faaf65c6d39fbebe8e5d5c9d842475d5d36fb91015b60405180910390a15050565b6033546001600160a01b03163314611e615760405162461bcd60e51b8152600401611072906159ef565b611e7087878787878787613c3a565b5050505050505050565b6033546001600160a01b03163314611ea45760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03811660009081526069602052604090205460ff1615611edd5760405162461bcd60e51b815260040161107290615a71565b6001600160a01b03811660009081526065602052604090205415611f70576001600160a01b038116600090815260656020526040902054611f1d90611414565b6001600160a01b0382166000908152606660205260409020819055609754611f4491613e0e565b6097556001600160a01b038116600090815260656020526040902054609654611f6c91613e0e565b6096555b6001600160a01b03166000818152606960205260408120805460ff19166001908117909155606c805491820181559091527f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe0160180546001600160a01b0319169091179055565b6033546001600160a01b031633146120005760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b0382166000818152609d6020908152604091829020805460ff19168515159081179091558251938452908301527f7bbec7f46aba5f3c18434ab4aba04fa47673a668c615724e7344386e8b62e02c9101611e2b565b6033546001600160a01b031633146120865760405162461bcd60e51b8152600401611072906159ef565b609355565b6033546001600160a01b031633146120b55760405162461bcd60e51b8152600401611072906159ef565b608f80546001600160a01b0319166001600160a01b038316179055611ca781611e7a565b6001600160a01b03811660009081526069602052604081205460ff161561211657506001600160a01b031660009081526066602052604090205490565b6001600160a01b03821660009081526065602052604090205461108a90611414565b6033546001600160a01b031633146121625760405162461bcd60e51b8152600401611072906159ef565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031633146121d65760405162461bcd60e51b8152600401611072906159ef565b608954829081106121f95760405162461bcd60e51b815260040161107290615a24565b6001600160a01b03821661221f5760405162461bcd60e51b815260040161107290615b74565b61222882611e7a565b816089848154811061223c5761223c615a5b565b906000526020600020906007020160050160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826000141561229657607980546001600160a01b0319166001600160a01b0384161790555b505050565b600054610100900460ff16806122b05750303b155b806122be575060005460ff16155b6122da5760405162461bcd60e51b815260040161107290615bb9565b600054610100900460ff161580156122fc576000805461ffff19166101011790555b612304613e6d565b61230c613ee1565b612314613f99565b8015611ca7576000805461ff001916905550565b6033546001600160a01b031633146123525760405162461bcd60e51b8152600401611072906159ef565b608954829081106123755760405162461bcd60e51b815260040161107290615a24565b6001600160a01b03821661239b5760405162461bcd60e51b815260040161107290615b74565b6123a482611e7a565b81608984815481106123b8576123b8615a5b565b906000526020600020906007020160060160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826000141561229657607a80546001600160a01b0384166001600160a01b0319909116179055505050565b6033546001600160a01b031633146124425760405162461bcd60e51b8152600401611072906159ef565b608f805460ff60a01b1916600160a01b17905560945447908110156124bc5760405162461bcd60e51b815260206004820152602a60248201527f424e422062616c616e6365206973206e6f7420726561636820666f722053264560448201526908151a1c995cda1bdb1960b21b6064820152608401611072565b5060945460006124cd8260026139a8565b905060006124db8383613a70565b6040516370a0823160e01b815233600482015290915060009030906370a0823190602401602060405180830381865afa15801561251c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125409190615c07565b905061254b83614170565b6040516370a0823160e01b815233600482015260009030906370a0823190602401602060405180830381865afa158015612589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ad9190615c07565b905060006125bb8284613a70565b90506125c83330836132bf565b6040516323b872dd60e01b8152336004820152306024820181905260448201839052906323b872dd906064016020604051808303816000875af1158015612613573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126379190615c20565b506126428185614419565b60408051868152602081018390529081018590527f08261edc7b257da79c22afdc1c7064b198c7abe8fdd21070ac0b55e0351804a39060600160405180910390a15050608f805460ff60a01b1916905550505050565b6033546001600160a01b031633146126c25760405162461bcd60e51b8152600401611072906159ef565b608954829081106126e55760405162461bcd60e51b815260040161107290615a24565b6000608984815481106126fa576126fa615a5b565b60009182526020918290206040805160e0810182526007909302909101805483526001810154938301939093526002830154908201526003820154606082015260048201546080820181905260058301546001600160a01b0390811660a084015260069093015490921660c0820152915061277790829085613a03565b826089858154811061278b5761278b615a5b565b60009182526020909120600460079092020101558361164c57505060785550565b606060728054610faf9061599a565b6033546001600160a01b031633146127e55760405162461bcd60e51b8152600401611072906159ef565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015612832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122969190615c20565b6000611086338484613495565b81604051806060016040528060298152602001615ec9602991396001600160a01b0382166000908152606a6020526040902054819060ff16156128b95760405162461bcd60e51b81526004016110729190615678565b50608d546001600160a01b031661291d5760405162461bcd60e51b815260206004820152602260248201527f536166656d6f6f6e3a204d6967726174696f6e206973206e6f74207374617274604482015261195960f21b6064820152608401611072565b608d546001600160a01b0316336001600160a01b0316146129785760405162461bcd60e51b815260206004820152601560248201527414d859995b5bdbdb8e88139bdd08105b1b1bddd959605a1b6044820152606401611072565b61164c84846144e7565b6033546001600160a01b031633146129ac5760405162461bcd60e51b8152600401611072906159ef565b609b805460ff1916911515919091179055565b6000606d54841115612a135760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e74206d757374206265206c657373207468616e20737570706c79006044820152606401611072565b81612a2e576000612a248585614557565b51915061140d9050565b6000612a3a8585614557565b60200151915061140d9050565b6033546001600160a01b03163314612a715760405162461bcd60e51b8152600401611072906159ef565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314612abd5760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03166000908152606a60205260409020805460ff19169055565b6033546001600160a01b03163314612b085760405162461bcd60e51b8152600401611072906159ef565b612b29612710612b2383606d5461466a90919063ffffffff16565b906139a8565b60905550565b6033546001600160a01b03163314612b595760405162461bcd60e51b8152600401611072906159ef565b60895482908110612b7c5760405162461bcd60e51b815260040161107290615a24565b600060898481548110612b9157612b91615a5b565b60009182526020918290206040805160e0810182526007909302909101805483526001810154938301939093526002830154908201526003820154606082018190526004830154608083015260058301546001600160a01b0390811660a084015260069093015490921660c08201529150612c0e90829085613a03565b8260898581548110612c2257612c22615a5b565b60009182526020909120600360079092020101558361164c57505060775550565b6033546001600160a01b03163314612c6d5760405162461bcd60e51b8152600401611072906159ef565b8060005b8181101561164c576000848483818110612c8d57612c8d615a5b565b9050602002016020810190612ca2919061570e565b6001600160a01b03811660009081526098602052604090205490915060ff16612ccb5750612d21565b6001600160a01b038116600081815260986020908152604091829020805460ff1916905590519182527fe2c466310358d7b1b0084cd125246685e6901a43cb196a7231cac996791f037f910160405180910390a1505b80612d2b81615af4565b915050612c71565b6033546001600160a01b03163314612d5d5760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03166000908152606860205260409020805460ff19169055565b6033546001600160a01b03163314612da85760405162461bcd60e51b8152600401611072906159ef565b608a80546001600160a01b0319166001600160a01b038316908117909155604080516315ab88c960e31b8152905163ad5c4648916004808201926020929091908290030181865afa158015612e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e259190615b0f565b608c80546001600160a01b0319166001600160a01b03928316179055608a546040805163c45a015560e01b81529051919092169163c45a01559160048083019260209291908290030181865afa158015612e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea79190615b0f565b608c54604051630edef2e760e31b815230600482018190526001600160a01b03928316602483015260448201529116906376f79738906064016020604051808303816000875af1158015612eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f239190615b0f565b608b80546001600160a01b0319166001600160a01b039290921691909117905550565b6033546001600160a01b03163314612f705760405162461bcd60e51b8152600401611072906159ef565b60895482908110612f935760405162461bcd60e51b815260040161107290615a24565b600060898481548110612fa857612fa8615a5b565b60009182526020918290206040805160e0810182526007909302909101805483526001810154938301849052600281015491830191909152600381015460608301526004810154608083015260058101546001600160a01b0390811660a08401526006909101541660c0820152915061302390829085613a03565b826089858154811061303757613037615a5b565b60009182526020909120600160079092020101558361164c57505060755550565b6033546001600160a01b031633146130825760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b0381166130e75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611072565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b0316331461316d5760405162461bcd60e51b8152600401611072906159ef565b6001600160a01b03166000908152606a60209081526040808320805460ff19166001179055606b909152812055565b6033546001600160a01b031633146131c65760405162461bcd60e51b8152600401611072906159ef565b8060005b8181101561164c5760008484838181106131e6576131e6615a5b565b90506020020160208101906131fb919061570e565b6001600160a01b03811660009081526098602052604090205490915060ff1615613225575061327e565b6001600160a01b038116600081815260986020908152604091829020805460ff1916600117905590519182527fcf9d8a4ed16c4e921c6462e01033caab94999c1064e6926f765455d51fae70e4910160405180910390a1505b8061328881615af4565b9150506131ca565b6033546001600160a01b031633146132ba5760405162461bcd60e51b8152600401611072906159ef565b609455565b82604051806060016040528060268152602001615e83602691396001600160a01b0382166000908152606a6020526040902054819060ff16156133155760405162461bcd60e51b81526004016110729190615678565b5083604051806060016040528060288152602001615e10602891396001600160a01b0382166000908152606a6020526040902054819060ff161561336c5760405162461bcd60e51b81526004016110729190615678565b506001600160a01b0387166133cf5760405162461bcd60e51b8152602060048201526024808201527f42455032303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401611072565b6001600160a01b0386166134305760405162461bcd60e51b815260206004820152602260248201527f42455032303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401611072565b6001600160a01b038781166000818152606760209081526040808320948b168084529482529182902089905590518881527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b60408051808201825260208082527f536166656d6f6f6e3a204164647265737320697320626c61636b6c697374656481830152336000818152606a90925292902054819060ff16156134fa5760405162461bcd60e51b81526004016110729190615678565b5084604051806060016040528060258152602001615deb602591396001600160a01b0382166000908152606a6020526040902054819060ff16156135515760405162461bcd60e51b81526004016110729190615678565b5085604051806060016040528060238152602001615e60602391396001600160a01b0382166000908152606a6020526040902054819060ff16156135a85760405162461bcd60e51b81526004016110729190615678565b5033803b63ffffffff811615613660576001600160a01b0382166000908152606b60205260409020548061365e576000839050806001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015613635575060408051601f3d908101601f1916820190925261363291810190615b0f565b60015b61363e5761365c565b506001600160a01b0384166000908152606b60205260409020600190555b505b505b506001600160a01b038a166136c55760405162461bcd60e51b815260206004820152602560248201527f42455032303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401611072565b6001600160a01b0389166137275760405162461bcd60e51b815260206004820152602360248201527f42455032303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401611072565b600088116137895760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401611072565b6137938a8a6146e9565b6137af5760405162461bcd60e51b8152600401611072906159cf565b6033546001600160a01b038b81169116148015906137db57506033546001600160a01b038a8116911614155b15613802576090548811156138025760405162461bcd60e51b815260040161107290615b2c565b600061380d306120d9565b9050609054811061381d57506090545b6093548110801590819061383b5750608f54600160a01b900460ff16155b801561384e5750609554610100900460ff165b801561387357506001600160a01b038c1660009081526098602052604090205460ff16155b801561389857506001600160a01b038b1660009081526098602052604090205460ff16155b156138ab5760935491506138ab826147a2565b6001600160a01b038c1660009081526068602052604090205460019060ff16806138ed57506001600160a01b038c1660009081526068602052604090205460ff165b156138f6575060005b6000811561393157506001600160a01b038d166000818152606b60205260409020549033146139315750336000908152606b60205260409020545b61393e8e8e8e8486613acc565b5050505050505050505050505050565b600081848411156139725760405162461bcd60e51b81526004016110729190615678565b5061397d8385615aa8565b949350505050565b60008060006139926147ce565b90925090506139a182826139a8565b9250505090565b60008082116139f95760405162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f0000000000006044820152606401611072565b61140d8284615c53565b6000613a4c82613a4085613a468860800151613a408a60600151613a408c60400151613a408e602001518f60000151613e0e90919063ffffffff16565b90613e0e565b90613a70565b905060705481111561164c5760405162461bcd60e51b815260040161107290615c67565b600082821115613ac25760405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606401611072565b61140d8284615aa8565b80613ad957613ad9614864565b6001600160a01b03851660009081526069602052604090205460ff16158015613b1b57506001600160a01b03841660009081526069602052604090205460ff16155b15613b3157613b2c85858585614972565b613c26565b6001600160a01b03851660009081526069602052604090205460ff168015613b7257506001600160a01b03841660009081526069602052604090205460ff16155b15613b8357613b2c85858585614a58565b6001600160a01b03851660009081526069602052604090205460ff16158015613bc457506001600160a01b03841660009081526069602052604090205460ff165b15613bd557613b2c85858585614b0a565b6001600160a01b03851660009081526069602052604090205460ff168015613c1557506001600160a01b03841660009081526069602052604090205460ff165b15613c2657613c2685858585614bb8565b80613c3357613c33614d03565b5050505050565b613c42615590565b6000613c916040518060e001604052808b81526020018a8152602001898152602001888152602001878152602001866001600160a01b03168152602001856001600160a01b0316815250614d19565b9050613c9c84611e7a565b613ca583611e7a565b6089805460018101825560009190915281517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266cb60079092029182015560208201517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266cc82015560408201517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266cd82015560608201517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266ce82015560808201517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266cf82015560a08201517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266d0820180546001600160a01b03199081166001600160a01b039384161790915560c08401517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266d190930180549091169290911691909117905598975050505050505050565b600080613e1b8385615cad565b90508381101561140d5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401611072565b600054610100900460ff1680613e825750303b155b80613e90575060005460ff16155b613eac5760405162461bcd60e51b815260040161107290615bb9565b600054610100900460ff16158015612314576000805461ffff19166101011790558015611ca7576000805461ff001916905550565b600054610100900460ff1680613ef65750303b155b80613f04575060005460ff16155b613f205760405162461bcd60e51b815260040161107290615bb9565b600054610100900460ff16158015613f42576000805461ffff19166101011790555b603380546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611ca7576000805461ff001916905550565b600054610100900460ff1680613fae5750303b155b80613fbc575060005460ff16155b613fd85760405162461bcd60e51b815260040161107290615bb9565b600054610100900460ff16158015613ffa576000805461ffff19166101011790555b6040805180820190915260088082526729b0b332a6b7b7b760c11b6020909201918252614029916071916155df565b506040805180820190915260038082526253464d60e81b6020909201918252614054916072916155df565b506073805460ff19166009179055683635c9adc5dea00000606d81905561407d90600019615cc5565b61408990600019615aa8565b606e556103e8607055674563918244f400006090556706f05b59d3b20000609155608f80546001600160a01b03191661dead1790556140c53390565b608e80546001600160a01b0319166001600160a01b03928316908117909155606e5460009182526065602090815260408084209290925560335490931682526068909252818120805460ff199081166001908117909255308352929091208054909216179055614133614d81565b606d546040519081523390600090600080516020615ea98339815191529060200160405180910390a38015611ca7576000805461ff001916905550565b6040805160028082526060820183526000926020830190803683375050608a54604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa1580156141da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141fe9190615b0f565b8160008151811061421157614211615a5b565b60200260200101906001600160a01b031690816001600160a01b031681525050308160018151811061424557614245615a5b565b6001600160a01b03928316602091820292909201810191909152608a546040805163c6b06e2d60e01b81529051600094929092169263c6b06e2d926004808401938290030181865afa15801561429f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142c39190615b0f565b90506142ec6142da6033546001600160a01b031690565b608a546001600160a01b0316856132bf565b604051632254285d60e11b81526000906001600160a01b038316906344a850ba9061431d9087908790600401615d1d565b602060405180830381865afa15801561433a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061435e9190615c07565b905060006040518060a00160405280868152602001600081526020018581526020016143926033546001600160a01b031690565b6001600160a01b03168152602001428152509050826001600160a01b031663a351408783876143c19190615cad565b83856040518463ffffffff1660e01b81526004016143e0929190615d87565b6000604051808303818588803b1580156143f957600080fd5b505af115801561440d573d6000803e3d6000fd5b50505050505050505050565b608a546144319030906001600160a01b0316846132bf565b608a546001600160a01b031663f305d71982308560008061445a6033546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af11580156144c2573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190613c339190615da9565b6001600160a01b03821661453d5760405162461bcd60e51b815260206004820152601f60248201527f42455032303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401611072565b608e54611942906001600160a01b03168383600080613acc565b6145a66040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006145b28484614ea1565b905060006145e18260a00151613a408460800151613a4086602001518760400151613e0e90919063ffffffff16565b905060008060006145ff888660600151866145fa613985565b61500c565b92509250925060405180610120016040528084815260200183815260200182815260200186600001518152602001866020015181526020018660400151815260200186606001518152602001866080015181526020018660a001518152509550505050505092915050565b6000826146795750600061108a565b60006146858385615abf565b9050826146928583615c53565b1461140d5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401611072565b609b5460009060ff166146fe5750600161108a565b6001600160a01b0383166000908152609c602052604090205460ff16801561473e57506001600160a01b0382166000908152609c602052604090205460ff165b1561474b5750600161108a565b6001600160a01b0383166000908152609c602052604090205460ff16801561478c57506001600160a01b0383166000908152609d602052604090205460ff16155b156147995750600161108a565b50600092915050565b608f805460ff60a01b1916600160a01b1790556147be8161505c565b50608f805460ff60a01b19169055565b600080606e5460965411806147e65750606d54609754115b156147f7575050606e54606d549091565b6000614810609654606e54613a7090919063ffffffff16565b9050600061482b609754606d54613a7090919063ffffffff16565b9050614844606d54606e546139a890919063ffffffff16565b82101561485b57606e54606d549350935050509091565b90939092509050565b608960008154811061487857614878615a5b565b6000918252602082206007909102018054607b556001810154607c556002810154607d556003810154607e556004810154607f556005810154608080546001600160a01b03199081166001600160a01b039384161790915560069092015460818054909316911617905560898054608292906148f6576148f6615a5b565b6000918252602090912082546007909202019081556001808301549082015560028083015490820155600380830154908201556004808301549082015560058083015490820180546001600160a01b03199081166001600160a01b03938416179091556006938401549390920180549092169216919091179055565b600061497e8383614557565b80516001600160a01b0387166000908152606560205260409020549192506149a69190613a70565b6001600160a01b03808716600090815260656020908152604080832094909455840151918716815291909120546149dc91613e0e565b6001600160a01b038516600090815260656020526040902055614a00858284615282565b614a1281604001518260c0015161531c565b836001600160a01b0316856001600160a01b0316600080516020615ea98339815191528360600151604051614a4991815260200190565b60405180910390a35050505050565b6000614a648383614557565b6001600160a01b038616600090815260666020526040902054909150614a8a9084613a70565b6001600160a01b03808716600090815260666020908152604080832094909455848101519288168252606590529190912054614ac591613e0e565b6001600160a01b038516600090815260656020526040902055609754614aeb9084613a70565b6097558051609654614afc91613a70565b609655614a00858284615282565b6000614b168383614557565b80516001600160a01b038716600090815260656020526040902054919250614b3e9190613a70565b6001600160a01b0380871660009081526065602090815260408083209490945560608501519288168252606690529190912054614b7a91613e0e565b6001600160a01b0385166000908152606660205260409020556060810151609754614ba491613e0e565b6097556020810151609654614afc91613e0e565b6000614bc48383614557565b6001600160a01b038616600090815260666020526040902054909150614bea9084613a70565b6001600160a01b0380871660009081526066602052604080822093909355606084015191871681529190912054614c2091613e0e565b6001600160a01b0385166000908152606660205260409020556060810151831015614c70576000838260600151614c579190615aa8565b609754909150614c679082613e0e565b60975550614c97565b6000816060015184614c829190615aa8565b609754909150614c929082613a70565b609755505b805160208201511115614cd05780516020820151600091614cb791615aa8565b609654909150614cc79082613e0e565b60965550614cf8565b60208101518151600091614ce391615aa8565b609654909150614cf39082613a70565b609655505b614a00858284615282565b607b60896000815481106148f6576148f6615a5b565b614d21615590565b6000614d568360800151613a408560600151613a408760400151613a4089602001518a60000151613e0e90919063ffffffff16565b9050607054811115614d7a5760405162461bcd60e51b815260040161107290615c67565b5090919050565b600054610100900460ff1680614d965750303b155b80614da4575060005460ff16155b614dc05760405162461bcd60e51b815260040161107290615bb9565b600054610100900460ff16158015614de2576000805461ffff19166101011790555b614df660006101f480600080600080613c3a565b8051607455602081015160755560408101516076556060810151607755608081015160785560a0810151607980546001600160a01b03199081166001600160a01b039384161790915560c090920151607a80549093169116179055614e6360328060646000808080613c3a565b50614e776032806064806000806000613c3a565b50614e8c6064607d8060966000806000613c3a565b508015611ca7576000805461ff001916905550565b614eda6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060898381548110614eef57614eef615a5b565b600091825260208083206040805160e081018252600790940290910180548452600181015484840152600281015484830152600381015460608501526004810154608085015260058101546001600160a01b0390811660a08601526006909101541660c080850191909152815190810190915283815282519294509190820190614f7a908890615340565b8152602001614f8d878560200151615340565b8152602001614fa0878560400151615340565b8152602001614fb3878560600151615340565b8152602001614fc6878560800151615340565b81525090506150028160a00151613a468360800151613a468560400151613a468760600151613a4689602001518e613a7090919063ffffffff16565b8152949350505050565b600080808061501b888661466a565b90506000615029888761466a565b90506000615037888861466a565b9050600061504982613a468686613a70565b939b939a50919850919650505050505050565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061509157615091615a5b565b6001600160a01b03928316602091820292909201810191909152608a54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156150ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061510e9190615b0f565b8160018151811061512157615121615a5b565b6001600160a01b03928316602091820292909201810191909152608a546040805163c6b06e2d60e01b81529051600094929092169263c6b06e2d926004808401938290030181865afa15801561517b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061519f9190615b0f565b608a549091506151ba9030906001600160a01b0316856132bf565b604051632254285d60e11b81526000906001600160a01b038316906344a850ba906151eb9087908790600401615d1d565b602060405180830381865afa158015615208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061522c9190615c07565b6040805160a081018252868152600060208201528082018690523060608201524260808201529051623aa70160e61b8152919250906001600160a01b03841690630ea9c0409084906143e0908590600401615dd7565b615291838360a001513061535f565b6152cf838360800151608984815481106152ad576152ad615a5b565b60009182526020909120600560079092020101546001600160a01b031661535f565b61530d838360e00151608984815481106152eb576152eb615a5b565b60009182526020909120600660079092020101546001600160a01b031661535f565b61229683836101000151615477565b606e546153299083613a70565b606e55606f546153399082613e0e565b606f555050565b60008161534f5750600061108a565b61140d612710612b23858561466a565b6001600160a01b03811661537257505050565b8161537c57505050565b6000615386613985565b90506000615394848361466a565b6001600160a01b0384166000908152606560205260409020549091506153ba9082613e0e565b6001600160a01b03841660009081526065602090815260408083209390935560699052205460ff1615615444576001600160a01b03831660009081526066602052604090205461540a9085613e0e565b6001600160a01b0384166000908152606660205260409020556097546154309085613e0e565b6097556096546154409082613e0e565b6096555b826001600160a01b0316856001600160a01b0316600080516020615ea983398151915286604051614a4991815260200190565b80615480575050565b608f546001600160a01b03166000908152606660205260409020546154a59082613e0e565b608f546001600160a01b03166000908152606660205260408120919091556154cb613985565b6154d59083615abf565b608f546001600160a01b03166000908152606560205260409020549091506154fd9082613e0e565b608f80546001600160a01b03908116600090815260656020908152604080832095909555925490911681526069909152205460ff1615615558576096546155449082613e0e565b6096556097546155549083613e0e565b6097555b608f546040518381526001600160a01b0391821691851690600080516020615ea98339815191529060200160405180910390a3505050565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b8280546155eb9061599a565b90600052602060002090601f01602090048101928261560d5760008555615653565b82601f1061562657805160ff1916838001178555615653565b82800160010185558215615653579182015b82811115615653578251825591602001919060010190615638565b5061565f929150615663565b5090565b5b8082111561565f5760008155600101615664565b600060208083528351808285015260005b818110156156a557858101830151858201604001528201615689565b818111156156b7576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114611ca757600080fd5b600080604083850312156156f557600080fd5b8235615700816156cd565b946020939093013593505050565b60006020828403121561572057600080fd5b813561140d816156cd565b60006020828403121561573d57600080fd5b5035919050565b60008060006060848603121561575957600080fd5b8335615764816156cd565b92506020840135615774816156cd565b929592945050506040919091013590565b6000806040838503121561579857600080fd5b50508035926020909101359150565b8015158114611ca757600080fd5b6000602082840312156157c757600080fd5b813561140d816157a7565b600080604083850312156157e557600080fd5b82356157f0816156cd565b91506020830135615800816157a7565b809150509250929050565b6000806040838503121561581e57600080fd5b8235615829816156cd565b91506020830135615800816156cd565b6000806040838503121561584c57600080fd5b823591506020830135615800816157a7565b600080600080600080600060e0888a03121561587957600080fd5b873596506020880135955060408801359450606088013593506080880135925060a08801356158a7816156cd565b915060c08801356158b7816156cd565b8091505092959891949750929550565b600080604083850312156158da57600080fd5b823591506020830135615800816156cd565b60008060006060848603121561590157600080fd5b8335925060208401359150604084013561591a816157a7565b809150509250925092565b6000806020838503121561593857600080fd5b823567ffffffffffffffff8082111561595057600080fd5b818501915085601f83011261596457600080fd5b81358181111561597357600080fd5b8660208260051b850101111561598857600080fd5b60209290920196919550909350505050565b600181811c908216806159ae57607f821691505b6020821081141561128f57634e487b7160e01b600052602260045260246000fd5b60208082526006908201526514185d5cd95960d21b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f536166656d6f6f6e3a20496e76616c6964207469657220696e64657800000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b602080825260079082015266125b9d985b1a5960ca1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015615aba57615aba615a92565b500390565b6000816000190483118215151615615ad957615ad9615a92565b500290565b634e487b7160e01b600052603160045260246000fd5b6000600019821415615b0857615b08615a92565b5060010190565b600060208284031215615b2157600080fd5b815161140d816156cd565b60208082526028908201527f5472616e7366657220616d6f756e74206578636565647320746865206d6178546040820152673c20b6b7bab73a1760c11b606082015260800190565b60208082526025908201527f536166656d6f6f6e3a2041646472657373205a65726f206973206e6f7420616c6040820152641b1bddd95960da1b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215615c1957600080fd5b5051919050565b600060208284031215615c3257600080fd5b815161140d816157a7565b634e487b7160e01b600052601260045260246000fd5b600082615c6257615c62615c3d565b500490565b60208082526026908201527f536166656d6f6f6e3a2046656573206578636565646564206d6178206c696d696040820152653a30ba34b7b760d11b606082015260800190565b60008219821115615cc057615cc0615a92565b500190565b600082615cd457615cd4615c3d565b500690565b600081518084526020808501945080840160005b83811015615d125781516001600160a01b031687529582019590820190600101615ced565b509495945050505050565b82815260406020820152600061397d6040830184615cd9565b80518252602081015160208301526000604082015160a06040850152615d5f60a0850182615cd9565b6060848101516001600160a01b03169086015260809384015193909401929092525090919050565b604081526000615d9a6040830185615d36565b90508260208301529392505050565b600080600060608486031215615dbe57600080fd5b8351925060208401519150604084015190509250925092565b60208152600061140d6020830184615d3656fe536166656d6f6f6e3a2046726f6d206164647265737320697320626c61636b6c6973746564536166656d6f6f6e3a205370656e646572206164647265737320697320626c61636b6c697374656442455032303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365536166656d6f6f6e3a20546f206164647265737320697320626c61636b6c6973746564536166656d6f6f6e3a204f776e6572206164647265737320697320626c61636b6c6973746564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef536166656d6f6f6e3a204d69677261746564206163636f756e7420697320626c61636b6c6973746564536166656d6f6f6e3a2053656c6563746564206163636f756e7420697320696e20626c61636b6c697374a264697066735822122016a4080195a5c05fbd4c8d65dfe7057440e9458849e9f9d7724446f8ab159cae64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "migrate(address,uint256)": {
        "details": "Creates `amount` tokens and assigns them to `account`, increasing the total supply. Emits a {Transfer} event with `from` set to the zero address. Requirements: - `account` cannot be the zero address."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_rTotalExcluded": {
        "details": "We create 2 variables _rTotalExcluded and _tTotalExcluded that store total t and r excluded So for any actions such as add, remove exclude wallet or increase, decrease exclude amount, we will update _rTotalExcluded and _tTotalExcluded and in _getCurrentSupply() function, we remove for loop by using _rTotalExcluded and _tTotalExcluded But this contract using proxy pattern, so when we upgrade contract,  we need to call updateTotalExcluded() to init value of _rTotalExcluded and _tTotalExcluded"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4412,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4415,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4515,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4522,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 4641,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_rOwned",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_tOwned",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 77,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_allowances",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 81,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_isExcludedFromFee",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 85,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_isExcluded",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 89,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_isBlacklisted",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 93,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_accountsTier",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 96,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_excluded",
        "offset": 0,
        "slot": "108",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 105,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_tTotal",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 107,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_rTotal",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 109,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_tFeeTotal",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 111,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_maxFee",
        "offset": 0,
        "slot": "112",
        "type": "t_uint256"
      },
      {
        "astId": 113,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_name",
        "offset": 0,
        "slot": "113",
        "type": "t_string_storage"
      },
      {
        "astId": 115,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_symbol",
        "offset": 0,
        "slot": "114",
        "type": "t_string_storage"
      },
      {
        "astId": 117,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_decimals",
        "offset": 0,
        "slot": "115",
        "type": "t_uint8"
      },
      {
        "astId": 120,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_defaultFees",
        "offset": 0,
        "slot": "116",
        "type": "t_struct(FeeTier)31_storage"
      },
      {
        "astId": 123,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_previousFees",
        "offset": 0,
        "slot": "123",
        "type": "t_struct(FeeTier)31_storage"
      },
      {
        "astId": 126,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_emptyFees",
        "offset": 0,
        "slot": "130",
        "type": "t_struct(FeeTier)31_storage"
      },
      {
        "astId": 130,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "feeTiers",
        "offset": 0,
        "slot": "137",
        "type": "t_array(t_struct(FeeTier)31_storage)dyn_storage"
      },
      {
        "astId": 133,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "138",
        "type": "t_contract(IUniswapV2Router02)4792"
      },
      {
        "astId": 135,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "uniswapV2Pair",
        "offset": 0,
        "slot": "139",
        "type": "t_address"
      },
      {
        "astId": 137,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "WBNB",
        "offset": 0,
        "slot": "140",
        "type": "t_address"
      },
      {
        "astId": 139,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "migration",
        "offset": 0,
        "slot": "141",
        "type": "t_address"
      },
      {
        "astId": 141,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_initializerAccount",
        "offset": 0,
        "slot": "142",
        "type": "t_address"
      },
      {
        "astId": 143,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_burnAddress",
        "offset": 0,
        "slot": "143",
        "type": "t_address"
      },
      {
        "astId": 145,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "inSwapAndLiquify",
        "offset": 20,
        "slot": "143",
        "type": "t_bool"
      },
      {
        "astId": 147,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "swapAndLiquifyEnabled",
        "offset": 21,
        "slot": "143",
        "type": "t_bool"
      },
      {
        "astId": 149,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_maxTxAmount",
        "offset": 0,
        "slot": "144",
        "type": "t_uint256"
      },
      {
        "astId": 151,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "numTokensSellToAddToLiquidity",
        "offset": 0,
        "slot": "145",
        "type": "t_uint256"
      },
      {
        "astId": 153,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_upgraded",
        "offset": 0,
        "slot": "146",
        "type": "t_bool"
      },
      {
        "astId": 266,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "numTokensToCollectBNB",
        "offset": 0,
        "slot": "147",
        "type": "t_uint256"
      },
      {
        "astId": 268,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "numOfBnbToSwapAndEvolve",
        "offset": 0,
        "slot": "148",
        "type": "t_uint256"
      },
      {
        "astId": 270,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "inSwapAndEvolve",
        "offset": 0,
        "slot": "149",
        "type": "t_bool"
      },
      {
        "astId": 272,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "swapAndEvolveEnabled",
        "offset": 1,
        "slot": "149",
        "type": "t_bool"
      },
      {
        "astId": 275,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_rTotalExcluded",
        "offset": 0,
        "slot": "150",
        "type": "t_uint256"
      },
      {
        "astId": 277,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "_tTotalExcluded",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 281,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "listIgnoreCollectBNBAddresses",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 283,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "bridgeBurnAddress",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 287,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "whitelistMint",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 289,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "isPaused",
        "offset": 0,
        "slot": "155",
        "type": "t_bool"
      },
      {
        "astId": 293,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "whitelistPause",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 297,
        "contract": "contracts/Safemoon.sol:Safemoon",
        "label": "isSFMPair",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(FeeTier)31_storage)dyn_storage": {
        "base": "t_struct(FeeTier)31_storage",
        "encoding": "dynamic_array",
        "label": "struct Safemoon.FeeTier[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUniswapV2Router02)4792": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FeeTier)31_storage": {
        "encoding": "inplace",
        "label": "struct Safemoon.FeeTier",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/Safemoon.sol:Safemoon",
            "label": "ecoSystemFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20,
            "contract": "contracts/Safemoon.sol:Safemoon",
            "label": "liquidityFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 22,
            "contract": "contracts/Safemoon.sol:Safemoon",
            "label": "taxFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 24,
            "contract": "contracts/Safemoon.sol:Safemoon",
            "label": "ownerFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 26,
            "contract": "contracts/Safemoon.sol:Safemoon",
            "label": "burnFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 28,
            "contract": "contracts/Safemoon.sol:Safemoon",
            "label": "ecoSystem",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 30,
            "contract": "contracts/Safemoon.sol:Safemoon",
            "label": "owner",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}