{
  "language": "Solidity",
  "sources": {
    "contracts/Safemoon.sol": {
      "content": "/**\n *Submitted for verification at BscScan.com on 2022-05-29\n */\n// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"./SafemoonLib.sol\";\n\ncontract Safemoon is ISafemoon, Initializable, ContextUpgradeable, OwnableUpgradeable {\n    using SafeMathUpgradeable for uint256;\n    using AddressUpgradeable for address;\n\n    struct FeeTier {\n        uint256 ecoSystemFee;\n        uint256 liquidityFee;\n        uint256 taxFee;\n        uint256 ownerFee;\n        uint256 burnFee;\n        address ecoSystem;\n        address owner;\n    }\n\n    struct FeeValues {\n        uint256 rAmount;\n        uint256 rTransferAmount;\n        uint256 rFee;\n        uint256 tTransferAmount;\n        uint256 tEchoSystem;\n        uint256 tLiquidity;\n        uint256 tFee;\n        uint256 tOwner;\n        uint256 tBurn;\n    }\n\n    struct tFeeValues {\n        uint256 tTransferAmount;\n        uint256 tEchoSystem;\n        uint256 tLiquidity;\n        uint256 tFee;\n        uint256 tOwner;\n        uint256 tBurn;\n    }\n\n    mapping(address => uint256) private _rOwned;\n    mapping(address => uint256) private _tOwned;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) private _isExcludedFromFee;\n    mapping(address => bool) private _isExcluded;\n    mapping(address => bool) private _isBlacklisted;\n    mapping(address => uint256) private _accountsTier;\n\n    address[] private _excluded;\n\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private _tTotal;\n    uint256 private _rTotal;\n    uint256 private _tFeeTotal;\n    uint256 private _maxFee;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    FeeTier public _defaultFees;\n    FeeTier private _previousFees;\n    FeeTier private _emptyFees;\n\n    FeeTier[] private feeTiers;\n\n    IUniswapV2Router02 public uniswapV2Router;\n    address public uniswapV2Pair;\n    address public WBNB;\n    address private migration;\n    address private _initializerAccount;\n    address public _burnAddress;\n\n    bool inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled;\n\n    uint256 public _maxTxAmount;\n    uint256 private numTokensSellToAddToLiquidity;\n\n    bool private _upgraded;\n\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n\n    modifier lockTheSwap() {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    modifier lockUpgrade() {\n        require(!_upgraded, \"Safemoon: Already upgraded\");\n        _;\n        _upgraded = true;\n    }\n\n    modifier checkTierIndex(uint256 _index) {\n        require(feeTiers.length > _index, \"Safemoon: Invalid tier index\");\n        _;\n    }\n\n    modifier preventBlacklisted(address _account, string memory errorMsg) {\n        require(!_isBlacklisted[_account], errorMsg);\n        _;\n    }\n\n    modifier isRouter(address _sender) {\n        {\n            uint32 size;\n            assembly {\n                size := extcodesize(_sender)\n            }\n            if (size > 0) {\n                uint256 senderTier = _accountsTier[_sender];\n                if (senderTier == 0) {\n                    IUniswapV2Router02 _routerCheck = IUniswapV2Router02(_sender);\n                    try _routerCheck.factory() returns (address factory) {\n                        _accountsTier[_sender] = 1;\n                    } catch {}\n                }\n            }\n        }\n\n        _;\n    }\n\n    uint256 public numTokensToCollectBNB;\n    uint256 public numOfBnbToSwapAndEvolve;\n\n    bool inSwapAndEvolve;\n    bool public swapAndEvolveEnabled;\n\n    /**\n     * @dev\n     * We create 2 variables _rTotalExcluded and _tTotalExcluded that store total t and r excluded\n     * So for any actions such as add, remove exclude wallet or increase, decrease exclude amount, we will update\n     * _rTotalExcluded and _tTotalExcluded\n     * and in _getCurrentSupply() function, we remove for loop by using _rTotalExcluded and _tTotalExcluded\n     * But this contract using proxy pattern, so when we upgrade contract,\n     *  we need to call updateTotalExcluded() to init value of _rTotalExcluded and _tTotalExcluded\n     */\n    uint256 private _rTotalExcluded;\n    uint256 private _tTotalExcluded;\n\n    mapping(address => bool) public listIgnoreCollectBNBAddresses; // list pairs addresses that not call collectBNB function\n    address public bridgeBurnAddress;\n    mapping(address => bool) public whitelistMint;\n    bool public isPaused;\n    mapping(address => bool) public whitelistPause;\n    mapping(address => bool) public isSFMPair;\n\n    event SwapAndEvolveEnabledUpdated(bool enabled);\n    event SwapAndEvolve(uint256 bnbSwapped, uint256 tokenReceived, uint256 bnbIntoLiquidity);\n    event AddIgnoreCollectBNBAddress(address ignoreAddress);\n    event RemoveIgnoreCollectBNBAddress(address ignoreAddress);\n    event WhitelistPause(address user, bool value);\n    event SetSFMPair(address pair, bool value);\n    event PauseContract(bool value);\n\n    modifier onlyWhitelistMint() {\n        require(whitelistMint[msg.sender], \"Invalid\");\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!isPaused || whitelistPause[msg.sender], \"Paused\");\n        _;\n    }\n\n    function initialize() public initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Safemoon_v2_init_unchained();\n    }\n\n    function __Safemoon_v2_init_unchained() internal initializer {\n        _name = \"SafeMoon\";\n        _symbol = \"SFM\";\n        _decimals = 9;\n\n        _tTotal = 1000000 * 10**6 * 10**9;\n        _rTotal = (MAX - (MAX % _tTotal));\n        _maxFee = 1000;\n\n        // swapAndLiquifyEnabled = true;\n\n        _maxTxAmount = 5000 * 10**6 * 10**9;\n        numTokensSellToAddToLiquidity = 500 * 10**6 * 10**9;\n\n        _burnAddress = 0x000000000000000000000000000000000000dEaD;\n        _initializerAccount = _msgSender();\n        _rOwned[_initializerAccount] = _rTotal;\n        //exclude owner and this contract from fee\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        //\n        __Safemoon_tiers_init();\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function initRouterAndPair(address _router) external onlyOwner {\n        uniswapV2Router = IUniswapV2Router02(_router);\n        WBNB = uniswapV2Router.WETH();\n        // Create a uniswap pair for this new token\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), WBNB, address(this));\n    }\n\n    function __Safemoon_tiers_init() internal initializer {\n        _defaultFees = _addTier(0, 500, 500, 0, 0, address(0), address(0));\n        _addTier(50, 50, 100, 0, 0, address(0), address(0));\n        _addTier(50, 50, 100, 100, 0, address(0), address(0));\n        _addTier(100, 125, 125, 150, 0, address(0), address(0));\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override whenNotPaused returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\")\n        );\n        return true;\n    }\n\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function totalFees() public view returns (uint256) {\n        return _tFeeTotal;\n    }\n\n    function reflectionFromTokenInTiers(\n        uint256 tAmount,\n        uint256 _tierIndex,\n        bool deductTransferFee\n    ) public view returns (uint256) {\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\n        if (!deductTransferFee) {\n            FeeValues memory _values = _getValues(tAmount, _tierIndex);\n            return _values.rAmount;\n        } else {\n            FeeValues memory _values = _getValues(tAmount, _tierIndex);\n            return _values.rTransferAmount;\n        }\n    }\n\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {\n        return reflectionFromTokenInTiers(tAmount, 0, deductTransferFee);\n    }\n\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate = _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\n    // or when increase, decrease exclude value\n    function excludeFromReward(address account) public onlyOwner {\n        require(!_isExcluded[account], \"Invalid\");\n        if (_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n            _tTotalExcluded = _tTotalExcluded.add(_tOwned[account]);\n            _rTotalExcluded = _rTotalExcluded.add(_rOwned[account]);\n        }\n\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\n    // or when increase, decrease exclude value\n    function includeInReward(address account) external onlyOwner {\n        require(_isExcluded[account], \"Invalid\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _rOwned[account] = _tOwned[account] * _getRate();\n                _tTotalExcluded = _tTotalExcluded.sub(_tOwned[account]);\n                _rTotalExcluded = _rTotalExcluded.sub(_rOwned[account]);\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n    function whitelistAddress(address _account, uint256 _tierIndex)\n        public\n        onlyOwner\n        checkTierIndex(_tierIndex)\n        preventBlacklisted(_account, \"Safemoon: Selected account is in blacklist\")\n    {\n        require(_account != address(0), \"Safemoon: Invalid address\");\n        _accountsTier[_account] = _tierIndex;\n    }\n\n    function excludeWhitelistedAddress(address _account) public onlyOwner {\n        require(_account != address(0), \"Safemoon: Invalid address\");\n        require(_accountsTier[_account] > 0, \"Safemoon: Account is not in whitelist\");\n        _accountsTier[_account] = 0;\n    }\n\n    function accountTier(address _account) public view returns (FeeTier memory) {\n        return feeTiers[_accountsTier[_account]];\n    }\n\n    function isWhitelisted(address _account) public view returns (bool) {\n        return _accountsTier[_account] > 0;\n    }\n\n    function checkFees(FeeTier memory _tier) internal view returns (FeeTier memory) {\n        uint256 _fees = _tier.ecoSystemFee.add(_tier.liquidityFee).add(_tier.taxFee).add(_tier.ownerFee).add(\n            _tier.burnFee\n        );\n        require(_fees <= _maxFee, \"Safemoon: Fees exceeded max limitation\");\n\n        return _tier;\n    }\n\n    function checkFeesChanged(\n        FeeTier memory _tier,\n        uint256 _oldFee,\n        uint256 _newFee\n    ) internal view {\n        uint256 _fees = _tier\n            .ecoSystemFee\n            .add(_tier.liquidityFee)\n            .add(_tier.taxFee)\n            .add(_tier.ownerFee)\n            .add(_tier.burnFee)\n            .sub(_oldFee)\n            .add(_newFee);\n\n        require(_fees <= _maxFee, \"Safemoon: Fees exceeded max limitation\");\n    }\n\n    function setEcoSystemFeePercent(uint256 _tierIndex, uint256 _ecoSystemFee)\n        external\n        onlyOwner\n        checkTierIndex(_tierIndex)\n    {\n        FeeTier memory tier = feeTiers[_tierIndex];\n        checkFeesChanged(tier, tier.ecoSystemFee, _ecoSystemFee);\n        feeTiers[_tierIndex].ecoSystemFee = _ecoSystemFee;\n        if (_tierIndex == 0) {\n            _defaultFees.ecoSystemFee = _ecoSystemFee;\n        }\n    }\n\n    function setLiquidityFeePercent(uint256 _tierIndex, uint256 _liquidityFee)\n        external\n        onlyOwner\n        checkTierIndex(_tierIndex)\n    {\n        FeeTier memory tier = feeTiers[_tierIndex];\n        checkFeesChanged(tier, tier.liquidityFee, _liquidityFee);\n        feeTiers[_tierIndex].liquidityFee = _liquidityFee;\n        if (_tierIndex == 0) {\n            _defaultFees.liquidityFee = _liquidityFee;\n        }\n    }\n\n    function setTaxFeePercent(uint256 _tierIndex, uint256 _taxFee) external onlyOwner checkTierIndex(_tierIndex) {\n        FeeTier memory tier = feeTiers[_tierIndex];\n        checkFeesChanged(tier, tier.taxFee, _taxFee);\n        feeTiers[_tierIndex].taxFee = _taxFee;\n        if (_tierIndex == 0) {\n            _defaultFees.taxFee = _taxFee;\n        }\n    }\n\n    function setOwnerFeePercent(uint256 _tierIndex, uint256 _ownerFee) external onlyOwner checkTierIndex(_tierIndex) {\n        FeeTier memory tier = feeTiers[_tierIndex];\n        checkFeesChanged(tier, tier.ownerFee, _ownerFee);\n        feeTiers[_tierIndex].ownerFee = _ownerFee;\n        if (_tierIndex == 0) {\n            _defaultFees.ownerFee = _ownerFee;\n        }\n    }\n\n    function setBurnFeePercent(uint256 _tierIndex, uint256 _burnFee) external onlyOwner checkTierIndex(_tierIndex) {\n        FeeTier memory tier = feeTiers[_tierIndex];\n        checkFeesChanged(tier, tier.burnFee, _burnFee);\n        feeTiers[_tierIndex].burnFee = _burnFee;\n        if (_tierIndex == 0) {\n            _defaultFees.burnFee = _burnFee;\n        }\n    }\n\n    function setEcoSystemFeeAddress(uint256 _tierIndex, address _ecoSystem)\n        external\n        onlyOwner\n        checkTierIndex(_tierIndex)\n    {\n        require(_ecoSystem != address(0), \"Safemoon: Address Zero is not allowed\");\n        excludeFromReward(_ecoSystem);\n        feeTiers[_tierIndex].ecoSystem = _ecoSystem;\n        if (_tierIndex == 0) {\n            _defaultFees.ecoSystem = _ecoSystem;\n        }\n    }\n\n    function setOwnerFeeAddress(uint256 _tierIndex, address _owner) external onlyOwner checkTierIndex(_tierIndex) {\n        require(_owner != address(0), \"Safemoon: Address Zero is not allowed\");\n        excludeFromReward(_owner);\n        feeTiers[_tierIndex].owner = _owner;\n        if (_tierIndex == 0) {\n            _defaultFees.owner = _owner;\n        }\n    }\n\n    function addTier(\n        uint256 _ecoSystemFee,\n        uint256 _liquidityFee,\n        uint256 _taxFee,\n        uint256 _ownerFee,\n        uint256 _burnFee,\n        address _ecoSystem,\n        address _owner\n    ) public onlyOwner {\n        _addTier(_ecoSystemFee, _liquidityFee, _taxFee, _ownerFee, _burnFee, _ecoSystem, _owner);\n    }\n\n    function _addTier(\n        uint256 _ecoSystemFee,\n        uint256 _liquidityFee,\n        uint256 _taxFee,\n        uint256 _ownerFee,\n        uint256 _burnFee,\n        address _ecoSystem,\n        address _owner\n    ) internal returns (FeeTier memory) {\n        FeeTier memory _newTier = checkFees(\n            FeeTier(_ecoSystemFee, _liquidityFee, _taxFee, _ownerFee, _burnFee, _ecoSystem, _owner)\n        );\n        excludeFromReward(_ecoSystem);\n        excludeFromReward(_owner);\n        feeTiers.push(_newTier);\n\n        return _newTier;\n    }\n\n    function feeTier(uint256 _tierIndex) public view checkTierIndex(_tierIndex) returns (FeeTier memory) {\n        return feeTiers[_tierIndex];\n    }\n\n    function blacklistAddress(address account) public onlyOwner {\n        _isBlacklisted[account] = true;\n        _accountsTier[account] = 0;\n    }\n\n    function unBlacklistAddress(address account) public onlyOwner {\n        _isBlacklisted[account] = false;\n    }\n\n    function updateRouterAndPair(address _uniswapV2Router, address _uniswapV2Pair) public onlyOwner {\n        uniswapV2Router = IUniswapV2Router02(_uniswapV2Router);\n        uniswapV2Pair = _uniswapV2Pair;\n        WBNB = uniswapV2Router.WETH();\n    }\n\n    function setDefaultSettings() external onlyOwner {\n        swapAndLiquifyEnabled = false;\n        swapAndEvolveEnabled = true;\n    }\n\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**4);\n    }\n\n    function setSwapAndEvolveEnabled(bool _enabled) public onlyOwner {\n        swapAndEvolveEnabled = _enabled;\n        emit SwapAndEvolveEnabledUpdated(_enabled);\n    }\n\n    //to receive BNB from uniswapV2Router when swapping\n    receive() external payable {}\n\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal.sub(rFee);\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n\n    function _getValues(uint256 tAmount, uint256 _tierIndex) private view returns (FeeValues memory) {\n        tFeeValues memory tValues = _getTValues(tAmount, _tierIndex);\n        uint256 tTransferFee = tValues.tLiquidity.add(tValues.tEchoSystem).add(tValues.tOwner).add(tValues.tBurn);\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\n            tAmount,\n            tValues.tFee,\n            tTransferFee,\n            _getRate()\n        );\n        return\n            FeeValues(\n                rAmount,\n                rTransferAmount,\n                rFee,\n                tValues.tTransferAmount,\n                tValues.tEchoSystem,\n                tValues.tLiquidity,\n                tValues.tFee,\n                tValues.tOwner,\n                tValues.tBurn\n            );\n    }\n\n    function _getTValues(uint256 tAmount, uint256 _tierIndex) private view returns (tFeeValues memory) {\n        FeeTier memory tier = feeTiers[_tierIndex];\n        tFeeValues memory tValues = tFeeValues(\n            0,\n            calculateFee(tAmount, tier.ecoSystemFee),\n            calculateFee(tAmount, tier.liquidityFee),\n            calculateFee(tAmount, tier.taxFee),\n            calculateFee(tAmount, tier.ownerFee),\n            calculateFee(tAmount, tier.burnFee)\n        );\n\n        tValues.tTransferAmount = tAmount\n            .sub(tValues.tEchoSystem)\n            .sub(tValues.tFee)\n            .sub(tValues.tLiquidity)\n            .sub(tValues.tOwner)\n            .sub(tValues.tBurn);\n\n        return tValues;\n    }\n\n    function _getRValues(\n        uint256 tAmount,\n        uint256 tFee,\n        uint256 tTransferFee,\n        uint256 currentRate\n    )\n        private\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rTransferFee = tTransferFee.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTransferFee);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _getRate() private view returns (uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns (uint256, uint256) {\n        if (_rTotalExcluded > _rTotal || _tTotalExcluded > _tTotal) {\n            return (_rTotal, _tTotal);\n        }\n        uint256 rSupply = _rTotal.sub(_rTotalExcluded);\n        uint256 tSupply = _tTotal.sub(_tTotalExcluded);\n\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n\n        return (rSupply, tSupply);\n    }\n\n    function calculateFee(uint256 _amount, uint256 _fee) private pure returns (uint256) {\n        if (_fee == 0) return 0;\n        return _amount.mul(_fee).div(10**4);\n    }\n\n    function removeAllFee() private {\n        _previousFees = feeTiers[0];\n        feeTiers[0] = _emptyFees;\n    }\n\n    function restoreAllFee() private {\n        feeTiers[0] = _previousFees;\n    }\n\n    function isExcludedFromFee(address account) public view returns (bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function isBlacklisted(address account) public view returns (bool) {\n        return _isBlacklisted[account];\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    )\n        private\n        preventBlacklisted(owner, \"Safemoon: Owner address is blacklisted\")\n        preventBlacklisted(spender, \"Safemoon: Spender address is blacklisted\")\n    {\n        require(owner != address(0), \"BEP20: approve from the zero address\");\n        require(spender != address(0), \"BEP20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    )\n        private\n        preventBlacklisted(_msgSender(), \"Safemoon: Address is blacklisted\")\n        preventBlacklisted(from, \"Safemoon: From address is blacklisted\")\n        preventBlacklisted(to, \"Safemoon: To address is blacklisted\")\n        isRouter(_msgSender())\n    {\n        require(from != address(0), \"BEP20: transfer from the zero address\");\n        require(to != address(0), \"BEP20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(_canAction(from, to), \"Paused\");\n\n        if (from != owner() && to != owner())\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n\n        // is the token balance of this contract address over the min number of\n        // tokens that we need to initiate a swap + liquidity lock?\n        // also, don't get caught in a circular liquidity event.\n        // also, don't swap & liquify if sender is uniswap pair.\n        uint256 contractTokenBalance = balanceOf(address(this));\n\n        if (contractTokenBalance >= _maxTxAmount) {\n            contractTokenBalance = _maxTxAmount;\n        }\n\n        bool overMinTokenBalance = contractTokenBalance >= numTokensToCollectBNB;\n        if (\n            overMinTokenBalance &&\n            !inSwapAndLiquify &&\n            swapAndEvolveEnabled &&\n            !_isInCollectBNBWhitelist(from) &&\n            !_isInCollectBNBWhitelist(to)\n        ) {\n            contractTokenBalance = numTokensToCollectBNB;\n            collectBNB(contractTokenBalance);\n        }\n\n        //indicates if fee should be deducted from transfer\n        bool takeFee = true;\n\n        //if any account belongs to _isExcludedFromFee account then remove the fee\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n            takeFee = false;\n        }\n\n        uint256 tierIndex = 0;\n\n        if (takeFee) {\n            tierIndex = _accountsTier[from];\n\n            if (_msgSender() != from) {\n                tierIndex = _accountsTier[_msgSender()];\n            }\n        }\n\n        //transfer amount, it will take tax, burn, liquidity fee\n        _tokenTransfer(from, to, amount, tierIndex, takeFee);\n    }\n\n    function _canAction(address from, address to) private view returns (bool) {\n        if (!isPaused) {\n            return true;\n        }\n        if (whitelistPause[from] && whitelistPause[to]) {\n            return true;\n        }\n        if (whitelistPause[from] && !isSFMPair[from]) {\n            return true;\n        }\n        return false;\n    }\n\n    function collectBNB(uint256 contractTokenBalance) private lockTheSwap {\n        swapTokensForBnb(contractTokenBalance);\n    }\n\n    function swapTokensForBnb(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> wbnb\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        ISafeSwapTradeRouter tradeRouter = ISafeSwapTradeRouter(uniswapV2Router.routerTrade());\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // get feeAmount\n        uint256 feeAmount = tradeRouter.getSwapFees(tokenAmount, path);\n        ISafeSwapTradeRouter.Trade memory trade = ISafeSwapTradeRouter.Trade({\n            amountIn: tokenAmount,\n            amountOut: 0,\n            path: path,\n            to: payable(address(this)),\n            deadline: block.timestamp\n        });\n        tradeRouter.swapExactTokensForETHAndFeeAmount{ value: feeAmount }(trade);\n    }\n\n    function swapAndEvolve() public onlyOwner lockTheSwap {\n        // split the contract balance into halves\n        uint256 contractBnbBalance = address(this).balance;\n        require(contractBnbBalance >= numOfBnbToSwapAndEvolve, \"BNB balance is not reach for S&E Threshold\");\n\n        contractBnbBalance = numOfBnbToSwapAndEvolve;\n\n        uint256 half = contractBnbBalance.div(2);\n        uint256 otherHalf = contractBnbBalance.sub(half);\n\n        // capture the contract's current BNB balance.\n        // this is so that we can capture exactly the amount of BNB that the\n        // swap creates, and not make the liquidity event include any BNB that\n        // has been manually sent to the contract\n        uint256 initialBalance = ISafemoon(address(this)).balanceOf(msg.sender);\n        // swap BNB for Tokens\n        swapBnbForTokens(half);\n\n        // how much BNB did we just swap into?\n        uint256 newBalance = ISafemoon(address(this)).balanceOf(msg.sender);\n        uint256 swapeedToken = newBalance.sub(initialBalance);\n\n        _approve(msg.sender, address(this), swapeedToken);\n        ISafemoon(address(this)).transferFrom(msg.sender, address(this), swapeedToken);\n        // add liquidity to uniswap\n        addLiquidity(swapeedToken, otherHalf);\n        emit SwapAndEvolve(half, swapeedToken, otherHalf);\n    }\n\n    function swapBnbForTokens(uint256 bnbAmount) private {\n        // generate the uniswap pair path of token -> wbnb\n        address[] memory path = new address[](2);\n        path[0] = uniswapV2Router.WETH();\n        path[1] = address(this);\n\n        ISafeSwapTradeRouter tradeRouter = ISafeSwapTradeRouter(uniswapV2Router.routerTrade());\n        _approve(owner(), address(uniswapV2Router), bnbAmount);\n\n        // get feeAmount\n        uint256 feeAmount = tradeRouter.getSwapFees(bnbAmount, path);\n        ISafeSwapTradeRouter.Trade memory trade = ISafeSwapTradeRouter.Trade({\n            amountIn: bnbAmount,\n            amountOut: 0,\n            path: path,\n            to: payable(owner()),\n            deadline: block.timestamp\n        });\n        tradeRouter.swapExactETHForTokensWithFeeAmount{ value: bnbAmount + feeAmount }(trade, feeAmount);\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{ value: bnbAmount }(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n    }\n\n    //this method is responsible for taking all fee, if takeFee is true\n    function _tokenTransfer(\n        address sender,\n        address recipient,\n        uint256 amount,\n        uint256 tierIndex,\n        bool takeFee\n    ) private {\n        if (!takeFee) removeAllFee();\n\n        if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferStandard(sender, recipient, amount, tierIndex);\n        } else if (_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferFromExcluded(sender, recipient, amount, tierIndex);\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferToExcluded(sender, recipient, amount, tierIndex);\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferBothExcluded(sender, recipient, amount, tierIndex);\n        }\n\n        if (!takeFee) restoreAllFee();\n    }\n\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\n    // or when increase, decrease exclude value\n    function _transferBothExcluded(\n        address sender,\n        address recipient,\n        uint256 tAmount,\n        uint256 tierIndex\n    ) private {\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n//        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(_values.tTransferAmount);\n//        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\n\n        if (_values.tTransferAmount > tAmount) {\n            uint256 tmpValue = _values.tTransferAmount - tAmount;\n            _tTotalExcluded = _tTotalExcluded.add(tmpValue);\n        } else {\n            uint256 tmpValue = tAmount - _values.tTransferAmount;\n            _tTotalExcluded = _tTotalExcluded.sub(tmpValue);\n        }\n        if (_values.rTransferAmount > _values.rAmount) {\n            uint256 tmpValue = _values.rTransferAmount - _values.rAmount;\n            _rTotalExcluded = _rTotalExcluded.add(tmpValue);\n        } else {\n            uint256 tmpValue = _values.rAmount - _values.rTransferAmount;\n            _rTotalExcluded = _rTotalExcluded.sub(tmpValue);\n        }\n        //        _tTotalExcluded = _tTotalExcluded.add(_values.tTransferAmount).sub(tAmount);\n        //        _rTotalExcluded = _rTotalExcluded.add(_values.rTransferAmount).sub(_values.rAmount);\n\n        _takeFees(sender, _values, tierIndex);\n        _reflectFee(_values.rFee, _values.tFee);\n        emit Transfer(sender, recipient, _values.tTransferAmount);\n    }\n\n    function _transferStandard(\n        address sender,\n        address recipient,\n        uint256 tAmount,\n        uint256 tierIndex\n    ) private {\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\n        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\n        _takeFees(sender, _values, tierIndex);\n        _reflectFee(_values.rFee, _values.tFee);\n        emit Transfer(sender, recipient, _values.tTransferAmount);\n    }\n\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\n    // or when increase, decrease exclude value\n    function _transferToExcluded(\n        address sender,\n        address recipient,\n        uint256 tAmount,\n        uint256 tierIndex\n    ) private {\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\n        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(_values.tTransferAmount);\n//        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\n        _tTotalExcluded = _tTotalExcluded.add(_values.tTransferAmount);\n        _rTotalExcluded = _rTotalExcluded.add(_values.rTransferAmount);\n\n        _takeFees(sender, _values, tierIndex);\n        _reflectFee(_values.rFee, _values.tFee);\n        emit Transfer(sender, recipient, _values.tTransferAmount);\n    }\n\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\n    // or when increase, decrease exclude value\n    function _transferFromExcluded(\n        address sender,\n        address recipient,\n        uint256 tAmount,\n        uint256 tierIndex\n    ) private {\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n//        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\n        _tTotalExcluded = _tTotalExcluded.sub(tAmount);\n        _rTotalExcluded = _rTotalExcluded.sub(_values.rAmount);\n\n        _takeFees(sender, _values, tierIndex);\n        _reflectFee(_values.rFee, _values.tFee);\n        emit Transfer(sender, recipient, _values.tTransferAmount);\n    }\n\n    function _takeFees(\n        address sender,\n        FeeValues memory values,\n        uint256 tierIndex\n    ) private {\n        _takeFee(sender, values.tLiquidity, address(this));\n        _takeFee(sender, values.tEchoSystem, feeTiers[tierIndex].ecoSystem);\n        _takeFee(sender, values.tOwner, feeTiers[tierIndex].owner);\n        _takeBurn(sender, values.tBurn);\n    }\n\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\n    // or when increase, decrease exclude value\n    function _takeFee(\n        address sender,\n        uint256 tAmount,\n        address recipient\n    ) private {\n        if (recipient == address(0)) return;\n        if (tAmount == 0) return;\n\n        uint256 currentRate = _getRate();\n        uint256 rAmount = tAmount.mul(currentRate);\n        _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n\n        if (_isExcluded[recipient]) {\n            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\n            _tTotalExcluded = _tTotalExcluded.add(tAmount);\n            _rTotalExcluded = _rTotalExcluded.add(rAmount);\n        }\n\n        emit Transfer(sender, recipient, tAmount);\n    }\n\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\n    // or when increase, decrease exclude value\n    function _takeBurn(address sender, uint256 _amount) private {\n        if (_amount == 0) return;\n        _tOwned[_burnAddress] = _tOwned[_burnAddress].add(_amount);\n        uint256 _rAmount = _amount * _getRate();\n        _rOwned[_burnAddress] = _rOwned[_burnAddress].add(_rAmount);\n        if (_isExcluded[_burnAddress]) {\n            _rTotalExcluded = _rTotalExcluded.add(_rAmount);\n            _tTotalExcluded = _tTotalExcluded.add(_amount);\n        }\n\n        emit Transfer(sender, _burnAddress, _amount);\n    }\n\n    function setMigrationAddress(address _migration) public onlyOwner {\n        migration = _migration;\n    }\n\n    function isMigrationStarted() external view override returns (bool) {\n        return migration != address(0);\n    }\n\n    function migrate(address account, uint256 amount)\n        external\n        override\n        preventBlacklisted(account, \"Safemoon: Migrated account is blacklisted\")\n    {\n        require(migration != address(0), \"Safemoon: Migration is not started\");\n        require(_msgSender() == migration, \"Safemoon: Not Allowed\");\n        _migrate(account, amount);\n    }\n\n    function _migrate(address account, uint256 amount) private {\n        require(account != address(0), \"BEP20: mint to the zero address\");\n\n        _tokenTransfer(_initializerAccount, account, amount, 0, false);\n    }\n\n    function feeTiersLength() public view returns (uint256) {\n        return feeTiers.length;\n    }\n\n    function updateBurnAddress(address _newBurnAddress) external onlyOwner {\n        _burnAddress = _newBurnAddress;\n        excludeFromReward(_newBurnAddress);\n    }\n\n    function withdrawToken(address _token, uint256 _amount) public onlyOwner {\n        ISafemoon(_token).transfer(msg.sender, _amount);\n    }\n\n    function setNumberOfTokenToCollectBNB(uint256 _numToken) public onlyOwner {\n        numTokensToCollectBNB = _numToken;\n    }\n\n    function setNumOfBnbToSwapAndEvolve(uint256 _numBnb) public onlyOwner {\n        numOfBnbToSwapAndEvolve = _numBnb;\n    }\n\n    function withdrawBnb(uint256 _amount) public onlyOwner {\n        payable(msg.sender).transfer(_amount);\n    }\n\n    function addListIgnoreCollectBNBOnTransferAddresses(address[] calldata _addresses) external onlyOwner {\n        uint256 len = _addresses.length;\n        for (uint256 i = 0; i < len; i++) {\n            address addr = _addresses[i];\n            if (listIgnoreCollectBNBAddresses[addr]) continue;\n\n            listIgnoreCollectBNBAddresses[addr] = true;\n            emit AddIgnoreCollectBNBAddress(addr);\n        }\n    }\n\n    function removeListIgnoreCollectBNBOnTransferAddresses(address[] calldata _addresses) external onlyOwner {\n        uint256 len = _addresses.length;\n        for (uint256 i = 0; i < len; i++) {\n            address addr = _addresses[i];\n            if (!listIgnoreCollectBNBAddresses[addr]) continue;\n\n            listIgnoreCollectBNBAddresses[addr] = false;\n            emit RemoveIgnoreCollectBNBAddress(addr);\n        }\n    }\n\n    function _isInCollectBNBWhitelist(address _addr) private view returns (bool) {\n        return listIgnoreCollectBNBAddresses[_addr];\n    }\n\n    function setBridgeBurnAddress(address _burn) public onlyOwner {\n        bridgeBurnAddress = _burn;\n    }\n\n    function setWhitelistMintBurn(address _wl, bool value) public onlyOwner {\n        whitelistMint[_wl] = value;\n    }\n\n    function mint(address user, uint256 amount) public whenNotPaused onlyWhitelistMint {\n        if (msg.sender != owner()) {\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n        }\n        _tokenTransfer(bridgeBurnAddress, user, amount, 0, false);\n    }\n\n    function burn(uint256 amount) public whenNotPaused onlyWhitelistMint {\n        if (msg.sender != owner()) {\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n        }\n        _tokenTransfer(msg.sender, bridgeBurnAddress, amount, 0, false);\n    }\n\n    function setWhitelistPause(address user, bool value) public onlyOwner {\n        whitelistPause[user] = value;\n        emit WhitelistPause(user, value);\n    }\n\n    function setPause(bool value) public onlyOwner {\n        isPaused = value;\n    }\n\n    function setSFMPair(address pair, bool value) public onlyOwner {\n        isSFMPair[pair] = value;\n        emit SetSFMPair(pair, value);\n    }\n}"
    },
    "contracts/SafemoonLib.sol": {
      "content": "/**\n *Submitted for verification at BscScan.com on 2022-05-29\n */\n\npragma solidity 0.8.11;\n\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {}\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[49] private __gap;\n}\n\ninterface ISafemoon {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function migrate(address account, uint256 amount) external;\n\n    function isMigrationStarted() external view returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function createPair(\n        address tokenA,\n        address tokenB,\n        address to\n    ) external returns (address pair);\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function routerTrade() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {}\n\ninterface ISafeSwapTradeRouter {\n    struct Trade {\n        uint256 amountIn;\n        uint256 amountOut;\n        address[] path;\n        address payable to;\n        uint256 deadline;\n    }\n\n    function setRouter(address _router) external;\n\n    function setFeePercent(uint256 _feePercent) external;\n\n    function sePercent(uint256 _percent) external;\n\n    function addFfsWhitelist(address _wl) external;\n\n    function removeFfsWhitelist(address _wl) external;\n\n    function setFeeJar(address _feeJar) external;\n\n    function swapExactTokensForETHAndFeeAmount(Trade calldata trade) external payable;\n\n    function swapTokensForExactETHAndFeeAmount(Trade calldata trade) external payable;\n\n    function swapExactETHForTokensWithFeeAmount(Trade calldata trade, uint256 _feeAmount) external payable;\n\n    function swapETHForExactTokensWithFeeAmount(Trade calldata trade, uint256 _feeAmount) external payable;\n\n    function swapExactTokensForTokensWithFeeAmount(Trade calldata trade) external payable;\n\n    function swapTokensForExactTokensWithFeeAmount(Trade calldata trade) external payable;\n\n    function getSwapFee(\n        uint256 amountIn,\n        uint256 _amountOut,\n        address tokenA,\n        address tokenB\n    ) external view returns (uint256 _fee);\n\n    function getSwapFees(uint256 amountIn, address[] memory path) external view returns (uint256 _fees);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}