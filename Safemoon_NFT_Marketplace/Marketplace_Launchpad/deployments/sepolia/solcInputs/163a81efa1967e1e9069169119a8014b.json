{
  "language": "Solidity",
  "sources": {
    "contracts/Base/BaseNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nabstract contract BaseNFT is Initializable, ERC1155Upgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\n    using Strings for uint256;\n\n    /** @notice Name of the collection */\n    string public name;\n\n    /** @notice Symbol of the collection */\n    string public symbol;\n\n    /** @notice baseUri of the metadata of collection */\n    string public baseUri;\n\n    /**  @notice total mint count of collection */\n    uint256 public totalMint;\n\n    /**  @notice current token id of collection */\n    uint256 internal currentTokenId;\n\n    /**\n    @notice Time at which public sale starts, \n    * preSaleStartTime + preSaleDuration + publicSaleBufferDuration  \n    */\n    uint256 public publicSaleStartTime;\n\n    /** @notice Time at which public sale end (i.e., publicSaleStartTime + publicSaleDuration)\n     */\n    uint256 public publicSaleEndTime;\n\n    /** @notice Max supply of collection */\n    uint256 public maxSupply;\n\n    /**\n    @notice This function is used to get the token id uri  \n    @param _tokenId The token id for which uri is required  \n    @return string The uri of the token  \n    */\n    function uri(uint256 _tokenId) public view override returns (string memory) {\n        return string(abi.encodePacked(baseUri, Strings.toString(_tokenId)));\n    }\n\n    /**\n    @dev This function is used to inrement without checking the overflow condition - save gas  \n    @param i increment it  \n    @return uint256 inremented value  \n    */\n    function unchecked_inc(uint256 i) internal pure returns (uint256) {\n        unchecked {\n            return i + 1;\n        }\n    }\n\n    /**\n    @dev Fuctions to increment token id without checking the overflow condition - save gas \n    */\n    function _incrementTokenId() internal {\n        unchecked {\n            ++currentTokenId;\n        }\n    }\n\n    /**\n    @dev Fuctions to perform OR and AND operations - save gas a bit \n    */\n    function either(bool x, bool y) internal pure returns (bool z) {\n        z = x || y;\n    }\n\n    function both(bool x, bool y) internal pure returns (bool z) {\n        z = x && y;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Base/BaseNFTWithRandom.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Base/BaseNFT.sol\";\nimport \"./utils/VRFConsumerBaseUpgradeable.sol\";\n\ncontract BaseNFTWithRandom is BaseNFT, VRFConsumerBaseUpgradeable {\n    bool internal isrequestfulfilled;\n    uint256 private constant PRIMENUMBER = 111119;\n    uint256 public fee;\n    uint256 private randomNumber;\n    bytes32 internal keyHash;\n    bytes32 private vrfRequestId;\n\n    struct randomConfig {\n        address vrfCoordinator;\n        address link;\n        bytes32 keyHash;\n        uint256 fee;\n    }\n\n    /**\n    @notice Event when random number is requested  \n    @param sender Address of the sender  \n    @param vrfRequestId Chainlink request id of the request  \n    */\n    event RandomNumberRequested(address indexed sender, bytes32 indexed vrfRequestId);\n\n    /**\n    @notice Event when random number is generated  \n    @param requestId Chainlink request id of the request   \n    @param randomNumber Generated random number  \n    */\n    event RandomNumberCompleted(bytes32 indexed requestId, uint256 randomNumber);\n\n    /**\n    @notice This function is used to request random number from chainlink oracle  \n    @dev Make sure there is link token available for fees  \n    @return vrfRequestId chianlink request id  \n    @return lockBlock block number when the random number is generated  \n    */\n    function requestRandomNumber() external onlyOwner returns (bytes32, uint32) {\n        require(block.timestamp >= publicSaleEndTime, \"Public sale is not yet ended\");\n        require(!isrequestfulfilled, \"Already obtained random number\");\n        require(LINK.balanceOf(address(this)) >= fee, \"LINK Balance>fee\");\n\n        uint32 lockBlock = uint32(block.number);\n        vrfRequestId = requestRandomness(keyHash, fee);\n        emit RandomNumberRequested(msg.sender, vrfRequestId);\n        return (vrfRequestId, lockBlock);\n    }\n\n    /**\n    @dev Callback function for chainlink oracle and store the random number  \n    */\n    function fulfillRandomness(bytes32 _requestId, uint256 _randomness) internal override {\n        randomNumber = _randomness;\n        isrequestfulfilled = true;\n        emit RandomNumberCompleted(_requestId, _randomness);\n    }\n\n    /**\n    @notice This function is used to get random asset id  \n    @return assetID Random assetID  \n    */\n    function _getAssetId(uint256 _tokenID) internal view returns (uint256) {\n        require(_tokenID > 0 && _tokenID <= totalMint, \"Invalid token Id\");\n        require(isrequestfulfilled, \"Please wait for random number to be assigned\");\n        uint256 assetID;\n        assetID = PRIMENUMBER * _tokenID + (randomNumber % PRIMENUMBER);\n        assetID = assetID % totalMint;\n        if (assetID == 0) assetID = totalMint;\n        return assetID;\n    }\n\n    /**\n    @notice This function is used to withdraw the LINK tokens \n    @param _amount Amount to withdraw\n    */\n    function withdrawLink(uint256 _amount) external onlyOwner nonReentrant {\n        require(both(_amount > 0, LINK.balanceOf(address(this)) >= _amount), \"Not enough LINK\");\n\n        require(LINK.transfer(msg.sender, _amount), \"Transfer failed.\");\n    }\n\n    // ============================ Getter Functions ============================\n\n    /**\n    @notice This function is used to get random number  \n    @return randomNumber Random number generated by chainlink  \n    */\n    function getRandomNumber() external view returns (uint256) {\n        require(isrequestfulfilled, \"Please wait for random number to be assigned\");\n\n        return randomNumber;\n    }\n\n    /**\n    @notice This function is used to get Link address  \n    @return address Link address  \n    */\n    function getLinkAddress() external view returns (address) {\n        return address(LINK);\n    }\n}\n"
    },
    "contracts/Base/utils/VRFConsumerBaseUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nabstract contract VRFConsumerBaseUpgradeable is Initializable, VRFRequestIDBase {\n    /**\n     * @notice fulfillRandomness handles the VRF response. Your contract must\n     * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n     * @notice principles to keep in mind when implementing your fulfillRandomness\n     * @notice method.\n     *\n     * @dev VRFConsumerBase expects its subcontracts to have a method with this\n     * @dev signature, and will call it once it has verified the proof\n     * @dev associated with the randomness. (It is triggered via a call to\n     * @dev rawFulfillRandomness, below.)\n     *\n     * @param requestId The Id initially returned by requestRandomness\n     * @param randomness the VRF output\n     */\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\n\n    /**\n     * @dev In order to keep backwards compatibility we have kept the user\n     * seed field around. We remove the use of it because given that the blockhash\n     * enters later, it overrides whatever randomness the used seed provides.\n     * Given that it adds no security, and can easily lead to misunderstandings,\n     * we have removed it from usage and can now provide a simpler API.\n     */\n    uint256 private constant USER_SEED_PLACEHOLDER = 0;\n\n    /**\n     * @notice requestRandomness initiates a request for VRF output given _seed\n     *\n     * @dev The fulfillRandomness method receives the output, once it's provided\n     * @dev by the Oracle, and verified by the vrfCoordinator.\n     *\n     * @dev The _keyHash must already be registered with the VRFCoordinator, and\n     * @dev the _fee must exceed the fee specified during registration of the\n     * @dev _keyHash.\n     *\n     * @dev The _seed parameter is vestigial, and is kept only for API\n     * @dev compatibility with older versions. It can't *hurt* to mix in some of\n     * @dev your own randomness, here, but it's not necessary because the VRF\n     * @dev oracle will mix the hash of the block containing your request into the\n     * @dev VRF seed it ultimately uses.\n     *\n     * @param _keyHash ID of public key against which randomness is generated\n     * @param _fee The amount of LINK to send with the request\n     *\n     * @return requestId unique ID for this request\n     *\n     * @dev The returned requestId can be used to distinguish responses to\n     * @dev concurrent requests. It is passed as the first argument to\n     * @dev fulfillRandomness.\n     */\n    function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\n        LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n        // This is the seed passed to VRFCoordinator. The oracle will mix this with\n        // the hash of the block containing this request to obtain the seed/input\n        // which is finally passed to the VRF cryptographic machinery.\n        uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n        // nonces[_keyHash] must stay in sync with\n        // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n        // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n        // This provides protection against the user repeating their input seed,\n        // which would result in a predictable/duplicate output, if multiple such\n        // requests appeared in the same block.\n        nonces[_keyHash] = nonces[_keyHash] + 1;\n        return makeRequestId(_keyHash, vRFSeed);\n    }\n\n    LinkTokenInterface internal LINK;\n    address private vrfCoordinator;\n\n    // Nonces for each VRF key from which randomness has been requested.\n    //\n    // Must stay in sync with VRFCoordinator[_keyHash][this]\n    mapping(bytes32 => uint256) /* keyHash */ /* nonce */\n        private nonces;\n\n    /**\n     * @param _vrfCoordinator address of VRFCoordinator contract\n     * @param _link address of LINK token contract\n     *\n     * @dev https://docs.chain.link/docs/link-token-contracts\n     */\n    function __VRFConsumerBase_init(address _vrfCoordinator, address _link) internal onlyInitializing {\n        vrfCoordinator = _vrfCoordinator;\n        LINK = LinkTokenInterface(_link);\n    }\n\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n    // the origin of the call\n    function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n        require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n        fulfillRandomness(requestId, randomness);\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  ) internal pure returns (uint256) {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n"
    },
    "contracts/Sales/NFTWithPresaleWithRandomDelayed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Base/BaseNFTWithPresale.sol\";\nimport \"../Base/BaseNFTDelayed.sol\";\nimport \"../Base/BaseNFTWithRandom.sol\";\n\ncontract NFTWithPresaleWithRandomDelayed is BaseNFTWithPresale, BaseNFTDelayed, BaseNFTWithRandom {\n    string public saleType;\n    uint256 public version;\n\n    /**\n    @notice This is initializer function is used to deploy new sale contract  \n    @param _name Collection name  \n    @param _symbol Collection symbol  \n    @param _saleType sale Type\n    @param _baseUri Collection Base URI  \n    @param _maxSupply Collection max supply  \n    @param _saleId backend sale id   \n    @param _preSaleConfig Pre Sale configuration data   \n    @param _publicSaleConfig Public sale configuration data  \n    @param _signerAddress Whitelist signer address of presale buyers\n    @param _randomConfig random number configuration data  \n    */\n    function __NFTWithPresaleWithRandomDelayed_init(\n        string memory _name,\n        string memory _symbol,\n        string memory _saleType,\n        string memory _baseUri,\n        uint256 _maxSupply,\n        string memory _saleId,\n        preSaleConfig memory _preSaleConfig,\n        publicSaleConfig memory _publicSaleConfig,\n        address _signerAddress,\n        randomConfig memory _randomConfig\n    ) external initializer {\n        require(both(_maxSupply > 0, _maxSupply <= 100000), \"Init: Invalid max supply\");\n\n        require(\n            both(_preSaleConfig._limitSupplyInPreSale > 0, _preSaleConfig._limitSupplyInPreSale <= _maxSupply),\n            \"Init: Invalid presale supply\"\n        );\n\n        require(block.timestamp <= _preSaleConfig._preSaleStartTime, \"Init: Invalid PreSale Start Time\");\n\n        require(\n            both(_preSaleConfig._preSaleDuration > 0, _publicSaleConfig._publicSaleDuration > 0),\n            \"Init: Sale duration>0\"\n        );\n\n        require(\n            both(_preSaleConfig._preSaleMintCost >= 100, _publicSaleConfig._publicSaleMintCost >= 100),\n            \"Init: Invalid Token Cost\"\n        );\n\n        require(\n            both(\n                _preSaleConfig._maxTokenPerMintPreSale > 0,\n                _preSaleConfig._maxTokenPerMintPreSale <= _preSaleConfig._limitSupplyInPreSale\n            ),\n            \"Init: Invalid maxTokenPerMint in presale\"\n        );\n\n        require(_publicSaleConfig._maxTokenPerMintPublicSale > 0, \"Init: Invalid MaxTokenPerMint of public sale\");\n\n        require(\n            both(\n                _publicSaleConfig._maxTokenPerPersonPublicSale >= _publicSaleConfig._maxTokenPerMintPublicSale,\n                _publicSaleConfig._maxTokenPerPersonPublicSale <= _maxSupply\n            ),\n            \"Init: Invalid MaxTokenPerPerson of public sale\"\n        );\n\n        require(_signerAddress != address(0), \"Init: Invalid SignerAddress\");\n\n        __ERC1155_init(_baseUri);\n        __Ownable_init();\n        __VRFConsumerBase_init(_randomConfig.vrfCoordinator, _randomConfig.link);\n\n        name = _name;\n        symbol = _symbol;\n        saleType = _saleType;\n        baseUri = _baseUri;\n        maxSupply = _maxSupply;\n        saleId = _saleId;\n        keyHash = _randomConfig.keyHash;\n        fee = _randomConfig.fee;\n\n        preSaleMintCost = _preSaleConfig._preSaleMintCost;\n        publicSaleMintCost = _publicSaleConfig._publicSaleMintCost;\n        preSaleStartTime = _preSaleConfig._preSaleStartTime;\n        unchecked {\n            preSaleEndTime = preSaleStartTime + _preSaleConfig._preSaleDuration;\n            publicSaleBufferDuration = _publicSaleConfig._publicSaleBufferDuration;\n            publicSaleStartTime =\n                preSaleEndTime +\n                defaultPublicSaleBufferDuration +\n                _publicSaleConfig._publicSaleBufferDuration;\n            publicSaleEndTime = publicSaleStartTime + _publicSaleConfig._publicSaleDuration;\n        }\n        maxTokenPerMintPreSale = _preSaleConfig._maxTokenPerMintPreSale;\n        maxTokenPerMintPublicSale = _publicSaleConfig._maxTokenPerMintPublicSale;\n        maxTokenPerPersonPublicSale = _publicSaleConfig._maxTokenPerPersonPublicSale;\n        limitSupplyInPreSale = _preSaleConfig._limitSupplyInPreSale;\n        signerAddress = _signerAddress;\n        version = 1;\n        factory = msg.sender;\n    }\n\n    /**\n    @notice This function is used to reveal the token can only be called by owner  \n    @dev TokensRevealed and URI event is emitted  \n    */\n    function revealTokens(string memory _uri) external onlyOwner publicSaleEnded {\n        require(isrequestfulfilled, \"random number to be assigned\");\n        _revealTokens();\n        _updateURI(_uri);\n    }\n\n    /**\n    @notice This function is used to get random asset id  \n    @return assetID Random assetID  \n    */\n    function getAssetId(uint256 _tokenID) external view returns (uint256) {\n        require(revealed, \"reveal token first\");\n\n        return _getAssetId(_tokenID);\n    }\n\n    /**\n    @notice This function is used to create Airdrop  \n    @dev It can only be called by owner  \n    @param _list list of addresses  \n    @param _shares preSaleShare and publicsale share in Airdrop\n    */\n    function createAirdrop(address[] calldata _list, uint256[2] calldata _shares) external isApproved onlyOwner {\n        require(!revealed, \"Airdrop: Invalid action after reveal\");\n\n        _initiateAirdrop(_list, _shares);\n    }\n\n    /**\n    @notice This function is used to update version of contract\n    @param _version version number\n    */\n    function setVersion(uint256 _version) external onlyOwner {\n        version = _version;\n    }\n}\n"
    },
    "contracts/Base/BaseNFTWithPresale.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./BaseNFTSale.sol\";\nimport \"./BaseNFTAirdrop.sol\";\n\ncontract BaseNFTWithPresale is BaseNFTSale, BaseNFTAirdrop {\n    struct preSaleConfig {\n        uint256 _preSaleMintCost;\n        uint256 _preSaleStartTime;\n        uint256 _preSaleDuration;\n        uint256 _maxTokenPerMintPreSale;\n        uint256 _limitSupplyInPreSale;\n    }\n\n    struct publicSaleConfig {\n        uint256 _publicSaleMintCost;\n        uint256 _publicSaleBufferDuration;\n        uint256 _publicSaleDuration;\n        uint256 _maxTokenPerMintPublicSale;\n        uint256 _maxTokenPerPersonPublicSale;\n    }\n\n    /** @notice Cost to mint one token in presale */\n    uint256 public preSaleMintCost;\n\n    /**  @notice Time when presale starts */\n    uint256 public preSaleStartTime;\n\n    /** @notice Time at which preSale end, calculated preSaleStartTime + preSaleDuration */\n    uint256 public preSaleEndTime;\n\n    /** @notice Default buffer time between presale and public sale, constant 30 seconds */\n    uint256 internal constant defaultPublicSaleBufferDuration = 30;\n\n    /** @notice Buffer time to add between presale and public sale i.e 30 + something... */\n    uint256 public publicSaleBufferDuration;\n\n    /** @notice Maximum No of token can be purchased by user in single tx in pre sale */\n    uint256 public maxTokenPerMintPreSale;\n\n    /** @notice Pre Sale supply limit */\n    uint256 public limitSupplyInPreSale;\n\n    /** @notice Hash map to keep count of token minted by buyer in pre sale */\n    mapping(address => uint256) public presalerListPurchases;\n\n    modifier preSaleEnded() {\n        _onlyWhenPresaleEnded();\n        _;\n    }\n\n    modifier isSaleOff() {\n        _isSaleOff();\n        _;\n    }\n\n    /**\n    @notice This function is used to update presale and public sale parameters  \n    @dev It can only be called by owner  \n    @param _preSaleMintCost Cost to mint one token in presale   \n    @param _preSaleStartTime Time when presale starts  \n    @param _preSaleDuration Duration for which presale is live  \n    @param _maxTokenPerMintPreSale Maximum No of token can be purchased by user in single tx in pre sale  \n    @param _limitSupplyInPreSale Pre Sale supply limit  \n    @param _publicSaleMintCost Cost to mint one token in pubic sale  \n    @param _publicSaleBufferDuration Buffer time to add between presale and public sale i.e 30 + something...  \n    @param _publicSaleDuration Duration for which public sales is live  \n    @param _maxTokenPerMintPublicSale Maximum No of token can be purchased by user in single tx in public sale  \n    @param _maxTokenPerPersonPublicSale Maximum No of token can be purchased by user as whole in public sale  \n    */\n    function updatePreSale(\n        uint256 _preSaleMintCost,\n        uint256 _preSaleStartTime,\n        uint256 _preSaleDuration,\n        uint256 _maxTokenPerMintPreSale,\n        uint256 _limitSupplyInPreSale,\n        uint256 _publicSaleMintCost,\n        uint256 _publicSaleBufferDuration,\n        uint256 _publicSaleDuration,\n        uint256 _maxTokenPerMintPublicSale,\n        uint256 _maxTokenPerPersonPublicSale\n    ) external onlyOwner {\n        require(\n            either(\n                both(block.timestamp < preSaleStartTime, _preSaleStartTime > block.timestamp),\n                preSaleStartTime == _preSaleStartTime\n            ),\n            \"Invalid Start Time\"\n        );\n\n        require(block.timestamp < preSaleEndTime, \"presale is ended\");\n\n        require(\n            both(\n                _limitSupplyInPreSale > totalMint - publicSaleAirdropCount,\n                _limitSupplyInPreSale <= maxSupply - publicSaleAirdropCount\n            ),\n            \"incorrect presale limit supply\"\n        );\n\n        require(both(_preSaleMintCost > 100, _publicSaleMintCost > 100), \"Token cost> 100 wei\");\n        require(both(_preSaleDuration > 0, _publicSaleDuration > 0), \"sale duration>0\");\n        require(\n            both(_maxTokenPerMintPreSale > 0, _maxTokenPerMintPreSale <= _limitSupplyInPreSale),\n            \"Invalid maximum token per mint in presale\"\n        );\n\n        require(_maxTokenPerMintPublicSale > 0, \"Maximum token per mint in public sale > 0\");\n\n        require(\n            both(_maxTokenPerPersonPublicSale <= maxSupply, _maxTokenPerPersonPublicSale >= _maxTokenPerMintPublicSale),\n            \"Invalid Max Token minted per person in public sale\"\n        );\n\n        preSaleMintCost = _preSaleMintCost;\n        publicSaleMintCost = _publicSaleMintCost;\n\n        maxTokenPerMintPreSale = _maxTokenPerMintPreSale;\n        limitSupplyInPreSale = _limitSupplyInPreSale;\n\n        preSaleStartTime = _preSaleStartTime;\n        unchecked {\n            preSaleEndTime = _preSaleStartTime + _preSaleDuration;\n\n            publicSaleBufferDuration = _publicSaleBufferDuration;\n            publicSaleStartTime = preSaleEndTime + defaultPublicSaleBufferDuration + _publicSaleBufferDuration;\n            publicSaleEndTime = publicSaleStartTime + _publicSaleDuration;\n        }\n        maxTokenPerMintPublicSale = _maxTokenPerMintPublicSale;\n        maxTokenPerPersonPublicSale = _maxTokenPerPersonPublicSale;\n    }\n\n    /**\n    @notice This function is used to update public sale parameters  \n    @dev It can only be called by owner  \n    @param _publicSaleMintCost Cost to mint one token in pubic sale  \n    @param _publicSaleBufferDuration Buffer time to add between presale and public sale i.e 30 + something...  \n    @param _publicSaleDuration Duration for which public sales is live  \n    @param _maxTokenPerMintPublicSale Maximum No of token can be purchased by user in single tx in public sale  \n    @param _maxTokenPerPersonPublicSale Maximum No of token can be purchased by user as whole in public sale  \n    */\n    function updatePublicSale(\n        uint256 _publicSaleMintCost,\n        uint256 _publicSaleBufferDuration,\n        uint256 _publicSaleDuration,\n        uint256 _maxTokenPerMintPublicSale,\n        uint256 _maxTokenPerPersonPublicSale\n    ) external onlyOwner {\n        uint256 _publicSaleStartTime;\n        unchecked {\n            _publicSaleStartTime = preSaleEndTime + defaultPublicSaleBufferDuration + _publicSaleBufferDuration;\n        }\n        require(\n            either(\n                both(block.timestamp < publicSaleStartTime, _publicSaleStartTime > block.timestamp),\n                publicSaleStartTime == _publicSaleStartTime\n            ),\n            \"Invalid Start Time\"\n        );\n        require(block.timestamp < publicSaleEndTime, \"Public sale is ended\");\n        require(_publicSaleMintCost > 100, \"Invalid Token cost\");\n        require(_publicSaleDuration > 0, \"Public sale duration > 0\");\n        require(\n            both(\n                _maxTokenPerMintPublicSale > 0,\n                both(\n                    _maxTokenPerPersonPublicSale <= maxSupply,\n                    _maxTokenPerPersonPublicSale >= _maxTokenPerMintPublicSale\n                )\n            ),\n            \"Maximum token minted per person/per mint not correct\"\n        );\n\n        publicSaleMintCost = _publicSaleMintCost;\n        publicSaleBufferDuration = _publicSaleBufferDuration;\n        publicSaleStartTime = _publicSaleStartTime;\n        publicSaleEndTime = publicSaleStartTime + _publicSaleDuration;\n        maxTokenPerMintPublicSale = _maxTokenPerMintPublicSale;\n        maxTokenPerPersonPublicSale = _maxTokenPerPersonPublicSale;\n    }\n\n    /**\n    @notice This function is used to buy and mint nft in presale  \n    @dev Random token id is generated for assigned to buyer  \n    @param tokenSignQuantity The token quantity that whitelisted buyer can mint  \n    @param tokenQuantity The token quantity that whitelisted buyer wants to mint  \n    @param signature The signature sent by the buyer  \n    */\n    function preSaleBuy(\n        uint256 tokenSignQuantity,\n        uint256 tokenQuantity,\n        bytes memory signature\n    ) external payable isApproved {\n        require(isPreSaleLive(), \"presale is not live\");\n\n        bytes32 hash = hashforPresale(msg.sender, tokenSignQuantity);\n\n        require(matchAddressSigner(hash, signature), \"invalid-signature\");\n\n        verifyTokenQtyInPresale(tokenQuantity);\n\n        unchecked {\n            require(tokenSignQuantity != 0, \"TokenSignQuantity > 0\");\n            require(\n                presalerListPurchases[msg.sender] + tokenQuantity <= tokenSignQuantity,\n                \"exceeds maximum allowed limit\"\n            );\n\n            require((preSaleMintCost * tokenQuantity) <= msg.value, \"insufficient Amount paid\");\n        }\n\n        _mintTo(msg.sender, tokenQuantity);\n\n        unchecked {\n            presalerListPurchases[msg.sender] += tokenQuantity;\n        }\n    }\n\n    /**\n    @notice This function is used to buy and mint nft in public sale  \n    @param tokenQuantity The token quantity that buyer wants to mint  \n    */\n    function publicSaleBuy(uint256 tokenQuantity) public payable preSaleEnded {\n        _publicSaleMint(tokenQuantity);\n    }\n\n    /**\n    @notice This function is used to buy and mint nft in presale   \n    @dev Random token id is generated for assigned to buyer  \n    @param tokenSignQuantity The token quantity that whitelisted buyer can mint   \n    @param tokenQuantity The token quantity that whitelisted buyer wants to mint   \n    @param affiliatedUser The affiliated user address  \n    @param commission The commission percentage that will be paid to affiliated user   \n    @param signature The signature sent by the buyer   \n    */\n    function preSaleBuyAffiliated(\n        uint256 tokenSignQuantity,\n        uint256 tokenQuantity,\n        address affiliatedUser,\n        uint256 commission,\n        bytes memory signature\n    ) external payable isApproved {\n        require(isPreSaleLive(), \"presale is not live\");\n        require(affiliatedUser != address(0), \"Invalid Affiliated user\");\n\n        bytes32 hash = hashforPresaleAffiliated(msg.sender, tokenSignQuantity, affiliatedUser, commission);\n\n        require(matchAddressSigner(hash, signature), \"invalid-signature\");\n\n        verifyTokenQtyInPresale(tokenQuantity);\n\n        unchecked {\n            require(tokenSignQuantity != 0, \"TokenSignQuantity > 0\");\n            require(\n                presalerListPurchases[msg.sender] + tokenQuantity <= tokenSignQuantity,\n                \"exceeds maximum allowed limit\"\n            );\n\n            require((preSaleMintCost * tokenQuantity) <= msg.value, \"insufficient amount paid\");\n        }\n\n        _mintTo(msg.sender, tokenQuantity);\n\n        unchecked {\n            totalMintReferral += tokenQuantity;\n            presalerListPurchases[msg.sender] += tokenQuantity;\n            uint256 receivedAmount = ((preSaleMintCost * commission) * tokenQuantity) / 100;\n            affiliatedUserBalance[affiliatedUser] += receivedAmount;\n            affiliatedWei += receivedAmount;\n        }\n    }\n\n    /**\n    @notice This function is used to buy and mint nft in public sale for affiliation feature  \n    @param tokenQuantity The token quantity that buyer wants to mint  \n    @param affiliatedUser The affiliated user address  \n    @param commission The commission percentage that will be paid to affiliated user  \n    @param signature The signature sent by the buyer  \n    */\n    function publicSaleBuyAffiliated(\n        uint256 tokenQuantity,\n        address affiliatedUser,\n        uint256 commission,\n        bytes memory signature\n    ) public payable preSaleEnded {\n        require(affiliatedUser != address(0), \"Invalid address\");\n        _publicSaleMintAffiliated(tokenQuantity, affiliatedUser, commission, signature);\n    }\n\n    /**\n    @notice This function is used to perform Airdrop operation  \n    @dev This function is called by only owner when presale and public sales are not live \n    @param list a list to addresses which will get airdrop  \n    @param shares an array of presale and public sale shares \n    */\n    function _initiateAirdrop(address[] calldata list, uint256[2] calldata shares) internal isSaleOff {\n        if (isPreSaleStarted()) {\n            require(shares[0] == 0, \"Airdrop: Invalid Presale Share\");\n        }\n\n        require(shares[0] + preSaleAirdropCount <= limitSupplyInPreSale, \"Airdrop: Presale share not in range\");\n\n        _createAirdrop(list, shares);\n\n        unchecked {\n            preSaleAirdropCount += shares[0];\n            publicSaleAirdropCount += shares[1];\n        }\n    }\n\n    /**\n    @dev This function is used to verify the token quantity entered by buyer \n    @param _tokenQuantity token quantity entered by the buyer \n    */\n    function verifyTokenQtyInPresale(uint256 _tokenQuantity) private view {\n        require(both(_tokenQuantity > 0, _tokenQuantity <= maxTokenPerMintPreSale), \"Invalid Token Quantity\");\n        unchecked {\n            require(\n                _tokenQuantity + totalMint <= limitSupplyInPreSale + publicSaleAirdropCount,\n                \"exceeding presale supply\"\n            );\n        }\n    }\n\n    // ============================ Getter Functions ============================\n\n    /**\n    @notice This function is used to check if pre sale is started  \n    @return bool Return true if presale is started or not  \n    */\n    function isPreSaleLive() public view returns (bool) {\n        return both(block.timestamp >= preSaleStartTime, block.timestamp <= preSaleEndTime);\n    }\n\n    /**\n    @notice This function is used to check whether the presale has already started or happened  \n    */\n    function isPreSaleStarted() private view returns (bool) {\n        return block.timestamp >= preSaleStartTime;\n    }\n\n    /**\n    @notice This function is used in modifier to check whether any sale is running or not (reduces code size)  \n    */\n    function _isSaleOff() internal view {\n        require(\n            both(\n                either(block.timestamp < publicSaleStartTime, block.timestamp > publicSaleEndTime),\n                either(block.timestamp < preSaleStartTime, block.timestamp > preSaleEndTime)\n            ),\n            \"Airdrop:Invalid Time\"\n        );\n    }\n\n    /**\n    @notice This function is used in modifier to check whether presale is ended or not (reduces code size)  \n    */\n    function _onlyWhenPresaleEnded() internal view {\n        require(block.timestamp > preSaleEndTime, \"the pre-sale is not yet ended\");\n    }\n}\n"
    },
    "contracts/Base/BaseNFTDelayed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract BaseNFTDelayed {\n    /// @notice Boolean to check if NFTs are revealed\n    bool public revealed;\n\n    /**\n    @notice Event when token are revealed  \n    @param time Time when token are revealed  \n    */\n    event TokensRevealed(uint256 time);\n\n    /**\n    @notice This function is used to reveal the token can only be called by owner  \n    @dev TokensRevealed and URI event is emitted  \n    */\n    function _revealTokens() internal {\n        require(!revealed, \"Already revealed\");\n        revealed = true;\n        emit TokensRevealed(block.timestamp);\n    }\n}\n"
    },
    "contracts/Base/BaseNFTSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./BaseNFT.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nabstract contract BaseNFTSale is BaseNFT {\n    using ECDSA for bytes32;\n\n    /** @notice total mint count of collection by referral */\n    uint256 public totalMintReferral;\n\n    /** @notice backend saleid of drop */\n    string public saleId;\n\n    /** @notice Cost to mint one token in pubic sale */\n    uint256 public publicSaleMintCost;\n\n    /** @notice Maximum No of token can be purchased by user in single tx in public sale  */\n    uint256 public maxTokenPerMintPublicSale;\n\n    /** @notice Maximum No of token can be purchased by user in one public sale  */\n    uint256 public maxTokenPerPersonPublicSale;\n\n    /** @notice Hash map to keep count of token minted by buyer in public sale */\n    mapping(address => uint256) public publicsalerListPurchases;\n\n    /** @notice Hash map to keep count of earnings of affiliated user */\n    mapping(address => uint256) public affiliatedUserBalance;\n\n    /** @notice total earnings of all affiliated users */\n    uint256 public affiliatedWei;\n\n    /** @notice address of the signer */\n    address public signerAddress;\n\n    /** @notice address of the feeReceiver */\n    address public feeReceiver;\n\n    /** @notice nftDrop factory address */\n    address public factory;\n\n    /** @notice nftDrop fee set by the factory owner or admin*/\n    uint256 public dropFee;\n\n    /** @notice nftDrop fee collected */\n    uint256 public feesCollected;\n\n    /** @notice a variable for tracking whether the nftDrop is approved by the admin or not */\n    uint256 public isDropApproved;\n\n    modifier publicSaleLive() {\n        _onlyWhenPublicSaleLive();\n        _;\n    }\n\n    modifier publicSaleEnded() {\n        _onlyWhenPublicSaleEnded();\n        _;\n    }\n\n    modifier isFactory() {\n        require(msg.sender == factory, \"!auth\");\n        _;\n    }\n\n    modifier isApproved() {\n        require(isDropApproved == uint256(1), \"!approved\");\n        _;\n    }\n\n    /**\n    @notice Event for uri change  \n    @param uri New uri of the collection  \n    */\n    event URI(string uri);\n\n    /**\n    @notice This function is used to buy and mint nft in public sale  \n    @param tokenQuantity The token quantity that buyer wants to mint  \n    */\n    function _publicSaleMint(uint256 tokenQuantity) internal isApproved publicSaleLive {\n        verifyTokenQuantity(tokenQuantity);\n        _mintTo(msg.sender, tokenQuantity);\n\n        unchecked {\n            publicsalerListPurchases[msg.sender] += tokenQuantity;\n        }\n    }\n\n    /**\n    @notice This function is used to buy and mint nft in public sale for affiliation feature  \n    @param tokenQuantity The token quantity that buyer wants to mint  \n    @param affiliatedUser The affiliated user address  \n    @param commission The commission percentage that will be paid to affiliated user  \n    @param signature The signature sent by the buyer  \n    */\n    function _publicSaleMintAffiliated(\n        uint256 tokenQuantity,\n        address affiliatedUser,\n        uint256 commission,\n        bytes memory signature\n    ) internal isApproved publicSaleLive {\n        require(affiliatedUser != address(0), \"!user\");\n\n        bytes32 hash = hashforPublicSaleAffiliated(msg.sender, affiliatedUser, commission);\n        require(matchAddressSigner(hash, signature), \"invalid-signature\");\n\n        verifyTokenQuantity(tokenQuantity);\n        _mintTo(msg.sender, tokenQuantity);\n        unchecked {\n            totalMintReferral += tokenQuantity;\n            uint256 receivedAmount = ((publicSaleMintCost * commission) * tokenQuantity) / 100;\n            affiliatedUserBalance[affiliatedUser] += receivedAmount;\n            affiliatedWei += receivedAmount;\n            publicsalerListPurchases[msg.sender] += tokenQuantity;\n        }\n    }\n\n    /**\n    @notice This function is used to withdraw ether from contract  \n    */\n    function withdrawWei(uint256 _amount) external onlyOwner nonReentrant {\n        require(_amount > 0, \"Amount>0\");\n        uint256 totalDropFee;\n        unchecked {\n            require(address(this).balance - affiliatedWei >= _amount, \"Not enough eth\");\n            totalDropFee = (_amount * dropFee) / 10000;\n        }\n        (bool success, ) = msg.sender.call{value: _amount - totalDropFee}(\"\");\n        require(success, \"Tx failed.\");\n        if (totalDropFee != 0) {\n            (bool flag, ) = payable(feeReceiver).call{value: totalDropFee}(\"\");\n            require(flag, \"Fee:Tx failed.\");\n            unchecked {\n                feesCollected += totalDropFee;\n            }\n        }\n    }\n\n    /**\n    @notice This function is used to withdraw affiliated user ether from contract  \n    */\n    function withdrawAffiliatedFunds(address[] memory affiliatedUser) external onlyOwner publicSaleEnded nonReentrant {\n        checkAffiliatedFunds(affiliatedUser);\n        uint256 balance;\n        uint256 sum;\n        uint256 totalDropFee;\n        uint256 _fee;\n        for (uint256 i; i < affiliatedUser.length; i = unchecked_inc(i)) {\n            balance = affiliatedUserBalance[affiliatedUser[i]];\n            unchecked {\n                _fee = (balance * dropFee) / 10000;\n                affiliatedUserBalance[affiliatedUser[i]] = 0;\n            }\n            (bool success, ) = msg.sender.call{value: balance - _fee}(\"\");\n            require(success, \"Tx failed.\");\n            unchecked {\n                sum += balance;\n                totalDropFee += _fee;\n            }\n        }\n        unchecked {\n            affiliatedWei -= sum;\n        }\n\n        if (totalDropFee != 0) {\n            (bool flag, ) = payable(feeReceiver).call{value: totalDropFee}(\"\");\n            require(flag, \"Fee:Tx failed.\");\n            unchecked {\n                feesCollected += totalDropFee;\n            }\n        }\n    }\n\n    /**\n    @notice This function is used to transfer affiliated user ether from contract  \n    */\n    function transferAffiliatedFunds(address[] memory affiliatedUser) external onlyOwner publicSaleEnded {\n        checkAffiliatedFunds(affiliatedUser);\n        uint256 balance;\n        uint256 sum;\n        uint256 totalDropFee;\n        uint256 _fee;\n        for (uint256 i; i < affiliatedUser.length; i = unchecked_inc(i)) {\n            balance = affiliatedUserBalance[affiliatedUser[i]];\n            unchecked {\n                _fee = (balance * dropFee) / 10000;\n                affiliatedUserBalance[affiliatedUser[i]] = 0;\n            }\n            (bool success, ) = affiliatedUser[i].call{value: balance - _fee}(\"\");\n            require(success, \"Transfer failed.\");\n            unchecked {\n                sum += balance;\n                totalDropFee += _fee;\n            }\n        }\n        unchecked {\n            affiliatedWei -= sum;\n        }\n\n        if (totalDropFee != 0) {\n            (bool flag, ) = payable(feeReceiver).call{value: totalDropFee}(\"\");\n\n            require(flag, \"Fee:Tx failed.\");\n            unchecked {\n                feesCollected += totalDropFee;\n            }\n        }\n    }\n\n    /**\n    @notice This function is used to update signer address  \n    */\n    function updateSignerAddress(address _signerAddress) external onlyOwner {\n        require(_signerAddress != address(0), \"!signer\");\n        signerAddress = _signerAddress;\n    }\n\n    /**\n    @notice This function is used to update uri  \n    */\n    function updateURI(string memory _uri) public onlyOwner {\n        _updateURI(_uri);\n    }\n\n    /**\n    @dev can be called from factory contract\n    @notice This function is used to set drop fee and fee receiver wallet  \n    */\n    function setDropFee(uint256 _fee, address _wallet) external isFactory {\n        dropFee = _fee;\n        feeReceiver = _wallet;\n    }\n\n    /**\n    @dev can be called from factory contract\n    @notice This function is used to approve the nftDrop    */\n    function setDropApproval() external isFactory {\n        require(isDropApproved == uint256(0), \"already approved\");\n        isDropApproved = uint256(1);\n    }\n\n    // ============================ Getter Functions ============================\n\n    /**\n    @notice This function is used to check if public sale is started  \n    @return bool Return true if public is started or not  \n    */\n    function isPublicSaleLive() public view returns (bool) {\n        return both(block.timestamp >= publicSaleStartTime, block.timestamp <= publicSaleEndTime);\n    }\n\n    function _onlyWhenPublicSaleLive() internal view {\n        require(isPublicSaleLive(), \"Public Sale-not live\");\n    }\n\n    function _onlyWhenPublicSaleEnded() internal view {\n        require(block.timestamp >= publicSaleEndTime, \"public sale not yet ended\");\n    }\n\n    /**\n    @notice This function is used to get next tokenId \n    @return uint256 tokenID  \n    */\n    function getNextToken() internal returns (uint256) {\n        require(totalMint <= maxSupply, \"exceed max Supply\");\n        _incrementTokenId();\n        return currentTokenId;\n    }\n\n    /**\n    @dev This function is used to check if each affiliated user does have user balance or not   \n    @param affiliatedUser array of affiliation user address  \n    */\n    function checkAffiliatedFunds(address[] memory affiliatedUser) public view {\n        require(both(affiliatedUser.length != 0, affiliatedWei != 0), \"Nothing to withdraw\");\n        for (uint256 i; i < affiliatedUser.length; i = unchecked_inc(i)) {\n            string memory errorString = string(abi.encodePacked(\"No balance to transfer for \", affiliatedUser[i]));\n            require(affiliatedUserBalance[affiliatedUser[i]] != 0, errorString);\n        }\n    }\n\n    /**\n    @dev This function is used to verify the whitelisted buyer using signature  \n    @param hash The hash message generated by the function hashMessage  \n    @param signature The signature sent by the buyer  \n    @return boolean value true if the signature is verified else false  \n    */\n    function matchAddressSigner(bytes32 hash, bytes memory signature) public view returns (bool) {\n        return signerAddress == hash.recover(signature);\n    }\n\n    /**\n    @notice This internal function is used to update URI  \n    */\n    function _updateURI(string memory _uri) internal {\n        _setURI(_uri);\n        baseUri = _uri;\n        emit URI(_uri);\n    }\n\n    /**\n    @dev This internal function is used to verify the token quantity entered by buyer \n    @param _tokenQuantity token quantity entered by the buyer \n    */\n    function verifyTokenQuantity(uint256 _tokenQuantity) internal {\n        unchecked {\n            require(both(_tokenQuantity > 0, _tokenQuantity <= maxTokenPerMintPublicSale), \"Invalid Token Quantity\");\n            require((totalMint + _tokenQuantity) <= maxSupply, \"exceed max supply.\");\n            require((publicSaleMintCost * _tokenQuantity) <= msg.value, \"pay minimum token price\");\n            require(\n                publicsalerListPurchases[msg.sender] + _tokenQuantity <= maxTokenPerPersonPublicSale,\n                \"exceed maximum allowed limit\"\n            );\n        }\n    }\n\n    /**\n    @dev This internal function is used to mint token quantity to receiver \n    @param tokenQuantity token quantity entered by the buyer \n    */\n    function _mintTo(address receiver, uint256 tokenQuantity) internal {\n        uint256 currentId;\n\n        for (uint256 i; i < tokenQuantity; i = unchecked_inc(i)) {\n            currentId = getNextToken();\n            totalMint = unchecked_inc(totalMint);\n            _mint(receiver, currentId, 1, \"0x\");\n        }\n    }\n\n    // ============================ Utility Functions ============================\n\n    /**\n    @dev This function is used to generate hash message in case of affiliated buy of public sale \n    @param sender The address of the NFT recipient\n    @param affiliatedUser The affiliated user address\n    @param commission The commission percentage that will be paid to affiliated user\n    @return hash generated by the function\n    */\n    function hashforPublicSaleAffiliated(\n        address sender,\n        address affiliatedUser,\n        uint256 commission\n    ) public view returns (bytes32) {\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                \"\\x19Ethereum Signed Message:\\n32\",\n                keccak256(abi.encodePacked(sender, block.chainid, affiliatedUser, commission, saleId, address(this)))\n            )\n        );\n        return hash;\n    }\n\n    /**\n    @dev This function is used to generate hash message during presale buy with whitelisted address\n    @param sender The address of the NFT recipient\n    @param tokenQuantity tokenQuantity\n    @return hash generated by the function\n    */\n    function hashforPresale(address sender, uint256 tokenQuantity) public view returns (bytes32) {\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                \"\\x19Ethereum Signed Message:\\n32\",\n                keccak256(abi.encodePacked(sender, block.chainid, tokenQuantity, saleId, address(this)))\n            )\n        );\n        return hash;\n    }\n\n    /**\n    @dev This function is used to generate hash message during presale buy with affiliated link\n    @param sender The address of the NFT recipient\n    @param tokenQuantity tokenQuantity\n    @param affiliatedUser The affiliated user address\n    @param commission The commission percentage that will be paid to affiliated user\n    @return hash generated by the function\n    */\n    function hashforPresaleAffiliated(\n        address sender,\n        uint256 tokenQuantity,\n        address affiliatedUser,\n        uint256 commission\n    ) public view returns (bytes32) {\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                \"\\x19Ethereum Signed Message:\\n32\",\n                keccak256(\n                    abi.encodePacked(\n                        sender,\n                        block.chainid,\n                        tokenQuantity,\n                        affiliatedUser,\n                        commission,\n                        saleId,\n                        address(this)\n                    )\n                )\n            )\n        );\n        return hash;\n    }\n}\n"
    },
    "contracts/Base/BaseNFTAirdrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./BaseNFT.sol\";\n\nabstract contract BaseNFTAirdrop is BaseNFT {\n    uint256 public preSaleAirdropCount;\n\n    uint256 public publicSaleAirdropCount;\n\n    /**\n    @notice This function is used to create Airdrop  \n    @dev It can only be called by owner  \n    @param list list of addresses  \n    @param shares an array of preSaleShare and PublicSaleShare in Airdrop   \n    */\n    function _createAirdrop(address[] calldata list, uint256[2] calldata shares) internal {\n        uint256 dropSupply = list.length;\n        unchecked {\n            require(both(dropSupply != 0, dropSupply == (shares[0] + shares[1])), \"Airdrop: Mismatch-Input\");\n\n            require(dropSupply + totalMint <= maxSupply, \"Airdrop: exceeds max Supply\");\n\n            for (uint256 i; i < dropSupply; i = unchecked_inc(i)) {\n                require(list[i] != address(0), \"Invalid recipient\");\n\n                _getNextToken();\n\n                totalMint = unchecked_inc(totalMint);\n\n                _mint(list[i], currentTokenId, 1, \"0x\");\n            }\n        }\n    }\n\n    /** \n    @dev This function is used to get next valid token ID to mint  \n    */\n    function _getNextToken() internal {\n        require(both(totalMint <= maxSupply, currentTokenId < maxSupply), \"All Values assigned\");\n\n        _incrementTokenId();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/Sales/NFTWithoutPresaleWithRandomDelayed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Base/BaseNFTWithoutPresale.sol\";\nimport \"../Base/BaseNFTDelayed.sol\";\nimport \"../Base/BaseNFTWithRandom.sol\";\n\ncontract NFTWithoutPresaleWithRandomDelayed is BaseNFTWithoutPresale, BaseNFTDelayed, BaseNFTWithRandom {\n    string public saleType;\n    uint256 public version;\n\n    /**\n    @notice This is initializer function is used to deploy new sale contract  \n    @param _name Collection name  \n    @param _symbol Collection symbol\n    @param _saleType sale Type  \n    @param _baseUri Collection Base URI  \n    @param _maxSupply Collection max supply   \n    @param _saleId backend sale id   \n    @param _publicSaleConfig Public sale configuration data  \n    @param _signerAddress Whitelist signer address\n    */\n    function __NFTWithoutPresaleWithRandomDelayed_init(\n        string memory _name,\n        string memory _symbol,\n        string memory _saleType,\n        string memory _baseUri,\n        uint256 _maxSupply,\n        string memory _saleId,\n        publicSaleConfig memory _publicSaleConfig,\n        address _signerAddress,\n        randomConfig memory _randomConfig\n    ) public initializer {\n        require(both(_maxSupply > 0, maxSupply <= 100000), \"Init: Invalid max supply\");\n        require(_publicSaleConfig._publicSaleMintCost > 100, \"Init: Invalid Token cost\");\n        require(block.timestamp <= _publicSaleConfig._publicSaleStartTime, \"Init: Invalid Start Time\");\n        require(_publicSaleConfig._publicSaleDuration > 0, \"Init: sale duration > 0\");\n        require(_publicSaleConfig._maxTokenPerMintPublicSale > 0, \"Init: Maximum token per mint in public sale > 0\");\n        require(\n            both(\n                _publicSaleConfig._maxTokenPerPersonPublicSale >= _publicSaleConfig._maxTokenPerMintPublicSale,\n                _publicSaleConfig._maxTokenPerPersonPublicSale <= _maxSupply\n            ),\n            \"Init: Invalid MaxTokenPerPerson of public sale\"\n        );\n\n        require(_signerAddress != address(0), \"Init: Invalid SignerAddress\");\n\n        __ERC1155_init(_baseUri);\n        __Ownable_init();\n        __VRFConsumerBase_init(_randomConfig.vrfCoordinator, _randomConfig.link);\n\n        name = _name;\n        symbol = _symbol;\n        saleType = _saleType;\n        baseUri = _baseUri;\n        maxSupply = _maxSupply;\n        saleId = _saleId;\n        keyHash = _randomConfig.keyHash;\n        fee = _randomConfig.fee;\n\n        publicSaleMintCost = _publicSaleConfig._publicSaleMintCost;\n        publicSaleStartTime = _publicSaleConfig._publicSaleStartTime;\n        publicSaleEndTime = publicSaleStartTime + _publicSaleConfig._publicSaleDuration;\n        maxTokenPerMintPublicSale = _publicSaleConfig._maxTokenPerMintPublicSale;\n        maxTokenPerPersonPublicSale = _publicSaleConfig._maxTokenPerPersonPublicSale;\n        signerAddress = _signerAddress;\n\n        version = 1;\n        factory = msg.sender;\n    }\n\n    /**\n    @notice This function is used to reveal the token can only be called by owner  \n    @dev TokensRevealed and URI event is emitted  \n    */\n    function revealTokens(string memory _uri) external onlyOwner publicSaleEnded {\n        require(isrequestfulfilled, \"random number to be assigned\");\n        _revealTokens();\n        _updateURI(_uri);\n    }\n\n    /**\n    @notice This function is used to get random asset id  \n    @return assetID Random assetID  \n    */\n    function getAssetId(uint256 _tokenID) external view returns (uint256) {\n        require(revealed, \"reveal the token first\");\n        return _getAssetId(_tokenID);\n    }\n\n    /**\n    @notice This function is used to create Airdrop  \n    @dev It can only be called by owner  \n    @param _list list of addresses  \n    @param _shares public Sale Shares in Airdrop \n    */\n    function createAirdrop(address[] calldata _list, uint256[2] calldata _shares) external isApproved onlyOwner {\n        require(!revealed, \"Airdrop: Invalid action after reveal\");\n\n        _initiateAirdrop(_list, _shares);\n    }\n\n    /**\n    @notice This function is used to update version of contract\n    @param _version version number\n    */\n    function setVersion(uint256 _version) external onlyOwner {\n        version = _version;\n    }\n}\n"
    },
    "contracts/Base/BaseNFTWithoutPresale.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Base/BaseNFTSale.sol\";\nimport \"./BaseNFTAirdrop.sol\";\n\ncontract BaseNFTWithoutPresale is BaseNFTSale, BaseNFTAirdrop {\n    struct publicSaleConfig {\n        uint256 _publicSaleMintCost;\n        uint256 _publicSaleStartTime;\n        uint256 _publicSaleDuration;\n        uint256 _maxTokenPerMintPublicSale;\n        uint256 _maxTokenPerPersonPublicSale;\n    }\n\n    modifier isSaleOff() {\n        _isSaleOff();\n        _;\n    }\n\n    /**\n    @notice This function is used to update public sale parameters  \n    @dev It can only be called by owner  \n    @param _publicSaleMintCost Cost to mint one token in pubic sale  \n    @param _publicSaleStartTime Buffer time to add between presale and public sale i.e 30 + something...  \n    @param _publicSaleDuration Duration for which public sales is live  \n    @param _maxTokenPerMintPublicSale Maximum No of tokens that can be purchased by user in single tx in public sale  \n    @param _maxTokenPerPersonPublicSale Maximum No of token can be purchased by user as whole in public sale  \n    */\n    function updatePublicSale(\n        uint256 _publicSaleMintCost,\n        uint256 _publicSaleStartTime,\n        uint256 _publicSaleDuration,\n        uint256 _maxTokenPerMintPublicSale,\n        uint256 _maxTokenPerPersonPublicSale\n    ) external onlyOwner {\n        require(\n            either(\n                both(block.timestamp < publicSaleStartTime, _publicSaleStartTime > block.timestamp),\n                publicSaleStartTime == _publicSaleStartTime\n            ),\n            \"Invalid Start Time\"\n        );\n        require(block.timestamp < publicSaleEndTime, \"The public sale is ended cannot update\");\n        require(_publicSaleMintCost > 100, \"Invalid Token cost\");\n        require(_publicSaleDuration > 0, \"Public sale duration>0\");\n        require(\n            both(\n                _maxTokenPerMintPublicSale > 0,\n                both(\n                    _maxTokenPerPersonPublicSale <= maxSupply,\n                    _maxTokenPerPersonPublicSale >= _maxTokenPerMintPublicSale\n                )\n            ),\n            \"Maximum token minted per person/per mint not correct\"\n        );\n\n        publicSaleMintCost = _publicSaleMintCost;\n        publicSaleStartTime = _publicSaleStartTime;\n        publicSaleEndTime = publicSaleStartTime + _publicSaleDuration;\n        maxTokenPerMintPublicSale = _maxTokenPerMintPublicSale;\n        maxTokenPerPersonPublicSale = _maxTokenPerPersonPublicSale;\n    }\n\n    /**\n    @notice This function is used to buy and mint nft in public sale  \n    @param tokenQuantity The token quantity that buyer wants to mint  \n    */\n    function publicSaleBuy(uint256 tokenQuantity) external payable {\n        _publicSaleMint(tokenQuantity);\n    }\n\n    /**\n    @notice This function is used to buy and mint nft in public sale for affiliation feature  \n    @param tokenQuantity The token quantity that buyer wants to mint  \n    @param affiliatedUser The affiliated user address  \n    @param commission The commission percentage that will be paid to affiliated user  \n    @param signature The signature sent by the buyer  \n    */\n    function publicSaleBuyAffiliated(\n        uint256 tokenQuantity,\n        address affiliatedUser,\n        uint256 commission,\n        bytes memory signature\n    ) external payable {\n        _publicSaleMintAffiliated(tokenQuantity, affiliatedUser, commission, signature);\n    }\n\n    /**\n    @notice This function is used to give away NFTs \n    @dev This function is called when the public sale is not live \n    @param list a list to addresses which will get airdrop  \n    @param shares an array of presale and public sale shares (shares[0] should always be zero in without presale case) \n    */\n    function _initiateAirdrop(address[] calldata list, uint256[2] calldata shares) internal isSaleOff {\n        require(shares[0] == 0, \"Airdrop:Invalid shares\");\n\n        _createAirdrop(list, shares);\n    }\n\n    /**\n    @notice This function is used in modifier to check whether any sale is running or not (reduces code size)  \n    */\n    function _isSaleOff() internal view {\n        require(\n            either(block.timestamp < publicSaleStartTime, block.timestamp > publicSaleEndTime),\n            \"Airdrop:Invalid Time\"\n        );\n    }\n}\n"
    },
    "contracts/Sales/NFTWithoutPresaleWithoutRandomInstant.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Base/BaseNFTWithoutPresale.sol\";\n\ncontract NFTWithoutPresaleWithoutRandomInstant is BaseNFTWithoutPresale {\n    string public saleType;\n    uint256 public version;\n\n    /**\n    @notice This is initializer function is used to deploy new sale contract  \n    @param _name Collection name  \n    @param _symbol Collection symbol  \n    @param _saleType sale Type\n    @param _baseUri Collection Base URI  \n    @param _maxSupply Collection max supply  \n    @param _saleId backend sale id   \n    @param _publicSaleConfig Public sale configuration data  \n    @param _signerAddress Whitelist signer address  \n    */\n    function __NFTWithoutPresaleWithoutRandomInstant_init(\n        string memory _name,\n        string memory _symbol,\n        string memory _saleType,\n        string memory _baseUri,\n        uint256 _maxSupply,\n        string memory _saleId,\n        publicSaleConfig memory _publicSaleConfig,\n        address _signerAddress\n    ) public initializer {\n        require(_maxSupply > 0, \"Init: Invalid max supply\");\n        require(_publicSaleConfig._publicSaleMintCost > 100, \"Init: Invalid Token cost\");\n        require(block.timestamp <= _publicSaleConfig._publicSaleStartTime, \"Init: Invalid Start Time\");\n        require(_publicSaleConfig._publicSaleDuration > 0, \"Init: sale duration > 0\");\n        require(_publicSaleConfig._maxTokenPerMintPublicSale > 0, \"Init: Maximum token per mint in public sale > 0\");\n        require(\n            both(\n                _publicSaleConfig._maxTokenPerPersonPublicSale >= _publicSaleConfig._maxTokenPerMintPublicSale,\n                _publicSaleConfig._maxTokenPerPersonPublicSale <= _maxSupply\n            ),\n            \"Init: Invalid MaxTokenPerPerson of public sale\"\n        );\n\n        __ERC1155_init(_baseUri);\n        __Ownable_init();\n\n        name = _name;\n        symbol = _symbol;\n        saleType = _saleType;\n        baseUri = _baseUri;\n        maxSupply = _maxSupply;\n        saleId = _saleId;\n\n        publicSaleMintCost = _publicSaleConfig._publicSaleMintCost;\n        publicSaleStartTime = _publicSaleConfig._publicSaleStartTime;\n        publicSaleEndTime = publicSaleStartTime + _publicSaleConfig._publicSaleDuration;\n        maxTokenPerMintPublicSale = _publicSaleConfig._maxTokenPerMintPublicSale;\n        maxTokenPerPersonPublicSale = _publicSaleConfig._maxTokenPerPersonPublicSale;\n        signerAddress = _signerAddress;\n        version = 1;\n        factory = msg.sender;\n    }\n\n    /**\n    @notice This function is used to create Airdrop  \n    @dev It can only be called by owner  \n    @param list list of addresses  \n    @param shares public sale shares in Airdrop \n    */\n\n    function createAirdrop(address[] calldata list, uint256[2] calldata shares) external isApproved onlyOwner {\n        _initiateAirdrop(list, shares);\n    }\n\n    /**\n    @notice This function is used to update version of contract\n    @param _version version number\n    */\n    function setVersion(uint256 _version) external onlyOwner {\n        version = _version;\n    }\n}\n"
    },
    "contracts/NFTFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Sales/NFTWithoutPresaleWithoutRandomInstant.sol\";\nimport \"./Sales/NFTWithPresaleWithoutRandomInstant.sol\";\nimport \"./Sales/NFTWithoutPresaleWithRandomDelayed.sol\";\nimport \"./Sales/NFTWithPresaleWithRandomDelayed.sol\";\nimport \"./Interfaces/INFTSale.sol\";\n\ncontract NFTFactory is Ownable {\n    uint256 public version = 1;\n    address private nftWithoutPresaleWithoutRandomInstant;\n    address private nftWithPresaleWithoutRandomInstant;\n    address private nftWithoutPresaleWithRandomDelayed;\n    address private nftWithPresaleWithRandomDelayed;\n\n    event SaleCreated(address clone, string saleID);\n\n    event SetDropFee(address indexed nftDrop, address feeWallet, uint256 fee);\n\n    event Approved(address approver, address nftDrop);\n\n    event ImplementationUpdated(address previousImpl, address newImpl, uint256 typeId);\n\n    mapping(string => bool) public isSaleidExists;\n\n    mapping(address => bool) public isDropFeeSet;\n\n    mapping(address => bool) public isDropDeployed;\n\n    NFTWithPresaleWithRandomDelayed.randomConfig internal rConfig;\n\n    constructor(\n        address _vrfCoordinator,\n        address _link,\n        bytes32 _keyHash,\n        uint256 _fee,\n        address _nftWithoutPresaleWithoutRandomInstant,\n        address _nftWithPresaleWithoutRandomInstant,\n        address _nftWithoutPresaleWithRandomDelayed,\n        address _nftWithPresaleWithRandomDelayed\n    ) {\n        require(_vrfCoordinator != address(0), \"Invalid VRF\");\n\n        nftWithoutPresaleWithoutRandomInstant = _nftWithoutPresaleWithoutRandomInstant;\n        nftWithPresaleWithoutRandomInstant = _nftWithPresaleWithoutRandomInstant;\n        nftWithoutPresaleWithRandomDelayed = _nftWithoutPresaleWithRandomDelayed;\n        nftWithPresaleWithRandomDelayed = _nftWithPresaleWithRandomDelayed;\n\n        rConfig.vrfCoordinator = _vrfCoordinator;\n        rConfig.link = _link;\n        rConfig.keyHash = _keyHash;\n        rConfig.fee = _fee;\n    }\n\n    /**\n    @notice This function is used to deploy new sale contract  \n    @param _name Collection name  \n    @param _symbol Collection symbol  \n    @param _saleCreator Collection creator name\n    @param _presaleBaseUri Collection Base URI  \n    @param _maxSupply Collection max supply  \n    @param _saleId backend sale id   \n    @param _publicSaleConfig Public sale configuration data  \n    @param _signerAddress Whitelist signer address of presale buyers   \n    */\n    function deployNFTWithoutPresaleWithoutRandomInstant(\n        string memory _name,\n        string memory _symbol,\n        string memory _saleCreator,\n        string memory _presaleBaseUri,\n        uint256 _maxSupply,\n        string memory _saleId,\n        NFTWithoutPresaleWithoutRandomInstant.publicSaleConfig memory _publicSaleConfig,\n        address _signerAddress\n    ) external {\n        require(!isSaleidExists[_saleId], \"sale id exists\");\n        require(_publicSaleConfig._publicSaleStartTime != 0, \"invalid sale start time\");\n\n        address clone = Clones.clone(nftWithoutPresaleWithoutRandomInstant);\n        string memory _saleType = string(abi.encodePacked(_saleCreator, \"NFTWithoutPresaleWithoutRandomInstant\"));\n        NFTWithoutPresaleWithoutRandomInstant(clone).__NFTWithoutPresaleWithoutRandomInstant_init(\n            _name,\n            _symbol,\n            _saleType,\n            _presaleBaseUri,\n            _maxSupply,\n            _saleId,\n            _publicSaleConfig,\n            _signerAddress\n        );\n        NFTWithoutPresaleWithoutRandomInstant(clone).transferOwnership(msg.sender);\n        isSaleidExists[_saleId] = true;\n        isDropDeployed[clone] = true;\n        emit SaleCreated(clone, _saleId);\n    }\n\n    /**\n    @notice This function is used to deploy new sale contract  \n    @param _name Collection name  \n    @param _symbol Collection symbol \n    @param _saleCreator Collection creator name\n    @param _presaleBaseUri Collection Base URI  \n    @param _maxSupply Collection max supply  \n    @param _saleId backend sale id   \n    @param _preSaleConfig Pre Sale configuration data   \n    @param _publicSaleConfig Public sale configuration data  \n    @param _signerAddress Whitelist signer address of presale buyers   \n    */\n    function deployNFTWithPresaleWithoutRandomInstant(\n        string memory _name,\n        string memory _symbol,\n        string memory _saleCreator,\n        string memory _presaleBaseUri,\n        uint256 _maxSupply,\n        string memory _saleId,\n        NFTWithPresaleWithoutRandomInstant.preSaleConfig memory _preSaleConfig,\n        NFTWithPresaleWithoutRandomInstant.publicSaleConfig memory _publicSaleConfig,\n        address _signerAddress\n    ) external {\n        require(!isSaleidExists[_saleId], \"sale id exists\");\n        require(_preSaleConfig._preSaleStartTime != 0, \"invalid presale start time\");\n        address clone = Clones.clone(nftWithPresaleWithoutRandomInstant);\n        string memory _saleType = string(abi.encodePacked(_saleCreator, \"NFTWithPresaleWithoutRandomInstant\"));\n        NFTWithPresaleWithoutRandomInstant(clone).__NFTWithPresaleWithoutRandomInstant_init(\n            _name,\n            _symbol,\n            _saleType,\n            _presaleBaseUri,\n            _maxSupply,\n            _saleId,\n            _preSaleConfig,\n            _publicSaleConfig,\n            _signerAddress\n        );\n        NFTWithPresaleWithoutRandomInstant(clone).transferOwnership(msg.sender);\n        isSaleidExists[_saleId] = true;\n        isDropDeployed[clone] = true;\n        emit SaleCreated(clone, _saleId);\n    }\n\n    /**\n    @notice This function is used to deploy new sale contract  \n    @param _name Collection name  \n    @param _symbol Collection symbol\n    @param _saleCreator Collection creator name  \n    @param _baseUri Collection Base URI  \n    @param _maxSupply Collection max supply \n    @param _saleId backend sale id   \n    @param _publicSaleConfig Public sale configuration data  \n    @param _signerAddress Whitelist signer address of presale buyers\n    */\n\n    function deployNFTWithoutPresaleWithRandomdelayed(\n        string memory _name,\n        string memory _symbol,\n        string memory _saleCreator,\n        string memory _baseUri,\n        uint256 _maxSupply,\n        string memory _saleId, // Sould not be duplicated\n        NFTWithoutPresaleWithRandomDelayed.publicSaleConfig memory _publicSaleConfig,\n        address _signerAddress\n    ) external {\n        require(!isSaleidExists[_saleId], \"sale id exists\");\n        require(_publicSaleConfig._publicSaleStartTime != 0, \"invalid sale start time\");\n\n        address clone = Clones.clone(nftWithoutPresaleWithRandomDelayed);\n        string memory _saleType = string(abi.encodePacked(_saleCreator, \"NFTWithoutPresaleWithRandomdelayed\"));\n        NFTWithoutPresaleWithRandomDelayed(clone).__NFTWithoutPresaleWithRandomDelayed_init(\n            _name,\n            _symbol,\n            _saleType,\n            _baseUri,\n            _maxSupply,\n            _saleId,\n            _publicSaleConfig,\n            _signerAddress,\n            rConfig\n        );\n        NFTWithoutPresaleWithRandomDelayed(clone).transferOwnership(msg.sender);\n        isSaleidExists[_saleId] = true;\n        isDropDeployed[clone] = true;\n        emit SaleCreated(clone, _saleId);\n    }\n\n    /**\n    @notice This function is used to deploy new sale contract  \n    @param _name Collection name  \n    @param _symbol Collection symbol \n    @param _saleCreator Collection creator name  \n    @param _baseUri Collection Base URI  \n    @param _maxSupply Collection max supply \n    @param _saleId backend sale id   \n    @param _preSaleConfig Pre Sale configuration data \n    @param _publicSaleConfig Public sale configuration data  \n    @param _signerAddress Whitelist signer address of presale buyers\n    */\n\n    function deployNFTWithPresaleWithRandomdelayed(\n        string memory _name,\n        string memory _symbol,\n        string memory _saleCreator,\n        string memory _baseUri,\n        uint256 _maxSupply,\n        string memory _saleId,\n        NFTWithPresaleWithRandomDelayed.preSaleConfig memory _preSaleConfig,\n        NFTWithPresaleWithRandomDelayed.publicSaleConfig memory _publicSaleConfig,\n        address _signerAddress\n    ) external {\n        require(!isSaleidExists[_saleId], \"sale id exists\");\n        require(_preSaleConfig._preSaleStartTime != 0, \"invalid presale start time\");\n\n        address clone = Clones.clone(nftWithPresaleWithRandomDelayed);\n        string memory _saleType = string(abi.encodePacked(_saleCreator, \"NFTWithPresaleWithRandomdelayed\"));\n        NFTWithPresaleWithRandomDelayed(clone).__NFTWithPresaleWithRandomDelayed_init(\n            _name,\n            _symbol,\n            _saleType,\n            _baseUri,\n            _maxSupply,\n            _saleId,\n            _preSaleConfig,\n            _publicSaleConfig,\n            _signerAddress,\n            rConfig\n        );\n        NFTWithPresaleWithRandomDelayed(clone).transferOwnership(msg.sender);\n        isSaleidExists[_saleId] = true;\n        isDropDeployed[clone] = true;\n        emit SaleCreated(clone, _saleId);\n    }\n\n    /**\n    @notice This function is used to set drop fees and feeReceiver wallet for nftdrop\n    @param _nftDrop drop address  \n    */\n    function setDropFee(\n        address _nftDrop,\n        address _feeWallet,\n        uint256 _fee\n    ) external onlyOwner {\n        require(isDropDeployed[_nftDrop], \"nft drop is not deployed\");\n        require(_fee != 0, \"fee should be not be 0\");\n        require(_fee < 10000, \"fee<10000\");\n        require(_feeWallet != address(0), \"invalid fee receiver\");\n        require(!isDropFeeSet[_nftDrop], \"fee details set already\");\n\n        INFTSale(_nftDrop).setDropFee(_fee, _feeWallet);\n\n        isDropFeeSet[_nftDrop] = true;\n\n        emit SetDropFee(_nftDrop, _feeWallet, _fee);\n    }\n\n    /**\n    @notice This function is used to approve deployed nftDrop\n    @param _nftDrop drop address  \n    */\n    function setApproval(address _nftDrop) external onlyOwner {\n        require(isDropDeployed[_nftDrop], \"nft drop is not deployed\");\n        require(isDropFeeSet[_nftDrop], \"invalid approval stage\");\n\n        INFTSale(_nftDrop).setDropApproval();\n\n        emit Approved(msg.sender, _nftDrop);\n    }\n\n    /**\n    @notice This function is used to update vrfCoordinator address  \n    @param _vrfCoordinator Chain Link vrfCoordinator address  \n    */\n    function setVrfCoordinator(address _vrfCoordinator) external onlyOwner {\n        require(_vrfCoordinator != address(0), \"Invalid VRF\");\n        rConfig.vrfCoordinator = _vrfCoordinator;\n    }\n\n    /**\n    @notice This function is used to update link token address  \n    @param _link Chain Link link token address  \n    */\n    function setLinkTokenAddress(address _link) external onlyOwner {\n        require(_link != address(0), \"Invalid Link\");\n        rConfig.link = _link;\n    }\n\n    /**\n    @notice This function is used to update key hash  \n    @param _keyHash Chain Link random key hash  \n    */\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\n        rConfig.keyHash = _keyHash;\n    }\n\n    /**\n    @notice This function is used to update fee  \n    @param _fee fee\n    */\n    function setFee(uint256 _fee) external onlyOwner {\n        rConfig.fee = _fee;\n    }\n\n    /**\n    @notice This function is used to update version  \n    @param _version version number\n    */\n    function setVersion(uint256 _version) external onlyOwner {\n        version = _version;\n    }\n\n    /**\n        @notice sets the new implementation\n        @dev external function to update the new address of the implementation contract, only callable by owner\n        @param newImpl addres of the new implementation contract\n        @param typeId implementation type\n        @custom:emits implementationUpdated event\n    */\n    function updateImplementation(address newImpl, uint256 typeId) external onlyOwner {\n        address prevImpl;\n        require(newImpl != address(0), \"invalid new address\");\n        if (typeId == 0) {\n            prevImpl = nftWithoutPresaleWithoutRandomInstant;\n            require(prevImpl != newImpl, \"same implementation\");\n            nftWithoutPresaleWithoutRandomInstant = newImpl;\n        } else if (typeId == 1) {\n            prevImpl = nftWithPresaleWithoutRandomInstant;\n            require(prevImpl != newImpl, \"same implementation\");\n            nftWithPresaleWithoutRandomInstant = newImpl;\n        } else if (typeId == 2) {\n            prevImpl = nftWithoutPresaleWithRandomDelayed;\n            require(prevImpl != newImpl, \"same implementation\");\n            nftWithoutPresaleWithRandomDelayed = newImpl;\n        } else if (typeId == 3) {\n            prevImpl = nftWithPresaleWithRandomDelayed;\n            require(prevImpl != newImpl, \"same implementation\");\n            nftWithPresaleWithRandomDelayed = newImpl;\n        }\n        emit ImplementationUpdated(prevImpl, newImpl, typeId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/Sales/NFTWithPresaleWithoutRandomInstant.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Base/BaseNFTWithPresale.sol\";\n\ncontract NFTWithPresaleWithoutRandomInstant is BaseNFTWithPresale {\n    string public saleType;\n    uint256 public version;\n\n    /**\n    @notice This is initializer function is used to deploy new sale contract  \n    @param _name Collection name  \n    @param _symbol Collection symbol  \n    @param _saleType sale Type\n    @param _baseUri Collection Base URI  \n    @param _maxSupply Collection max supply  \n    @param _saleId backend sale id   \n    @param _preSaleConfig Pre Sale configuration data   \n    @param _publicSaleConfig Public sale configuration data  \n    @param _signerAddress Whitelist signer address of presale buyers  \n    */\n    function __NFTWithPresaleWithoutRandomInstant_init(\n        string memory _name,\n        string memory _symbol,\n        string memory _saleType,\n        string memory _baseUri,\n        uint256 _maxSupply,\n        string memory _saleId,\n        preSaleConfig memory _preSaleConfig,\n        publicSaleConfig memory _publicSaleConfig,\n        address _signerAddress\n    ) public initializer {\n        require(both(_maxSupply > 0, _maxSupply <= 100000), \"Init: Invalid max Supply\");\n        require(\n            both(_preSaleConfig._limitSupplyInPreSale > 0, _preSaleConfig._limitSupplyInPreSale <= _maxSupply),\n            \"Init: Invalid presale supply\"\n        );\n        require(\n            both(_preSaleConfig._preSaleMintCost >= 100, _publicSaleConfig._publicSaleMintCost >= 100),\n            \"Init: Invalid Token Cost\"\n        );\n        require(block.timestamp <= _preSaleConfig._preSaleStartTime, \"Init: Invalid PreSale Start Time\");\n        require(\n            both(_preSaleConfig._preSaleDuration > 0, _publicSaleConfig._publicSaleDuration > 0),\n            \"Init: Sale duration>0\"\n        );\n        require(\n            both(\n                _preSaleConfig._maxTokenPerMintPreSale > 0,\n                _preSaleConfig._maxTokenPerMintPreSale <= _preSaleConfig._limitSupplyInPreSale\n            ),\n            \"Init: Invalid maxTokenPerMint in presale\"\n        );\n\n        require(_publicSaleConfig._maxTokenPerMintPublicSale > 0, \"Init: Invalid MaxTokenPerMint of public sale\");\n\n        require(\n            both(\n                _publicSaleConfig._maxTokenPerPersonPublicSale <= _maxSupply,\n                _publicSaleConfig._maxTokenPerPersonPublicSale >= _publicSaleConfig._maxTokenPerMintPublicSale\n            ),\n            \"Init: Invalid MaxTokenPerPerson of public sale\"\n        );\n\n        require(_signerAddress != address(0), \"Init: Invalid SignerAddress\");\n\n        __ERC1155_init(_baseUri);\n        __Ownable_init();\n\n        name = _name;\n        symbol = _symbol;\n        saleType = _saleType;\n        baseUri = _baseUri;\n        maxSupply = _maxSupply;\n        saleId = _saleId;\n\n        preSaleMintCost = _preSaleConfig._preSaleMintCost;\n        publicSaleMintCost = _publicSaleConfig._publicSaleMintCost;\n        preSaleStartTime = _preSaleConfig._preSaleStartTime;\n        preSaleEndTime = _preSaleConfig._preSaleStartTime + _preSaleConfig._preSaleDuration;\n        publicSaleBufferDuration = _publicSaleConfig._publicSaleBufferDuration;\n        publicSaleStartTime =\n            _preSaleConfig._preSaleStartTime +\n            _preSaleConfig._preSaleDuration +\n            defaultPublicSaleBufferDuration +\n            _publicSaleConfig._publicSaleBufferDuration;\n        publicSaleEndTime = publicSaleStartTime + _publicSaleConfig._publicSaleDuration;\n        maxTokenPerMintPreSale = _preSaleConfig._maxTokenPerMintPreSale;\n        maxTokenPerMintPublicSale = _publicSaleConfig._maxTokenPerMintPublicSale;\n        maxTokenPerPersonPublicSale = _publicSaleConfig._maxTokenPerPersonPublicSale;\n        limitSupplyInPreSale = _preSaleConfig._limitSupplyInPreSale;\n        signerAddress = _signerAddress;\n        version = 1;\n        factory = msg.sender;\n    }\n\n    /**\n    @notice This function is used to create Airdrop (give away NFTs)\n    @dev It can only be called by owner  \n    @param _list list of addresses  \n    @param  shares sale shares in Airdrop\n    */\n    function createAirdrop(address[] calldata _list, uint256[2] calldata shares) external isApproved onlyOwner {\n        _initiateAirdrop(_list, shares);\n    }\n\n    /**\n    @notice This function is used to update version of contract\n    @param _version version number\n    */\n    function setVersion(uint256 _version) external onlyOwner {\n        version = _version;\n    }\n}\n"
    },
    "contracts/Interfaces/INFTSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface INFTSale {\n    function setDropFee(uint256 _fee, address _wallet) external;\n\n    function dropFee() external view returns (uint256);\n\n    function feeReceiver() external view returns (address);\n\n    function setDropApproval() external;\n\n    function isDropApproved() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Reward/RewardDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract RewardDistributor is Initializable, PausableUpgradeable, ReentrancyGuardUpgradeable, OwnableUpgradeable {\n    using ECDSA for bytes32;\n\n    uint8 public constant VERSION = 1;\n\n    /** @notice address of the signer */\n    address public signer;\n\n    IERC20Upgradeable public rewardToken;\n\n    //Claimed Rewards Per User\n    mapping(address => uint256) public claimed;\n\n    event Claim(address user, uint256 claimedRewards);\n\n    event TokenWithdrawnOwner(uint256 amount);\n\n    event UpdateSigner(address signer);\n\n    function rewardDistributor_init(address _rewardToken, address _signer) public initializer {\n        rewardToken = IERC20Upgradeable(_rewardToken);\n        signer = _signer;\n        __Ownable_init();\n        __Pausable_init();\n    }\n\n    /**\n    @notice This function is used to update signer address  \n    */\n    function setNewSigner(address _signer) external onlyOwner {\n        require(signer != address(0), \"invalid signer\");\n        signer = _signer;\n        emit UpdateSigner(_signer);\n    }\n\n    /**\n    @notice This function is used claim rewards for listing NFTs  \n    @param earnedRewards total earned rewards\n    @param signature The signature sent by the signer  \n    */\n    function claim(uint256 earnedRewards, bytes memory signature) external whenNotPaused {\n        bytes32 message = prepareMessage(msg.sender, earnedRewards);\n\n        require(matchAddressSigner(message, signature), \"signer should sign the message\");\n\n        uint256 claimedRewards = claimed[msg.sender];\n\n        require(earnedRewards > claimedRewards, \"Nothing to claim\");\n\n        uint256 toClaim = earnedRewards - claimedRewards;\n\n        require(rewardToken.transfer(msg.sender, toClaim), \"Transfer is not successful\");\n\n        claimed[msg.sender] += toClaim;\n\n        emit Claim(msg.sender, toClaim);\n    }\n\n    /**\n    @notice This function is used to withdraw ERC20 from contract  \n    */\n    function withdrawRewardToken(uint256 _amount) external onlyOwner nonReentrant {\n        require(rewardToken.balanceOf(address(this)) > 0, \"Nothing to Withdraw\");\n        require(_amount > 0, \"Withdrawing amount should be greater than zero\");\n\n        rewardToken.transfer(msg.sender, _amount);\n\n        emit TokenWithdrawnOwner(_amount);\n    }\n\n    /**\n    @notice Pause distribution\n    @dev Only for owner.\n     */\n    function pauseDistribution() external onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    /**\n    @notice Unpause distribution\n    @dev Only for owner.\n    */\n    function unpauseDistribution() external onlyOwner whenPaused {\n        _unpause();\n    }\n\n    /**\n    @dev This function is used to generate hash message\n    @param sender The address who is claiming rewards\n    @param _amount ClaimableAmount\n    @return hash generated by the function\n    */\n    function prepareMessage(address sender, uint256 _amount) public view returns (bytes32 hash) {\n        hash = keccak256(\n            abi.encodePacked(\n                \"\\x19Ethereum Signed Message:\\n32\",\n                keccak256(abi.encodePacked(sender, block.chainid, _amount, address(this)))\n            )\n        );\n    }\n\n    /**\n    @dev This function is used to verify claim validity using signature  \n    @param hash The hash message generated by the function hashMessage  \n    @param signature The signature sent in the claim function\n    @return boolean value true if the signature is verified else false  \n    */\n    function matchAddressSigner(bytes32 hash, bytes memory signature) public view returns (bool) {\n        return signer == hash.recover(signature);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface internal immutable LINK;\n  address private immutable vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\n    private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(address _vrfCoordinator, address _link) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/LinkTokenInterface.sol\";\nimport \"../VRFConsumerBase.sol\";\n\ncontract VRFCoordinatorMock {\n  LinkTokenInterface public LINK;\n\n  event RandomnessRequest(address indexed sender, bytes32 indexed keyHash, uint256 indexed seed);\n\n  constructor(address linkAddress) public {\n    LINK = LinkTokenInterface(linkAddress);\n  }\n\n  function onTokenTransfer(\n    address sender,\n    uint256 fee,\n    bytes memory _data\n  ) public onlyLINK {\n    (bytes32 keyHash, uint256 seed) = abi.decode(_data, (bytes32, uint256));\n    emit RandomnessRequest(sender, keyHash, seed);\n  }\n\n  function callBackWithRandomness(\n    bytes32 requestId,\n    uint256 randomness,\n    address consumerContract\n  ) public {\n    VRFConsumerBase v;\n    bytes memory resp = abi.encodeWithSelector(v.rawFulfillRandomness.selector, requestId, randomness);\n    uint256 b = 206000;\n    require(gasleft() >= b, \"not enough gas for consumer\");\n    (bool success, ) = consumerContract.call(resp);\n  }\n\n  modifier onlyLINK() {\n    require(msg.sender == address(LINK), \"Must use LINK token\");\n    _;\n  }\n}\n"
    },
    "contracts/Base/mocks/VRFCoordinatorMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/Base/mocks/RewardToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract RewardToken is ERC20 {\n    constructor() ERC20(\"reward\", \"rw\") {\n        _mint(msg.sender, 10000000000000000000000 * 10**decimals());\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}